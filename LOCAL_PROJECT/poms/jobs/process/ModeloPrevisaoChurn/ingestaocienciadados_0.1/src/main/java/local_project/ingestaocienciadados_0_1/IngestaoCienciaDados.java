// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.ingestaocienciadados_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: IngestaoCienciaDados Purpose: Job para ingestao de dados para Previsao
 * de Modelo Churn<br>
 * Description: Job para ingestao das entidades Cliente, Produtos, Vendas e
 * Vendedores. Modelo para previsao Churn <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class IngestaoCienciaDados implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IngestaoCienciaDados";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IngestaoCienciaDados.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IngestaoCienciaDados.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class JoinProductStruct implements routines.system.IPersistableRow<JoinProductStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public String CategoryName;

		public String getCategoryName() {
			return this.CategoryName;
		}

		public String ModelName;

		public String getModelName() {
			return this.ModelName;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final JoinProductStruct other = (JoinProductStruct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(JoinProductStruct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.Color = this.Color;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.CategoryName = this.CategoryName;
			other.ModelName = this.ModelName;

		}

		public void copyKeysDataTo(JoinProductStruct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.SellStartDate = readDate(dis);

					this.SellEndDate = readDate(dis);

					this.DiscontinuedDate = readDate(dis);

					this.CategoryName = readString(dis);

					this.ModelName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// java.util.Date

				writeDate(this.SellStartDate, dos);

				// java.util.Date

				writeDate(this.SellEndDate, dos);

				// java.util.Date

				writeDate(this.DiscontinuedDate, dos);

				// String

				writeString(this.CategoryName, dos);

				// String

				writeString(this.ModelName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",CategoryName=" + CategoryName);
			sb.append(",ModelName=" + ModelName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(JoinProductStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public Object ThumbNailPhoto;

		public Object getThumbNailPhoto() {
			return this.ThumbNailPhoto;
		}

		public String ThumbnailPhotoFileName;

		public String getThumbnailPhotoFileName() {
			return this.ThumbnailPhotoFileName;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = readString(dis);

					this.Weight = (BigDecimal) dis.readObject();

					this.ProductCategoryID = readInteger(dis);

					this.ProductModelID = readInteger(dis);

					this.SellStartDate = readDate(dis);

					this.SellEndDate = readDate(dis);

					this.DiscontinuedDate = readDate(dis);

					this.ThumbNailPhoto = (Object) dis.readObject();

					this.ThumbnailPhotoFileName = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// String

				writeString(this.Size, dos);

				// BigDecimal

				dos.writeObject(this.Weight);

				// Integer

				writeInteger(this.ProductCategoryID, dos);

				// Integer

				writeInteger(this.ProductModelID, dos);

				// java.util.Date

				writeDate(this.SellStartDate, dos);

				// java.util.Date

				writeDate(this.SellEndDate, dos);

				// java.util.Date

				writeDate(this.DiscontinuedDate, dos);

				// Object

				dos.writeObject(this.ThumbNailPhoto);

				// String

				writeString(this.ThumbnailPhotoFileName, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",ThumbNailPhoto=" + String.valueOf(ThumbNailPhoto));
			sb.append(",ThumbnailPhotoFileName=" + ThumbnailPhotoFileName);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public Object ThumbNailPhoto;

		public Object getThumbNailPhoto() {
			return this.ThumbNailPhoto;
		}

		public String ThumbnailPhotoFileName;

		public String getThumbnailPhotoFileName() {
			return this.ThumbnailPhotoFileName;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.Color = this.Color;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.Size = this.Size;
			other.Weight = this.Weight;
			other.ProductCategoryID = this.ProductCategoryID;
			other.ProductModelID = this.ProductModelID;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.ThumbNailPhoto = this.ThumbNailPhoto;
			other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = readString(dis);

					this.Weight = (BigDecimal) dis.readObject();

					this.ProductCategoryID = readInteger(dis);

					this.ProductModelID = readInteger(dis);

					this.SellStartDate = readDate(dis);

					this.SellEndDate = readDate(dis);

					this.DiscontinuedDate = readDate(dis);

					this.ThumbNailPhoto = (Object) dis.readObject();

					this.ThumbnailPhotoFileName = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// String

				writeString(this.Size, dos);

				// BigDecimal

				dos.writeObject(this.Weight);

				// Integer

				writeInteger(this.ProductCategoryID, dos);

				// Integer

				writeInteger(this.ProductModelID, dos);

				// java.util.Date

				writeDate(this.SellStartDate, dos);

				// java.util.Date

				writeDate(this.SellEndDate, dos);

				// java.util.Date

				writeDate(this.DiscontinuedDate, dos);

				// Object

				dos.writeObject(this.ThumbNailPhoto);

				// String

				writeString(this.ThumbnailPhotoFileName, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",ThumbNailPhoto=" + String.valueOf(ThumbNailPhoto));
			sb.append(",ThumbnailPhotoFileName=" + ThumbnailPhotoFileName);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public Object ThumbNailPhoto;

		public Object getThumbNailPhoto() {
			return this.ThumbNailPhoto;
		}

		public String ThumbnailPhotoFileName;

		public String getThumbnailPhotoFileName() {
			return this.ThumbnailPhotoFileName;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.Color = this.Color;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.Size = this.Size;
			other.Weight = this.Weight;
			other.ProductCategoryID = this.ProductCategoryID;
			other.ProductModelID = this.ProductModelID;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.ThumbNailPhoto = this.ThumbNailPhoto;
			other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = readString(dis);

					this.Weight = (BigDecimal) dis.readObject();

					this.ProductCategoryID = readInteger(dis);

					this.ProductModelID = readInteger(dis);

					this.SellStartDate = readDate(dis);

					this.SellEndDate = readDate(dis);

					this.DiscontinuedDate = readDate(dis);

					this.ThumbNailPhoto = (Object) dis.readObject();

					this.ThumbnailPhotoFileName = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// String

				writeString(this.Size, dos);

				// BigDecimal

				dos.writeObject(this.Weight);

				// Integer

				writeInteger(this.ProductCategoryID, dos);

				// Integer

				writeInteger(this.ProductModelID, dos);

				// java.util.Date

				writeDate(this.SellStartDate, dos);

				// java.util.Date

				writeDate(this.SellEndDate, dos);

				// java.util.Date

				writeDate(this.DiscontinuedDate, dos);

				// Object

				dos.writeObject(this.ThumbNailPhoto);

				// String

				writeString(this.ThumbnailPhotoFileName, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",ThumbNailPhoto=" + String.valueOf(ThumbNailPhoto));
			sb.append(",ThumbnailPhotoFileName=" + ThumbnailPhotoFileName);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row1Struct row4 = row1;
				JoinProductStruct JoinProduct = new JoinProductStruct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "JoinProduct");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/ChrunProductCurated"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "UTF-8"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("ProductID");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Name");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ProductNumber");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Color");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("StandardCost");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ListPrice");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SellStartDate");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SellEndDate");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DiscontinuedDate");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CategoryName");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ModelName");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_4", isFileGenerated_tFileOutputDelimited_4);
				resourceMap.put("filetFileOutputDelimited_4", filetFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				JoinProductStruct JoinProduct_tmp = new JoinProductStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngProduct" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("ProductID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Name");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ProductNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Color");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("StandardCost");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ListPrice");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Size");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Weight");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ProductCategoryID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ProductModelID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SellStartDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SellEndDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DiscontinuedDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ThumbNailPhoto");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ThumbnailPhotoFileName");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("rowguid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ModifiedDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "sqlfamily";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:8Ngd4foVXKkuMqQVudPSGhRP6nOyg7Gc7vhtXPNnY8ez58ZPfg==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = "1433";
				String dbname_tDBInput_1 = "AdventureWorks";
				String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += "//" + "AdventureWorks";
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_1 = "SalesLT";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT SalesLT.Product.ProductID,\n		SalesLT.Product.Name,\n		SalesLT.Product.ProductNumber,\n		SalesLT.Product.Color,\n		S"
						+ "alesLT.Product.StandardCost,\n		SalesLT.Product.ListPrice,\n		SalesLT.Product.Size,\n		SalesLT.Product.Weight,\n		SalesLT.Pr"
						+ "oduct.ProductCategoryID,\n		SalesLT.Product.ProductModelID,\n		SalesLT.Product.SellStartDate,\n		SalesLT.Product.SellEndDat"
						+ "e,\n		SalesLT.Product.DiscontinuedDate,\n		SalesLT.Product.ThumbNailPhoto,\n		SalesLT.Product.ThumbnailPhotoFileName,\n		Sal"
						+ "esLT.Product.rowguid,\n		SalesLT.Product.ModifiedDate\nFROM	SalesLT.Product";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ProductID = 0;
						} else {

							row1.ProductID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Name = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Name = tmpContent_tDBInput_1;
								}
							} else {
								row1.Name = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.ProductNumber = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ProductNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ProductNumber = tmpContent_tDBInput_1;
								}
							} else {
								row1.ProductNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Color = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Color = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Color = tmpContent_tDBInput_1;
								}
							} else {
								row1.Color = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.StandardCost = null;
						} else {

							row1.StandardCost = rs_tDBInput_1.getObject(5);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.ListPrice = null;
						} else {

							row1.ListPrice = rs_tDBInput_1.getObject(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Size = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Size = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Size = tmpContent_tDBInput_1;
								}
							} else {
								row1.Size = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Weight = null;
						} else {

							row1.Weight = rs_tDBInput_1.getBigDecimal(8);
							if (rs_tDBInput_1.wasNull()) {
								row1.Weight = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.ProductCategoryID = null;
						} else {

							row1.ProductCategoryID = rs_tDBInput_1.getInt(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.ProductCategoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.ProductModelID = null;
						} else {

							row1.ProductModelID = rs_tDBInput_1.getInt(10);
							if (rs_tDBInput_1.wasNull()) {
								row1.ProductModelID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.SellStartDate = null;
						} else {

							row1.SellStartDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 11);

						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.SellEndDate = null;
						} else {

							row1.SellEndDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 12);

						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.DiscontinuedDate = null;
						} else {

							row1.DiscontinuedDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 13);

						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.ThumbNailPhoto = null;
						} else {

							row1.ThumbNailPhoto = rs_tDBInput_1.getObject(14);
							if (rs_tDBInput_1.wasNull()) {
								row1.ThumbNailPhoto = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.ThumbnailPhotoFileName = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(15);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ThumbnailPhotoFileName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ThumbnailPhotoFileName = tmpContent_tDBInput_1;
								}
							} else {
								row1.ThumbnailPhotoFileName = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.rowguid = null;
						} else {

							row1.rowguid = rs_tDBInput_1.getObject(16);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.ModifiedDate = null;
						} else {

							row1.ModifiedDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 17);

						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						sb_tFileOutputDelimited_1.append(row1.ProductID);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Name != null) {
							sb_tFileOutputDelimited_1.append(row1.Name);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ProductNumber != null) {
							sb_tFileOutputDelimited_1.append(row1.ProductNumber);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Color != null) {
							sb_tFileOutputDelimited_1.append(row1.Color);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.StandardCost != null) {
							sb_tFileOutputDelimited_1.append(row1.StandardCost);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ListPrice != null) {
							sb_tFileOutputDelimited_1.append(row1.ListPrice);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Size != null) {
							sb_tFileOutputDelimited_1.append(row1.Size);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Weight != null) {
							sb_tFileOutputDelimited_1
									.append(row1.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ProductCategoryID != null) {
							sb_tFileOutputDelimited_1.append(row1.ProductCategoryID);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ProductModelID != null) {
							sb_tFileOutputDelimited_1.append(row1.ProductModelID);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.SellStartDate != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.SellStartDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.SellEndDate != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.SellEndDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.DiscontinuedDate != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.DiscontinuedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ThumbNailPhoto != null) {
							sb_tFileOutputDelimited_1.append(row1.ThumbNailPhoto);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ThumbnailPhotoFileName != null) {
							sb_tFileOutputDelimited_1.append(row1.ThumbnailPhotoFileName);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.rowguid != null) {
							sb_tFileOutputDelimited_1.append(row1.rowguid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ModifiedDate != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						row4 = row1;

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row5__ProductCategoryID = row4.ProductCategoryID;
							if (exprKeyValue_row5__ProductCategoryID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row5HashKey.ProductCategoryID = (int) (Integer) exprKeyValue_row5__ProductCategoryID;
							}

							row5HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row5.lookup(row5HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.ProductCategoryID = '" +
							// row5HashKey.ProductCategoryID + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row6"
						///////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row6__ProductModelID = row4.ProductModelID;
							if (exprKeyValue_row6__ProductModelID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row6HashKey.ProductModelID = (int) (Integer) exprKeyValue_row6__ProductModelID;
							}

							row6HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row6.lookup(row6HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6'
							// and it contains more one result from keys : row6.ProductModelID = '" +
							// row6HashKey.ProductModelID + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							JoinProduct = null;

// # Output table : 'JoinProduct'
							JoinProduct_tmp.ProductID = row4.ProductID;
							JoinProduct_tmp.Name = row4.Name;
							JoinProduct_tmp.ProductNumber = row4.ProductNumber;
							JoinProduct_tmp.Color = row4.Color;
							JoinProduct_tmp.StandardCost = row4.StandardCost;
							JoinProduct_tmp.ListPrice = row4.ListPrice;
							JoinProduct_tmp.SellStartDate = row4.SellStartDate;
							JoinProduct_tmp.SellEndDate = row4.SellEndDate;
							JoinProduct_tmp.DiscontinuedDate = row4.DiscontinuedDate;
							JoinProduct_tmp.CategoryName = row5.Name;
							JoinProduct_tmp.ModelName = row6.Name;
							JoinProduct = JoinProduct_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "JoinProduct"
						if (JoinProduct != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "JoinProduct");
							}

							StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
							sb_tFileOutputDelimited_4.append(JoinProduct.ProductID);
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.Name != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.Name);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.ProductNumber != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.ProductNumber);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.Color != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.Color);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.StandardCost != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.StandardCost);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.ListPrice != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.ListPrice);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.SellStartDate != null) {
								sb_tFileOutputDelimited_4
										.append(FormatterUtils.format_Date(JoinProduct.SellStartDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.SellEndDate != null) {
								sb_tFileOutputDelimited_4
										.append(FormatterUtils.format_Date(JoinProduct.SellEndDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.DiscontinuedDate != null) {
								sb_tFileOutputDelimited_4
										.append(FormatterUtils.format_Date(JoinProduct.DiscontinuedDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.CategoryName != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.CategoryName);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (JoinProduct.ModelName != null) {
								sb_tFileOutputDelimited_4.append(JoinProduct.ModelName);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

							outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_end ] stop
							 */

						} // End of branch "JoinProduct"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				if (isFileGenerated_tFileOutputDelimited_4 && nb_line_tFileOutputDelimited_4 == 0) {

					filetFileOutputDelimited_4.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "JoinProduct");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_4")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_4"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_4")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductCategoryID;

		public int getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer ParentProductCategoryID;

		public Integer getParentProductCategoryID() {
			return this.ParentProductCategoryID;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductCategoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.ProductCategoryID != other.ProductCategoryID)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.ProductCategoryID = this.ProductCategoryID;
			other.Name = this.Name;
			other.ParentProductCategoryID = this.ParentProductCategoryID;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.ProductCategoryID = this.ProductCategoryID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductCategoryID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductCategoryID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.ParentProductCategoryID = readInteger(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeInteger(this.ParentProductCategoryID, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",Name=" + Name);
			sb.append(",ParentProductCategoryID=" + String.valueOf(ParentProductCategoryID));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductCategoryID, other.ProductCategoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductCategoryID;

		public int getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public Integer ParentProductCategoryID;

		public Integer getParentProductCategoryID() {
			return this.ParentProductCategoryID;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductCategoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ProductCategoryID != other.ProductCategoryID)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ProductCategoryID = this.ProductCategoryID;
			other.Name = this.Name;
			other.ParentProductCategoryID = this.ParentProductCategoryID;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ProductCategoryID = this.ProductCategoryID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductCategoryID = dis.readInt();

					this.Name = readString(dis);

					this.ParentProductCategoryID = readInteger(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductCategoryID);

				// String

				writeString(this.Name, dos);

				// Integer

				writeInteger(this.ParentProductCategoryID, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",Name=" + Name);
			sb.append(",ParentProductCategoryID=" + String.valueOf(ParentProductCategoryID));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductCategoryID, other.ProductCategoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row2Struct row5 = row2;

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tFileOutputDelimited_2 - inputs:(row2) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row4,row5,row6) outputs:(JoinProduct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngProductCategoray"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "UTF-8"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("ProductCategoryID");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Name");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("ParentProductCategoryID");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("rowguid");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("ModifiedDate");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "sqlfamily";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:UH5YSMIoO6BQiMBVDsI+RDSQljaCMWEwZhWxKcbHeqM9FCwyUA==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String port_tDBInput_2 = "1433";
				String dbname_tDBInput_2 = "AdventureWorks";
				String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_2)) {
					url_tDBInput_2 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_2)) {
					url_tDBInput_2 += "//" + "AdventureWorks";
				}
				url_tDBInput_2 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_2 = "SalesLT";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT SalesLT.ProductCategory.ProductCategoryID,\n		SalesLT.ProductCategory.Name,\n		SalesLT.ProductCategory.ParentProdu"
						+ "ctCategoryID,\n		SalesLT.ProductCategory.rowguid,\n		SalesLT.ProductCategory.ModifiedDate\nFROM	SalesLT.ProductCategory";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.ProductCategoryID = 0;
						} else {

							row2.ProductCategoryID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Name = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Name = tmpContent_tDBInput_2;
								}
							} else {
								row2.Name = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.ParentProductCategoryID = null;
						} else {

							row2.ParentProductCategoryID = rs_tDBInput_2.getInt(3);
							if (rs_tDBInput_2.wasNull()) {
								row2.ParentProductCategoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.rowguid = null;
						} else {

							row2.rowguid = rs_tDBInput_2.getObject(4);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.ModifiedDate = null;
						} else {

							row2.ModifiedDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 5);

						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						sb_tFileOutputDelimited_2.append(row2.ProductCategoryID);
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.Name != null) {
							sb_tFileOutputDelimited_2.append(row2.Name);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.ParentProductCategoryID != null) {
							sb_tFileOutputDelimited_2.append(row2.ParentProductCategoryID);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.rowguid != null) {
							sb_tFileOutputDelimited_2.append(row2.rowguid);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.ModifiedDate != null) {
							sb_tFileOutputDelimited_2
									.append(FormatterUtils.format_Date(row2.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

						row5 = row2;

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.ProductCategoryID = row5.ProductCategoryID;

						row5_HashRow.Name = row5.Name;

						row5_HashRow.ParentProductCategoryID = row5.ParentProductCategoryID;

						row5_HashRow.rowguid = row5.rowguid;

						row5_HashRow.ModifiedDate = row5.ModifiedDate;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductModelID;

		public int getProductModelID() {
			return this.ProductModelID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CatalogDescription;

		public String getCatalogDescription() {
			return this.CatalogDescription;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductModelID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ProductModelID != other.ProductModelID)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ProductModelID = this.ProductModelID;
			other.Name = this.Name;
			other.CatalogDescription = this.CatalogDescription;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ProductModelID = this.ProductModelID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductModelID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductModelID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.CatalogDescription = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.CatalogDescription, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",Name=" + Name);
			sb.append(",CatalogDescription=" + CatalogDescription);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductModelID;

		public int getProductModelID() {
			return this.ProductModelID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String CatalogDescription;

		public String getCatalogDescription() {
			return this.CatalogDescription;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductModelID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ProductModelID != other.ProductModelID)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ProductModelID = this.ProductModelID;
			other.Name = this.Name;
			other.CatalogDescription = this.CatalogDescription;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ProductModelID = this.ProductModelID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductModelID = dis.readInt();

					this.Name = readString(dis);

					this.CatalogDescription = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductModelID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.CatalogDescription, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",Name=" + Name);
			sb.append(",CatalogDescription=" + CatalogDescription);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row3Struct row6 = row3;

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tFileOutputDelimited_3 - inputs:(row3) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row4,row5,row6) outputs:(JoinProduct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngProductModel" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "UTF-8"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("ProductModelID");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Name");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("CatalogDescription");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("rowguid");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("ModifiedDate");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_3", isFileGenerated_tFileOutputDelimited_3);
				resourceMap.put("filetFileOutputDelimited_3", filetFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "sqlfamily";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:zO0OkDd2PxwxVipW+imwLJGCczvAvwLQK/lKUzMob8a9wlWpfw==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String port_tDBInput_3 = "1433";
				String dbname_tDBInput_3 = "AdventureWorks";
				String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_3)) {
					url_tDBInput_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_3)) {
					url_tDBInput_3 += "//" + "AdventureWorks";
				}
				url_tDBInput_3 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_3 = "SalesLT";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT SalesLT.ProductModel.ProductModelID,\n		SalesLT.ProductModel.Name,\n		SalesLT.ProductModel.CatalogDescription,\n		S"
						+ "alesLT.ProductModel.rowguid,\n		SalesLT.ProductModel.ModifiedDate\nFROM	SalesLT.ProductModel";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.ProductModelID = 0;
						} else {

							row3.ProductModelID = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.Name = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.Name = tmpContent_tDBInput_3;
								}
							} else {
								row3.Name = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.CatalogDescription = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.CatalogDescription = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.CatalogDescription = tmpContent_tDBInput_3;
								}
							} else {
								row3.CatalogDescription = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.rowguid = null;
						} else {

							row3.rowguid = rs_tDBInput_3.getObject(4);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.ModifiedDate = null;
						} else {

							row3.ModifiedDate = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 5);

						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						sb_tFileOutputDelimited_3.append(row3.ProductModelID);
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.Name != null) {
							sb_tFileOutputDelimited_3.append(row3.Name);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.CatalogDescription != null) {
							sb_tFileOutputDelimited_3.append(row3.CatalogDescription);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.rowguid != null) {
							sb_tFileOutputDelimited_3.append(row3.rowguid);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row3.ModifiedDate != null) {
							sb_tFileOutputDelimited_3
									.append(FormatterUtils.format_Date(row3.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

						row6 = row3;

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.ProductModelID = row6.ProductModelID;

						row6_HashRow.Name = row6.Name;

						row6_HashRow.CatalogDescription = row6.CatalogDescription;

						row6_HashRow.rowguid = row6.rowguid;

						row6_HashRow.ModifiedDate = row6.ModifiedDate;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				if (isFileGenerated_tFileOutputDelimited_3 && nb_line_tFileOutputDelimited_3 == 0) {

					filetFileOutputDelimited_3.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_3")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_3"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_3")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "sqlfamily";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:96XapRrbjDeCaEvcoyZ25O94eqEKAfXSBC5IoHpfh1WvtK4BFw==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String port_tDBInput_4 = "1433";
				String dbname_tDBInput_4 = "AdventureWorks";
				String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_4)) {
					url_tDBInput_4 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_4)) {
					url_tDBInput_4 += "//" + "AdventureWorks";
				}
				url_tDBInput_4 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_4 = "SalesLT";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT SalesLT.Customer.CustomerID,\n		SalesLT.Customer.NameStyle,\n		SalesLT.Customer.Title,\n		SalesLT.Customer.FirstNam"
						+ "e,\n		SalesLT.Customer.MiddleName,\n		SalesLT.Customer.LastName,\n		SalesLT.Customer.Suffix,\n		SalesLT.Customer.CompanyName"
						+ ",\n		SalesLT.Customer.SalesPerson,\n		SalesLT.Customer.EmailAddress,\n		SalesLT.Customer.Phone,\n		SalesLT.Customer.Password"
						+ "Hash,\n		SalesLT.Customer.PasswordSalt,\n		SalesLT.Customer.rowguid,\n		SalesLT.Customer.ModifiedDate\nFROM	SalesLT.Customer"
						+ "";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.RevisionNumber = dis.readShort();

				this.OrderDate = readDate(dis, ois);

				this.DueDate = readDate(dis, ois);

				this.ShipDate = readDate(dis, ois);

				this.Status = dis.readShort();

				this.OnlineOrderFlag = readInteger(dis, ois);

				this.SalesOrderNumber = readString(dis, ois);

				this.CustomerID = dis.readInt();

				this.ShipToAddressID = readInteger(dis, ois);

				this.BillToAddressID = readInteger(dis, ois);

				this.ShipMethod = readString(dis, ois);

				this.CreditCardApprovalCode = readString(dis, ois);

				this.SubTotal = (Object) ois.readObject();

				this.TaxAmt = (Object) ois.readObject();

				this.Freight = (Object) ois.readObject();

				this.TotalDue = (BigDecimal) ois.readObject();

				this.Comment = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeShort(this.RevisionNumber);

				writeDate(this.OrderDate, dos, oos);

				writeDate(this.DueDate, dos, oos);

				writeDate(this.ShipDate, dos, oos);

				dos.writeShort(this.Status);

				writeInteger(this.OnlineOrderFlag, dos, oos);

				writeString(this.SalesOrderNumber, dos, oos);

				dos.writeInt(this.CustomerID);

				writeInteger(this.ShipToAddressID, dos, oos);

				writeInteger(this.BillToAddressID, dos, oos);

				writeString(this.ShipMethod, dos, oos);

				writeString(this.CreditCardApprovalCode, dos, oos);

				oos.writeObject(this.SubTotal);

				oos.writeObject(this.TaxAmt);

				oos.writeObject(this.Freight);

				oos.writeObject(this.TotalDue);

				writeString(this.Comment, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				row12Struct row17 = row12;

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tFileOutputDelimited_9 - inputs:(row12) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_3 - inputs:(row17,row16,row18) outputs:(SalesProduct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct>getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngSalesOrderHeaderRaw"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
							fileName_tFileOutputDelimited_9.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);
				int nb_line_tFileOutputDelimited_9 = 0;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
																		 * Start field
																		 * tFileOutputDelimited_9:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;

				java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				if (fileToDelete_tFileOutputDelimited_9.exists()) {
					fileToDelete_tFileOutputDelimited_9.delete();
				}
				outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, false), "UTF-8"));
				if (filetFileOutputDelimited_9.length() == 0) {
					outtFileOutputDelimited_9.write("SalesOrderID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("RevisionNumber");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("OrderDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("DueDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ShipDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Status");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("OnlineOrderFlag");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("SalesOrderNumber");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CustomerID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ShipToAddressID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("BillToAddressID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ShipMethod");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CreditCardApprovalCode");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("SubTotal");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("TaxAmt");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Freight");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("TotalDue");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Comment");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("rowguid");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ModifiedDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
				resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_9", isFileGenerated_tFileOutputDelimited_9);
				resourceMap.put("filetFileOutputDelimited_9", filetFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "sqlfamily";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:tjLDYDYv5pwTnH9jgJ7kXpORh3mAgqdP+Tc6RULNH0PRTKutGg==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String port_tDBInput_5 = "1433";
				String dbname_tDBInput_5 = "AdventureWorks";
				String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_5)) {
					url_tDBInput_5 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_5)) {
					url_tDBInput_5 += "//" + "AdventureWorks";
				}
				url_tDBInput_5 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_5 = "SalesLT";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT SalesLT.SalesOrderHeader.SalesOrderID,\n		SalesLT.SalesOrderHeader.RevisionNumber,\n		SalesLT.SalesOrderHeader.Ord"
						+ "erDate,\n		SalesLT.SalesOrderHeader.DueDate,\n		SalesLT.SalesOrderHeader.ShipDate,\n		SalesLT.SalesOrderHeader.Status,\n		Sa"
						+ "lesLT.SalesOrderHeader.OnlineOrderFlag,\n		SalesLT.SalesOrderHeader.SalesOrderNumber,\n		SalesLT.SalesOrderHeader.Customer"
						+ "ID,\n		SalesLT.SalesOrderHeader.ShipToAddressID,\n		SalesLT.SalesOrderHeader.BillToAddressID,\n		SalesLT.SalesOrderHeader.S"
						+ "hipMethod,\n		SalesLT.SalesOrderHeader.CreditCardApprovalCode,\n		SalesLT.SalesOrderHeader.SubTotal,\n		SalesLT.SalesOrderH"
						+ "eader.TaxAmt,\n		SalesLT.SalesOrderHeader.Freight,\n		SalesLT.SalesOrderHeader.TotalDue,\n		SalesLT.SalesOrderHeader.Commen"
						+ "t,\n		SalesLT.SalesOrderHeader.rowguid,\n		SalesLT.SalesOrderHeader.ModifiedDate\nFROM	SalesLT.SalesOrderHeader";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row12.SalesOrderID = 0;
						} else {

							row12.SalesOrderID = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row12.RevisionNumber = 0;
						} else {

							row12.RevisionNumber = rs_tDBInput_5.getShort(2);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row12.OrderDate = null;
						} else {

							row12.OrderDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 3);

						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row12.DueDate = null;
						} else {

							row12.DueDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 4);

						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row12.ShipDate = null;
						} else {

							row12.ShipDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 5);

						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row12.Status = 0;
						} else {

							row12.Status = rs_tDBInput_5.getShort(6);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row12.OnlineOrderFlag = null;
						} else {

							row12.OnlineOrderFlag = rs_tDBInput_5.getInt(7);
							if (rs_tDBInput_5.wasNull()) {
								row12.OnlineOrderFlag = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row12.SalesOrderNumber = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.SalesOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row12.SalesOrderNumber = tmpContent_tDBInput_5;
								}
							} else {
								row12.SalesOrderNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row12.CustomerID = 0;
						} else {

							row12.CustomerID = rs_tDBInput_5.getInt(9);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row12.ShipToAddressID = null;
						} else {

							row12.ShipToAddressID = rs_tDBInput_5.getInt(10);
							if (rs_tDBInput_5.wasNull()) {
								row12.ShipToAddressID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row12.BillToAddressID = null;
						} else {

							row12.BillToAddressID = rs_tDBInput_5.getInt(11);
							if (rs_tDBInput_5.wasNull()) {
								row12.BillToAddressID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row12.ShipMethod = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.ShipMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row12.ShipMethod = tmpContent_tDBInput_5;
								}
							} else {
								row12.ShipMethod = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row12.CreditCardApprovalCode = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(13);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.CreditCardApprovalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row12.CreditCardApprovalCode = tmpContent_tDBInput_5;
								}
							} else {
								row12.CreditCardApprovalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row12.SubTotal = null;
						} else {

							row12.SubTotal = rs_tDBInput_5.getObject(14);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row12.TaxAmt = null;
						} else {

							row12.TaxAmt = rs_tDBInput_5.getObject(15);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row12.Freight = null;
						} else {

							row12.Freight = rs_tDBInput_5.getObject(16);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row12.TotalDue = null;
						} else {

							row12.TotalDue = rs_tDBInput_5.getBigDecimal(17);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row12.Comment = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(18);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Comment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row12.Comment = tmpContent_tDBInput_5;
								}
							} else {
								row12.Comment = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row12.rowguid = null;
						} else {

							row12.rowguid = rs_tDBInput_5.getObject(19);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row12.ModifiedDate = null;
						} else {

							row12.ModifiedDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 20);

						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 main ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
						}

						StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
						sb_tFileOutputDelimited_9.append(row12.SalesOrderID);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						sb_tFileOutputDelimited_9.append(row12.RevisionNumber);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.OrderDate != null) {
							sb_tFileOutputDelimited_9.append(FormatterUtils.format_Date(row12.OrderDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.DueDate != null) {
							sb_tFileOutputDelimited_9.append(FormatterUtils.format_Date(row12.DueDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.ShipDate != null) {
							sb_tFileOutputDelimited_9.append(FormatterUtils.format_Date(row12.ShipDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						sb_tFileOutputDelimited_9.append(row12.Status);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.OnlineOrderFlag != null) {
							sb_tFileOutputDelimited_9.append(row12.OnlineOrderFlag);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.SalesOrderNumber != null) {
							sb_tFileOutputDelimited_9.append(row12.SalesOrderNumber);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						sb_tFileOutputDelimited_9.append(row12.CustomerID);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.ShipToAddressID != null) {
							sb_tFileOutputDelimited_9.append(row12.ShipToAddressID);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.BillToAddressID != null) {
							sb_tFileOutputDelimited_9.append(row12.BillToAddressID);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.ShipMethod != null) {
							sb_tFileOutputDelimited_9.append(row12.ShipMethod);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.CreditCardApprovalCode != null) {
							sb_tFileOutputDelimited_9.append(row12.CreditCardApprovalCode);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.SubTotal != null) {
							sb_tFileOutputDelimited_9.append(row12.SubTotal);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.TaxAmt != null) {
							sb_tFileOutputDelimited_9.append(row12.TaxAmt);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.Freight != null) {
							sb_tFileOutputDelimited_9.append(row12.Freight);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.TotalDue != null) {
							sb_tFileOutputDelimited_9
									.append(row12.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.Comment != null) {
							sb_tFileOutputDelimited_9.append(row12.Comment);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.rowguid != null) {
							sb_tFileOutputDelimited_9.append(row12.rowguid);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row12.ModifiedDate != null) {
							sb_tFileOutputDelimited_9
									.append(FormatterUtils.format_Date(row12.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

						nb_line_tFileOutputDelimited_9++;
						resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());

						row17 = row12;

						tos_count_tFileOutputDelimited_9++;

						/**
						 * [tFileOutputDelimited_9 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						/**
						 * [tFileOutputDelimited_9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row17 main ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
						}

						row17Struct row17_HashRow = new row17Struct();

						row17_HashRow.SalesOrderID = row17.SalesOrderID;

						row17_HashRow.RevisionNumber = row17.RevisionNumber;

						row17_HashRow.OrderDate = row17.OrderDate;

						row17_HashRow.DueDate = row17.DueDate;

						row17_HashRow.ShipDate = row17.ShipDate;

						row17_HashRow.Status = row17.Status;

						row17_HashRow.OnlineOrderFlag = row17.OnlineOrderFlag;

						row17_HashRow.SalesOrderNumber = row17.SalesOrderNumber;

						row17_HashRow.CustomerID = row17.CustomerID;

						row17_HashRow.ShipToAddressID = row17.ShipToAddressID;

						row17_HashRow.BillToAddressID = row17.BillToAddressID;

						row17_HashRow.ShipMethod = row17.ShipMethod;

						row17_HashRow.CreditCardApprovalCode = row17.CreditCardApprovalCode;

						row17_HashRow.SubTotal = row17.SubTotal;

						row17_HashRow.TaxAmt = row17.TaxAmt;

						row17_HashRow.Freight = row17.Freight;

						row17_HashRow.TotalDue = row17.TotalDue;

						row17_HashRow.Comment = row17.Comment;

						row17_HashRow.rowguid = row17.rowguid;

						row17_HashRow.ModifiedDate = row17.ModifiedDate;

						tHash_Lookup_row17.put(row17_HashRow);

						tos_count_tAdvancedHash_row17++;

						/**
						 * [tAdvancedHash_row17 main ] stop
						 */

						/**
						 * [tAdvancedHash_row17 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						/**
						 * [tAdvancedHash_row17 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row17 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						/**
						 * [tAdvancedHash_row17 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						/**
						 * [tFileOutputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE", nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);

				if (isFileGenerated_tFileOutputDelimited_9 && nb_line_tFileOutputDelimited_9 == 0) {

					filetFileOutputDelimited_9.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_9")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_9"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_9")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row17 finally ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				/**
				 * [tAdvancedHash_row17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class SalesProductStruct implements routines.system.IPersistableRow<SalesProductStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductColor;

		public String getProductColor() {
			return this.ProductColor;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final SalesProductStruct other = (SalesProductStruct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(SalesProductStruct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.OrderQty = this.OrderQty;
			other.UnitPrice = this.UnitPrice;
			other.UnitPriceDiscount = this.UnitPriceDiscount;
			other.LineTotal = this.LineTotal;
			other.ProductName = this.ProductName;
			other.ProductColor = this.ProductColor;
			other.StandardCost = this.StandardCost;

		}

		public void copyKeysDataTo(SalesProductStruct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.OrderQty = dis.readShort();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.ProductName = readString(dis);

					this.ProductColor = readString(dis);

					this.StandardCost = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// short

				dos.writeShort(this.OrderQty);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductColor, dos);

				// Object

				dos.writeObject(this.StandardCost);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductColor=" + ProductColor);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalesProductStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDetailID = dis.readInt();

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				result = prime * result + (int) this.SalesOrderDetailID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			if (this.SalesOrderDetailID != other.SalesOrderDetailID)
				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;
			other.OrderQty = this.OrderQty;
			other.ProductID = this.ProductID;
			other.UnitPrice = this.UnitPrice;
			other.UnitPriceDiscount = this.UnitPriceDiscount;
			other.LineTotal = this.LineTotal;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDetailID = dis.readInt();

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				result = prime * result + (int) this.SalesOrderDetailID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_6Struct other = (after_tDBInput_6Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			if (this.SalesOrderDetailID != other.SalesOrderDetailID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_6Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;
			other.OrderQty = this.OrderQty;
			other.ProductID = this.ProductID;
			other.UnitPrice = this.UnitPrice;
			other.UnitPriceDiscount = this.UnitPriceDiscount;
			other.LineTotal = this.LineTotal;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_6Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDetailID = dis.readInt();

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_5Process(globalMap);
				tFileInputDelimited_1Process(globalMap);

				row15Struct row15 = new row15Struct();
				row15Struct row16 = row15;
				SalesProductStruct SalesProduct = new SalesProductStruct();

				/**
				 * [tFileOutputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_12", false);
				start_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SalesProduct");
				}

				int tos_count_tFileOutputDelimited_12 = 0;

				String fileName_tFileOutputDelimited_12 = "";
				fileName_tFileOutputDelimited_12 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/ChrunSalesCurated" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_12 = null;
				String extension_tFileOutputDelimited_12 = null;
				String directory_tFileOutputDelimited_12 = null;
				if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
								fileName_tFileOutputDelimited_12.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
							fileName_tFileOutputDelimited_12.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
								fileName_tFileOutputDelimited_12.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					}
					directory_tFileOutputDelimited_12 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_12 = true;
				java.io.File filetFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME", fileName_tFileOutputDelimited_12);
				int nb_line_tFileOutputDelimited_12 = 0;
				int splitedFileNo_tFileOutputDelimited_12 = 0;
				int currentRow_tFileOutputDelimited_12 = 0;

				final String OUT_DELIM_tFileOutputDelimited_12 = /**
																	 * Start field
																	 * tFileOutputDelimited_12:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /**
																		 * Start field
																		 * tFileOutputDelimited_12:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_12 != null
						&& directory_tFileOutputDelimited_12.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_12 = new java.io.File(directory_tFileOutputDelimited_12);
					if (!dir_tFileOutputDelimited_12.exists()) {
						dir_tFileOutputDelimited_12.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_12 = null;

				java.io.File fileToDelete_tFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
				if (fileToDelete_tFileOutputDelimited_12.exists()) {
					fileToDelete_tFileOutputDelimited_12.delete();
				}
				outtFileOutputDelimited_12 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_12, false), "UTF-8"));
				if (filetFileOutputDelimited_12.length() == 0) {
					outtFileOutputDelimited_12.write("SalesOrderID");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("RevisionNumber");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("OrderDate");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("DueDate");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("ShipDate");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("Status");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("OnlineOrderFlag");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("SalesOrderNumber");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("CustomerID");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("ShipToAddressID");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("BillToAddressID");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("ShipMethod");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("CreditCardApprovalCode");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("SubTotal");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("TaxAmt");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("Freight");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("TotalDue");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("Comment");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("OrderQty");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("UnitPrice");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("UnitPriceDiscount");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("LineTotal");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("ProductName");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("ProductColor");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("StandardCost");
					outtFileOutputDelimited_12.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_12", outtFileOutputDelimited_12);
				resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_12", isFileGenerated_tFileOutputDelimited_12);
				resourceMap.put("filetFileOutputDelimited_12", filetFileOutputDelimited_12);

				/**
				 * [tFileOutputDelimited_12 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalesProductStruct SalesProduct_tmp = new SalesProductStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_11", false);
				start_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tFileOutputDelimited_11 = 0;

				String fileName_tFileOutputDelimited_11 = "";
				fileName_tFileOutputDelimited_11 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngSalesOrderDetailRaw"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_11 = null;
				String extension_tFileOutputDelimited_11 = null;
				String directory_tFileOutputDelimited_11 = null;
				if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
								fileName_tFileOutputDelimited_11.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
							fileName_tFileOutputDelimited_11.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
								fileName_tFileOutputDelimited_11.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					}
					directory_tFileOutputDelimited_11 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_11 = true;
				java.io.File filetFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME", fileName_tFileOutputDelimited_11);
				int nb_line_tFileOutputDelimited_11 = 0;
				int splitedFileNo_tFileOutputDelimited_11 = 0;
				int currentRow_tFileOutputDelimited_11 = 0;

				final String OUT_DELIM_tFileOutputDelimited_11 = /**
																	 * Start field
																	 * tFileOutputDelimited_11:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_11:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_11 = /**
																		 * Start field
																		 * tFileOutputDelimited_11:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_11:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_11 != null
						&& directory_tFileOutputDelimited_11.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_11 = new java.io.File(directory_tFileOutputDelimited_11);
					if (!dir_tFileOutputDelimited_11.exists()) {
						dir_tFileOutputDelimited_11.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_11 = null;

				java.io.File fileToDelete_tFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
				if (fileToDelete_tFileOutputDelimited_11.exists()) {
					fileToDelete_tFileOutputDelimited_11.delete();
				}
				outtFileOutputDelimited_11 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_11, false), "UTF-8"));
				if (filetFileOutputDelimited_11.length() == 0) {
					outtFileOutputDelimited_11.write("SalesOrderID");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("SalesOrderDetailID");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("OrderQty");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("ProductID");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("UnitPrice");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("UnitPriceDiscount");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("LineTotal");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("rowguid");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("ModifiedDate");
					outtFileOutputDelimited_11.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_11", outtFileOutputDelimited_11);
				resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_11", isFileGenerated_tFileOutputDelimited_11);
				resourceMap.put("filetFileOutputDelimited_11", filetFileOutputDelimited_11);

				/**
				 * [tFileOutputDelimited_11 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "sqlfamily";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:T87KG2++rPBkETiM2dnxIttJNPVPQNYfm5gT3Y/ll8uE9Hqi5A==");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String port_tDBInput_6 = "1433";
				String dbname_tDBInput_6 = "AdventureWorks";
				String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_6)) {
					url_tDBInput_6 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_6)) {
					url_tDBInput_6 += "//" + "AdventureWorks";
				}
				url_tDBInput_6 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_6 = "SalesLT";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT SalesLT.SalesOrderDetail.SalesOrderID,\n		SalesLT.SalesOrderDetail.SalesOrderDetailID,\n		SalesLT.SalesOrderDetail"
						+ ".OrderQty,\n		SalesLT.SalesOrderDetail.ProductID,\n		SalesLT.SalesOrderDetail.UnitPrice,\n		SalesLT.SalesOrderDetail.UnitPr"
						+ "iceDiscount,\n		SalesLT.SalesOrderDetail.LineTotal,\n		SalesLT.SalesOrderDetail.rowguid,\n		SalesLT.SalesOrderDetail.Modifi"
						+ "edDate\nFROM	SalesLT.SalesOrderDetail";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row15.SalesOrderID = 0;
						} else {

							row15.SalesOrderID = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row15.SalesOrderDetailID = 0;
						} else {

							row15.SalesOrderDetailID = rs_tDBInput_6.getInt(2);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row15.OrderQty = 0;
						} else {

							row15.OrderQty = rs_tDBInput_6.getShort(3);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row15.ProductID = 0;
						} else {

							row15.ProductID = rs_tDBInput_6.getInt(4);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row15.UnitPrice = null;
						} else {

							row15.UnitPrice = rs_tDBInput_6.getObject(5);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row15.UnitPriceDiscount = null;
						} else {

							row15.UnitPriceDiscount = rs_tDBInput_6.getObject(6);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row15.LineTotal = null;
						} else {

							row15.LineTotal = rs_tDBInput_6.getBigDecimal(7);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row15.rowguid = null;
						} else {

							row15.rowguid = rs_tDBInput_6.getObject(8);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row15.ModifiedDate = null;
						} else {

							row15.ModifiedDate = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 9);

						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 main ] start
						 */

						currentComponent = "tFileOutputDelimited_11";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
						}

						StringBuilder sb_tFileOutputDelimited_11 = new StringBuilder();
						sb_tFileOutputDelimited_11.append(row15.SalesOrderID);
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						sb_tFileOutputDelimited_11.append(row15.SalesOrderDetailID);
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						sb_tFileOutputDelimited_11.append(row15.OrderQty);
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						sb_tFileOutputDelimited_11.append(row15.ProductID);
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						if (row15.UnitPrice != null) {
							sb_tFileOutputDelimited_11.append(row15.UnitPrice);
						}
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						if (row15.UnitPriceDiscount != null) {
							sb_tFileOutputDelimited_11.append(row15.UnitPriceDiscount);
						}
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						if (row15.LineTotal != null) {
							sb_tFileOutputDelimited_11.append(
									row15.LineTotal.setScale(6, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						if (row15.rowguid != null) {
							sb_tFileOutputDelimited_11.append(row15.rowguid);
						}
						sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
						if (row15.ModifiedDate != null) {
							sb_tFileOutputDelimited_11
									.append(FormatterUtils.format_Date(row15.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_11.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);

						nb_line_tFileOutputDelimited_11++;
						resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

						outtFileOutputDelimited_11.write(sb_tFileOutputDelimited_11.toString());

						row16 = row15;

						tos_count_tFileOutputDelimited_11++;

						/**
						 * [tFileOutputDelimited_11 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_11";

						/**
						 * [tFileOutputDelimited_11 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row17"
						///////////////////////////////////////////////

						boolean forceLooprow17 = false;

						row17Struct row17ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row17__SalesOrderID = row16.SalesOrderID;
							if (exprKeyValue_row17__SalesOrderID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row17HashKey.SalesOrderID = (int) (Integer) exprKeyValue_row17__SalesOrderID;
							}

							row17HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row17.lookup(row17HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row17' and it contains more one result from keys : row17.SalesOrderID = '" +
							// row17HashKey.SalesOrderID + "'");
						} // G 071

						row17Struct row17 = null;

						row17Struct fromLookup_row17 = null;
						row17 = row17Default;

						if (tHash_Lookup_row17 != null && tHash_Lookup_row17.hasNext()) { // G 099

							fromLookup_row17 = tHash_Lookup_row17.next();

						} // G 099

						if (fromLookup_row17 != null) {
							row17 = fromLookup_row17;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row18"
						///////////////////////////////////////////////

						boolean forceLooprow18 = false;

						row18Struct row18ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row18__ProductID = row16.ProductID;
							if (exprKeyValue_row18__ProductID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row18HashKey.ProductID = (int) (Integer) exprKeyValue_row18__ProductID;
							}

							row18HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row18.lookup(row18HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row18' and it contains more one result from keys : row18.ProductID = '" +
							// row18HashKey.ProductID + "'");
						} // G 071

						row18Struct row18 = null;

						row18Struct fromLookup_row18 = null;
						row18 = row18Default;

						if (tHash_Lookup_row18 != null && tHash_Lookup_row18.hasNext()) { // G 099

							fromLookup_row18 = tHash_Lookup_row18.next();

						} // G 099

						if (fromLookup_row18 != null) {
							row18 = fromLookup_row18;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							SalesProduct = null;

// # Output table : 'SalesProduct'
							SalesProduct_tmp.SalesOrderID = row17.SalesOrderID;
							SalesProduct_tmp.RevisionNumber = row17.RevisionNumber;
							SalesProduct_tmp.OrderDate = row17.OrderDate;
							SalesProduct_tmp.DueDate = row17.DueDate;
							SalesProduct_tmp.ShipDate = row17.ShipDate;
							SalesProduct_tmp.Status = row17.Status;
							SalesProduct_tmp.OnlineOrderFlag = row17.OnlineOrderFlag;
							SalesProduct_tmp.SalesOrderNumber = row17.SalesOrderNumber;
							SalesProduct_tmp.CustomerID = row17.CustomerID;
							SalesProduct_tmp.ShipToAddressID = row17.ShipToAddressID;
							SalesProduct_tmp.BillToAddressID = row17.BillToAddressID;
							SalesProduct_tmp.ShipMethod = row17.ShipMethod;
							SalesProduct_tmp.CreditCardApprovalCode = row17.CreditCardApprovalCode;
							SalesProduct_tmp.SubTotal = row17.SubTotal;
							SalesProduct_tmp.TaxAmt = row17.TaxAmt;
							SalesProduct_tmp.Freight = row17.Freight;
							SalesProduct_tmp.TotalDue = row17.TotalDue;
							SalesProduct_tmp.Comment = row17.Comment;
							SalesProduct_tmp.OrderQty = row16.OrderQty;
							SalesProduct_tmp.UnitPrice = row16.UnitPrice;
							SalesProduct_tmp.UnitPriceDiscount = row16.UnitPriceDiscount;
							SalesProduct_tmp.LineTotal = row16.LineTotal;
							SalesProduct_tmp.ProductName = row18.Name;
							SalesProduct_tmp.ProductColor = row18.Color;
							SalesProduct_tmp.StandardCost = row18.StandardCost;
							SalesProduct = SalesProduct_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "SalesProduct"
						if (SalesProduct != null) {

							/**
							 * [tFileOutputDelimited_12 main ] start
							 */

							currentComponent = "tFileOutputDelimited_12";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "SalesProduct");
							}

							StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();
							sb_tFileOutputDelimited_12.append(SalesProduct.SalesOrderID);
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							sb_tFileOutputDelimited_12.append(SalesProduct.RevisionNumber);
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.OrderDate != null) {
								sb_tFileOutputDelimited_12
										.append(FormatterUtils.format_Date(SalesProduct.OrderDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.DueDate != null) {
								sb_tFileOutputDelimited_12
										.append(FormatterUtils.format_Date(SalesProduct.DueDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.ShipDate != null) {
								sb_tFileOutputDelimited_12
										.append(FormatterUtils.format_Date(SalesProduct.ShipDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							sb_tFileOutputDelimited_12.append(SalesProduct.Status);
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.OnlineOrderFlag != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.OnlineOrderFlag);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.SalesOrderNumber != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.SalesOrderNumber);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							sb_tFileOutputDelimited_12.append(SalesProduct.CustomerID);
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.ShipToAddressID != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.ShipToAddressID);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.BillToAddressID != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.BillToAddressID);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.ShipMethod != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.ShipMethod);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.CreditCardApprovalCode != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.CreditCardApprovalCode);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.SubTotal != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.SubTotal);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.TaxAmt != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.TaxAmt);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.Freight != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.Freight);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.TotalDue != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.TotalDue
										.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.Comment != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.Comment);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							sb_tFileOutputDelimited_12.append(SalesProduct.OrderQty);
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.UnitPrice != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.UnitPrice);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.UnitPriceDiscount != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.UnitPriceDiscount);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.LineTotal != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.LineTotal
										.setScale(6, java.math.RoundingMode.HALF_UP).toPlainString());
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.ProductName != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.ProductName);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.ProductColor != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.ProductColor);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
							if (SalesProduct.StandardCost != null) {
								sb_tFileOutputDelimited_12.append(SalesProduct.StandardCost);
							}
							sb_tFileOutputDelimited_12.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);

							nb_line_tFileOutputDelimited_12++;
							resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

							outtFileOutputDelimited_12.write(sb_tFileOutputDelimited_12.toString());

							tos_count_tFileOutputDelimited_12++;

							/**
							 * [tFileOutputDelimited_12 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_12 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_12";

							/**
							 * [tFileOutputDelimited_12 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_12 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_12";

							/**
							 * [tFileOutputDelimited_12 process_data_end ] stop
							 */

						} // End of branch "SalesProduct"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_11 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_11";

						/**
						 * [tFileOutputDelimited_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 end ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (outtFileOutputDelimited_11 != null) {
					outtFileOutputDelimited_11.flush();
					outtFileOutputDelimited_11.close();
				}

				globalMap.put("tFileOutputDelimited_11_NB_LINE", nb_line_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME", fileName_tFileOutputDelimited_11);

				if (isFileGenerated_tFileOutputDelimited_11 && nb_line_tFileOutputDelimited_11 == 0) {

					filetFileOutputDelimited_11.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_11", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tFileOutputDelimited_11", true);
				end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_11 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 end ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (outtFileOutputDelimited_12 != null) {
					outtFileOutputDelimited_12.flush();
					outtFileOutputDelimited_12.close();
				}

				globalMap.put("tFileOutputDelimited_12_NB_LINE", nb_line_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME", fileName_tFileOutputDelimited_12);

				if (isFileGenerated_tFileOutputDelimited_12 && nb_line_tFileOutputDelimited_12 == 0) {

					filetFileOutputDelimited_12.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_12", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SalesProduct");
				}

				ok_Hash.put("tFileOutputDelimited_12", true);
				end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row17");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row18");

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (resourceMap.get("finish_tFileOutputDelimited_11") == null) {

					java.io.Writer outtFileOutputDelimited_11 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_11");
					if (outtFileOutputDelimited_11 != null) {
						outtFileOutputDelimited_11.flush();
						outtFileOutputDelimited_11.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_11")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_11"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_11")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_11 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (resourceMap.get("finish_tFileOutputDelimited_12") == null) {

					java.io.Writer outtFileOutputDelimited_12 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_12");
					if (outtFileOutputDelimited_12 != null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_12")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_12"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_12")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "sqlfamily";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:kTib0LhgTVymBoPb/6SnCXDX6HTakMqmDTsk/zzGPWl9hnSVgA==");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String port_tDBInput_8 = "1433";
				String dbname_tDBInput_8 = "AdventureWorks";
				String url_tDBInput_8 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_8)) {
					url_tDBInput_8 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_8)) {
					url_tDBInput_8 += "//" + "AdventureWorks";
				}
				url_tDBInput_8 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_8 = "SalesLT";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT SalesLT.Customer.CustomerID,\n		SalesLT.Customer.NameStyle,\n		SalesLT.Customer.Title,\n		SalesLT.Customer.FirstNam"
						+ "e,\n		SalesLT.Customer.MiddleName,\n		SalesLT.Customer.LastName,\n		SalesLT.Customer.Suffix,\n		SalesLT.Customer.CompanyName"
						+ ",\n		SalesLT.Customer.SalesPerson,\n		SalesLT.Customer.EmailAddress,\n		SalesLT.Customer.Phone,\n		SalesLT.Customer.Password"
						+ "Hash,\n		SalesLT.Customer.PasswordSalt,\n		SalesLT.Customer.rowguid,\n		SalesLT.Customer.ModifiedDate\nFROM	SalesLT.Customer"
						+ "";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;
			other.PasswordHash = this.PasswordHash;
			other.PasswordSalt = this.PasswordSalt;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NameStyle = readString(dis, ois);

				this.Title = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.MiddleName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Suffix = readString(dis, ois);

				this.CompanyName = readString(dis, ois);

				this.SalesPerson = readString(dis, ois);

				this.EmailAddress = readString(dis, ois);

				this.Phone = readString(dis, ois);

				this.PasswordHash = readString(dis, ois);

				this.PasswordSalt = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NameStyle, dos, oos);

				writeString(this.Title, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.MiddleName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Suffix, dos, oos);

				writeString(this.CompanyName, dos, oos);

				writeString(this.SalesPerson, dos, oos);

				writeString(this.EmailAddress, dos, oos);

				writeString(this.Phone, dos, oos);

				writeString(this.PasswordHash, dos, oos);

				writeString(this.PasswordSalt, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class HarmonizadoStruct implements routines.system.IPersistableRow<HarmonizadoStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final HarmonizadoStruct other = (HarmonizadoStruct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(HarmonizadoStruct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;
			other.PasswordHash = this.PasswordHash;
			other.PasswordSalt = this.PasswordSalt;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(HarmonizadoStruct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.NameStyle = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.SalesPerson = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

					this.PasswordHash = readString(dis);

					this.PasswordSalt = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.NameStyle, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.PasswordHash, dos);

				// String

				writeString(this.PasswordSalt, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(HarmonizadoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.NameStyle = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.SalesPerson = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

					this.PasswordHash = readString(dis);

					this.PasswordSalt = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.NameStyle, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.PasswordHash, dos);

				// String

				writeString(this.PasswordSalt, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;
			other.PasswordHash = this.PasswordHash;
			other.PasswordSalt = this.PasswordSalt;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.NameStyle = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.SalesPerson = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

					this.PasswordHash = readString(dis);

					this.PasswordSalt = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.NameStyle, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.PasswordHash, dos);

				// String

				writeString(this.PasswordSalt, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;
				HarmonizadoStruct Harmonizado = new HarmonizadoStruct();
				HarmonizadoStruct row13 = Harmonizado;

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tFileOutputDelimited_6 - inputs:(Harmonizado)
				// outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13)
				// outputs:()
				// linked node: tMap_4 - inputs:(row13,row11,row14) outputs:(Customer1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct>getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Harmonizado");
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/ChrunCustomerHarmonized"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "UTF-8"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("CustomerID");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("NameStyle");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Title");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("FirstName");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("MiddleName");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("LastName");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Suffix");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CompanyName");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("SalesPerson");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("EmailAddress");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Phone");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("PasswordHash");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("PasswordSalt");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("rowguid");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("ModifiedDate");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_6", isFileGenerated_tFileOutputDelimited_6);
				resourceMap.put("filetFileOutputDelimited_6", filetFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				HarmonizadoStruct Harmonizado_tmp = new HarmonizadoStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngCustomerRaw" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "UTF-8"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("CustomerID");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("NameStyle");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Title");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("FirstName");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("MiddleName");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("LastName");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Suffix");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CompanyName");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("SalesPerson");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("EmailAddress");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Phone");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("PasswordHash");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("PasswordSalt");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("rowguid");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("ModifiedDate");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_5", isFileGenerated_tFileOutputDelimited_5);
				resourceMap.put("filetFileOutputDelimited_5", filetFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "sqlfamily";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:DPJtR+MfaWTjLi0zU7zilGL3/m8bGeviWWn7UfDPzdpQJ8SKEg==");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String port_tDBInput_9 = "1433";
				String dbname_tDBInput_9 = "AdventureWorks";
				String url_tDBInput_9 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_9)) {
					url_tDBInput_9 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_9)) {
					url_tDBInput_9 += "//" + "AdventureWorks";
				}
				url_tDBInput_9 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_9 = "SalesLT";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT SalesLT.Customer.CustomerID,\n		SalesLT.Customer.NameStyle,\n		SalesLT.Customer.Title,\n		SalesLT.Customer.FirstNam"
						+ "e,\n		SalesLT.Customer.MiddleName,\n		SalesLT.Customer.LastName,\n		SalesLT.Customer.Suffix,\n		SalesLT.Customer.CompanyName"
						+ ",\n		SalesLT.Customer.SalesPerson,\n		SalesLT.Customer.EmailAddress,\n		SalesLT.Customer.Phone,\n		SalesLT.Customer.Password"
						+ "Hash,\n		SalesLT.Customer.PasswordSalt,\n		SalesLT.Customer.rowguid,\n		SalesLT.Customer.ModifiedDate\nFROM	SalesLT.Customer"
						+ "";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row7.CustomerID = 0;
						} else {

							row7.CustomerID = rs_tDBInput_9.getInt(1);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row7.NameStyle = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(2);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.NameStyle = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.NameStyle = tmpContent_tDBInput_9;
								}
							} else {
								row7.NameStyle = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row7.Title = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(3);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.Title = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.Title = tmpContent_tDBInput_9;
								}
							} else {
								row7.Title = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row7.FirstName = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(4);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.FirstName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.FirstName = tmpContent_tDBInput_9;
								}
							} else {
								row7.FirstName = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row7.MiddleName = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(5);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.MiddleName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.MiddleName = tmpContent_tDBInput_9;
								}
							} else {
								row7.MiddleName = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row7.LastName = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(6);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.LastName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.LastName = tmpContent_tDBInput_9;
								}
							} else {
								row7.LastName = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row7.Suffix = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(7);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.Suffix = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.Suffix = tmpContent_tDBInput_9;
								}
							} else {
								row7.Suffix = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row7.CompanyName = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(8);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.CompanyName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.CompanyName = tmpContent_tDBInput_9;
								}
							} else {
								row7.CompanyName = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row7.SalesPerson = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(9);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.SalesPerson = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.SalesPerson = tmpContent_tDBInput_9;
								}
							} else {
								row7.SalesPerson = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 10) {
							row7.EmailAddress = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(10);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.EmailAddress = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.EmailAddress = tmpContent_tDBInput_9;
								}
							} else {
								row7.EmailAddress = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 11) {
							row7.Phone = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(11);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.Phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.Phone = tmpContent_tDBInput_9;
								}
							} else {
								row7.Phone = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 12) {
							row7.PasswordHash = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(12);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PasswordHash = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.PasswordHash = tmpContent_tDBInput_9;
								}
							} else {
								row7.PasswordHash = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 13) {
							row7.PasswordSalt = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(13);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.PasswordSalt = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row7.PasswordSalt = tmpContent_tDBInput_9;
								}
							} else {
								row7.PasswordSalt = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 14) {
							row7.rowguid = null;
						} else {

							row7.rowguid = rs_tDBInput_9.getObject(14);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 15) {
							row7.ModifiedDate = null;
						} else {

							row7.ModifiedDate = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 15);

						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
						sb_tFileOutputDelimited_5.append(row7.CustomerID);
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.NameStyle != null) {
							sb_tFileOutputDelimited_5.append(row7.NameStyle);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.Title != null) {
							sb_tFileOutputDelimited_5.append(row7.Title);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.FirstName != null) {
							sb_tFileOutputDelimited_5.append(row7.FirstName);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.MiddleName != null) {
							sb_tFileOutputDelimited_5.append(row7.MiddleName);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.LastName != null) {
							sb_tFileOutputDelimited_5.append(row7.LastName);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.Suffix != null) {
							sb_tFileOutputDelimited_5.append(row7.Suffix);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.CompanyName != null) {
							sb_tFileOutputDelimited_5.append(row7.CompanyName);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.SalesPerson != null) {
							sb_tFileOutputDelimited_5.append(row7.SalesPerson);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.EmailAddress != null) {
							sb_tFileOutputDelimited_5.append(row7.EmailAddress);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.Phone != null) {
							sb_tFileOutputDelimited_5.append(row7.Phone);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.PasswordHash != null) {
							sb_tFileOutputDelimited_5.append(row7.PasswordHash);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.PasswordSalt != null) {
							sb_tFileOutputDelimited_5.append(row7.PasswordSalt);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.rowguid != null) {
							sb_tFileOutputDelimited_5.append(row7.rowguid);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.ModifiedDate != null) {
							sb_tFileOutputDelimited_5
									.append(FormatterUtils.format_Date(row7.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

						nb_line_tFileOutputDelimited_5++;
						resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

						outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

						row8 = row7;

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							Harmonizado = null;

// # Output table : 'Harmonizado'
							Harmonizado_tmp.CustomerID = row8.CustomerID;
							Harmonizado_tmp.NameStyle = row8.NameStyle;
							Harmonizado_tmp.Title = row8.Title == null ? "Mr."
									: "" + row8.Title.replace("Sr.", "Mr.").replace("Sra.", "Ms.");
							Harmonizado_tmp.FirstName = row8.FirstName;
							Harmonizado_tmp.MiddleName = StringHandling.LEFT(row8.MiddleName, 1);
							Harmonizado_tmp.LastName = row8.LastName;
							Harmonizado_tmp.Suffix = row8.Suffix;
							Harmonizado_tmp.CompanyName = row8.CompanyName;
							Harmonizado_tmp.SalesPerson = row8.SalesPerson.replace("adventure-works\\", "");
							Harmonizado_tmp.EmailAddress = row8.EmailAddress;
							Harmonizado_tmp.Phone = row8.Phone.replace("1 (11) ", "");
							Harmonizado_tmp.PasswordHash = row8.PasswordHash;
							Harmonizado_tmp.PasswordSalt = row8.PasswordSalt;
							Harmonizado_tmp.rowguid = row8.rowguid;
							Harmonizado_tmp.ModifiedDate = row8.ModifiedDate;
							Harmonizado = Harmonizado_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "Harmonizado"
						if (Harmonizado != null) {

							/**
							 * [tFileOutputDelimited_6 main ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "Harmonizado");
							}

							StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
							sb_tFileOutputDelimited_6.append(Harmonizado.CustomerID);
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.NameStyle != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.NameStyle);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.Title != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.Title);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.FirstName != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.FirstName);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.MiddleName != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.MiddleName);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.LastName != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.LastName);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.Suffix != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.Suffix);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.CompanyName != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.CompanyName);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.SalesPerson != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.SalesPerson);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.EmailAddress != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.EmailAddress);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.Phone != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.Phone);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.PasswordHash != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.PasswordHash);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.PasswordSalt != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.PasswordSalt);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.rowguid != null) {
								sb_tFileOutputDelimited_6.append(Harmonizado.rowguid);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (Harmonizado.ModifiedDate != null) {
								sb_tFileOutputDelimited_6
										.append(FormatterUtils.format_Date(Harmonizado.ModifiedDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

							outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

							row13 = Harmonizado;

							tos_count_tFileOutputDelimited_6++;

							/**
							 * [tFileOutputDelimited_6 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_6 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							/**
							 * [tFileOutputDelimited_6 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row13 main ] start
							 */

							currentComponent = "tAdvancedHash_row13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
							}

							row13Struct row13_HashRow = new row13Struct();

							row13_HashRow.CustomerID = row13.CustomerID;

							row13_HashRow.NameStyle = row13.NameStyle;

							row13_HashRow.Title = row13.Title;

							row13_HashRow.FirstName = row13.FirstName;

							row13_HashRow.MiddleName = row13.MiddleName;

							row13_HashRow.LastName = row13.LastName;

							row13_HashRow.Suffix = row13.Suffix;

							row13_HashRow.CompanyName = row13.CompanyName;

							row13_HashRow.SalesPerson = row13.SalesPerson;

							row13_HashRow.EmailAddress = row13.EmailAddress;

							row13_HashRow.Phone = row13.Phone;

							row13_HashRow.PasswordHash = row13.PasswordHash;

							row13_HashRow.PasswordSalt = row13.PasswordSalt;

							row13_HashRow.rowguid = row13.rowguid;

							row13_HashRow.ModifiedDate = row13.ModifiedDate;

							tHash_Lookup_row13.put(row13_HashRow);

							tos_count_tAdvancedHash_row13++;

							/**
							 * [tAdvancedHash_row13 main ] stop
							 */

							/**
							 * [tAdvancedHash_row13 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row13";

							/**
							 * [tAdvancedHash_row13 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row13 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row13";

							/**
							 * [tAdvancedHash_row13 process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_6 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							/**
							 * [tFileOutputDelimited_6 process_data_end ] stop
							 */

						} // End of branch "Harmonizado"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				if (isFileGenerated_tFileOutputDelimited_5 && nb_line_tFileOutputDelimited_5 == 0) {

					filetFileOutputDelimited_5.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				if (isFileGenerated_tFileOutputDelimited_6 && nb_line_tFileOutputDelimited_6 == 0) {

					filetFileOutputDelimited_6.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Harmonizado");
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_5")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_5"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_5")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_6")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_6"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_6")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_10 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10);
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = "sqlfamily";

				final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:eYft9QWoCbNJ7C1b3XPp4Mtbkv6qmTMibaEBqNETJb2+cGr8uw==");

				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;

				String port_tDBInput_10 = "1433";
				String dbname_tDBInput_10 = "AdventureWorks";
				String url_tDBInput_10 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_10)) {
					url_tDBInput_10 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_10)) {
					url_tDBInput_10 += "//" + "AdventureWorks";
				}
				url_tDBInput_10 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_10 = "SalesLT";

				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10, dbUser_tDBInput_10,
						dbPwd_tDBInput_10);

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

				String dbquery_tDBInput_10 = "SELECT SalesLT.CustomerAddress.CustomerID,\n		SalesLT.CustomerAddress.AddressID,\n		SalesLT.CustomerAddress.rowguid,\n		Sa"
						+ "lesLT.CustomerAddress.ModifiedDate\nFROM	SalesLT.CustomerAddress";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
					if (conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {

						conn_tDBInput_10.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public static class Customer1Struct implements routines.system.IPersistableRow<Customer1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

					this.AddressLine1 = readString(dis);

					this.City = readString(dis);

					this.StateProvince = readString(dis);

					this.CountryRegion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.StateProvince, dos);

				// String

				writeString(this.CountryRegion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Customer1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.AddressID = dis.readInt();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.AddressID);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",AddressID=" + String.valueOf(AddressID));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.CustomerID = this.CustomerID;
			other.AddressID = this.AddressID;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.CustomerID = this.CustomerID;
			other.AddressID = this.AddressID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.AddressID = dis.readInt();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.AddressID);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",AddressID=" + String.valueOf(AddressID));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_11Struct implements routines.system.IPersistableRow<after_tDBInput_11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_11Struct other = (after_tDBInput_11Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_11Struct other) {

			other.CustomerID = this.CustomerID;
			other.AddressID = this.AddressID;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_11Struct other) {

			other.CustomerID = this.CustomerID;
			other.AddressID = this.AddressID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.AddressID = dis.readInt();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.AddressID);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",AddressID=" + String.valueOf(AddressID));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_9Process(globalMap);
				tDBInput_12Process(globalMap);

				row9Struct row9 = new row9Struct();
				row9Struct row11 = row9;
				Customer1Struct Customer1 = new Customer1Struct();

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Customer1");
				}

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/ChrunCustomerCurated"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
								fileName_tFileOutputDelimited_10.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
							fileName_tFileOutputDelimited_10.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
								fileName_tFileOutputDelimited_10.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME", fileName_tFileOutputDelimited_10);
				int nb_line_tFileOutputDelimited_10 = 0;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				final String OUT_DELIM_tFileOutputDelimited_10 = /**
																	 * Start field
																	 * tFileOutputDelimited_10:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /**
																		 * Start field
																		 * tFileOutputDelimited_10:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {
						dir_tFileOutputDelimited_10.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_10 = null;

				java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
				if (fileToDelete_tFileOutputDelimited_10.exists()) {
					fileToDelete_tFileOutputDelimited_10.delete();
				}
				outtFileOutputDelimited_10 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_10, false), "UTF-8"));
				if (filetFileOutputDelimited_10.length() == 0) {
					outtFileOutputDelimited_10.write("Title");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("FirstName");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("MiddleName");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("LastName");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("Suffix");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("CompanyName");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("EmailAddress");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("Phone");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("AddressLine1");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("City");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("StateProvince");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("CountryRegion");
					outtFileOutputDelimited_10.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_10", outtFileOutputDelimited_10);
				resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_10", isFileGenerated_tFileOutputDelimited_10);
				resourceMap.put("filetFileOutputDelimited_10", filetFileOutputDelimited_10);

				/**
				 * [tFileOutputDelimited_10 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Customer1Struct Customer1_tmp = new Customer1Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngCustomerAddressRaw"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
							fileName_tFileOutputDelimited_7.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
																		 * Start field
																		 * tFileOutputDelimited_7:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "UTF-8"));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("CustomerID");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("AddressID");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("rowguid");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("ModifiedDate");
					outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_7", isFileGenerated_tFileOutputDelimited_7);
				resourceMap.put("filetFileOutputDelimited_7", filetFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tDBInput_11 begin ] start
				 */

				ok_Hash.put("tDBInput_11", false);
				start_Hash.put("tDBInput_11", System.currentTimeMillis());

				currentComponent = "tDBInput_11";

				int tos_count_tDBInput_11 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_11 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11);
				int nb_line_tDBInput_11 = 0;
				java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
				String dbUser_tDBInput_11 = "sqlfamily";

				final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:NGBgd4dlmZHPs0Coh6Zgej68fG8B5VEkF6hgLbSkwShZJC1Muw==");

				String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;

				String port_tDBInput_11 = "1433";
				String dbname_tDBInput_11 = "AdventureWorks";
				String url_tDBInput_11 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_11)) {
					url_tDBInput_11 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_11)) {
					url_tDBInput_11 += "//" + "AdventureWorks";
				}
				url_tDBInput_11 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_11 = "SalesLT";

				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11, dbUser_tDBInput_11,
						dbPwd_tDBInput_11);

				java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

				String dbquery_tDBInput_11 = "SELECT SalesLT.CustomerAddress.CustomerID,\n		SalesLT.CustomerAddress.AddressID,\n		SalesLT.CustomerAddress.rowguid,\n		Sa"
						+ "lesLT.CustomerAddress.ModifiedDate\nFROM	SalesLT.CustomerAddress";

				globalMap.put("tDBInput_11_QUERY", dbquery_tDBInput_11);
				java.sql.ResultSet rs_tDBInput_11 = null;

				try {
					rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
					java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
					int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

					String tmpContent_tDBInput_11 = null;

					while (rs_tDBInput_11.next()) {
						nb_line_tDBInput_11++;

						if (colQtyInRs_tDBInput_11 < 1) {
							row9.CustomerID = 0;
						} else {

							row9.CustomerID = rs_tDBInput_11.getInt(1);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 2) {
							row9.AddressID = 0;
						} else {

							row9.AddressID = rs_tDBInput_11.getInt(2);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 3) {
							row9.rowguid = null;
						} else {

							row9.rowguid = rs_tDBInput_11.getObject(3);
							if (rs_tDBInput_11.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_11 < 4) {
							row9.ModifiedDate = null;
						} else {

							row9.ModifiedDate = mssqlGTU_tDBInput_11.getDate(rsmd_tDBInput_11, rs_tDBInput_11, 4);

						}

						/**
						 * [tDBInput_11 begin ] stop
						 */

						/**
						 * [tDBInput_11 main ] start
						 */

						currentComponent = "tDBInput_11";

						tos_count_tDBInput_11++;

						/**
						 * [tDBInput_11 main ] stop
						 */

						/**
						 * [tDBInput_11 process_data_begin ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
						}

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
						sb_tFileOutputDelimited_7.append(row9.CustomerID);
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						sb_tFileOutputDelimited_7.append(row9.AddressID);
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row9.rowguid != null) {
							sb_tFileOutputDelimited_7.append(row9.rowguid);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row9.ModifiedDate != null) {
							sb_tFileOutputDelimited_7
									.append(FormatterUtils.format_Date(row9.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						nb_line_tFileOutputDelimited_7++;
						resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

						row11 = row9;

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row13"
						///////////////////////////////////////////////

						boolean forceLooprow13 = false;

						row13Struct row13ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							Object exprKeyValue_row13__CustomerID = row11.CustomerID;
							if (exprKeyValue_row13__CustomerID == null) {
								hasCasePrimitiveKeyWithNull_tMap_4 = true;
							} else {
								row13HashKey.CustomerID = (int) (Integer) exprKeyValue_row13__CustomerID;
							}

							row13HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

								tHash_Lookup_row13.lookup(row13HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row13' and it contains more one result from keys : row13.CustomerID = '" +
							// row13HashKey.CustomerID + "'");
						} // G 071

						row13Struct row13 = null;

						row13Struct fromLookup_row13 = null;
						row13 = row13Default;

						if (tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) { // G 099

							fromLookup_row13 = tHash_Lookup_row13.next();

						} // G 099

						if (fromLookup_row13 != null) {
							row13 = fromLookup_row13;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row14"
						///////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							Object exprKeyValue_row14__AddressID = row11.AddressID;
							if (exprKeyValue_row14__AddressID == null) {
								hasCasePrimitiveKeyWithNull_tMap_4 = true;
							} else {
								row14HashKey.AddressID = (int) (Integer) exprKeyValue_row14__AddressID;
							}

							row14HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

								tHash_Lookup_row14.lookup(row14HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row14' and it contains more one result from keys : row14.AddressID = '" +
							// row14HashKey.AddressID + "'");
						} // G 071

						row14Struct row14 = null;

						row14Struct fromLookup_row14 = null;
						row14 = row14Default;

						if (tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) { // G 099

							fromLookup_row14 = tHash_Lookup_row14.next();

						} // G 099

						if (fromLookup_row14 != null) {
							row14 = fromLookup_row14;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							Customer1 = null;

// # Output table : 'Customer1'
							Customer1_tmp.Title = row13.Title;
							Customer1_tmp.FirstName = row13.FirstName;
							Customer1_tmp.MiddleName = row13.MiddleName;
							Customer1_tmp.LastName = row13.LastName;
							Customer1_tmp.Suffix = row13.Suffix;
							Customer1_tmp.CompanyName = row13.CompanyName;
							Customer1_tmp.EmailAddress = row13.EmailAddress;
							Customer1_tmp.Phone = row13.Phone;
							Customer1_tmp.AddressLine1 = row14.AddressLine1;
							Customer1_tmp.City = row14.City;
							Customer1_tmp.StateProvince = row14.StateProvince;
							Customer1_tmp.CountryRegion = row14.CountryRegion;
							Customer1 = Customer1_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "Customer1"
						if (Customer1 != null) {

							/**
							 * [tFileOutputDelimited_10 main ] start
							 */

							currentComponent = "tFileOutputDelimited_10";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "Customer1");
							}

							StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();
							if (Customer1.Title != null) {
								sb_tFileOutputDelimited_10.append(Customer1.Title);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.FirstName != null) {
								sb_tFileOutputDelimited_10.append(Customer1.FirstName);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.MiddleName != null) {
								sb_tFileOutputDelimited_10.append(Customer1.MiddleName);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.LastName != null) {
								sb_tFileOutputDelimited_10.append(Customer1.LastName);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.Suffix != null) {
								sb_tFileOutputDelimited_10.append(Customer1.Suffix);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.CompanyName != null) {
								sb_tFileOutputDelimited_10.append(Customer1.CompanyName);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.EmailAddress != null) {
								sb_tFileOutputDelimited_10.append(Customer1.EmailAddress);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.Phone != null) {
								sb_tFileOutputDelimited_10.append(Customer1.Phone);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.AddressLine1 != null) {
								sb_tFileOutputDelimited_10.append(Customer1.AddressLine1);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.City != null) {
								sb_tFileOutputDelimited_10.append(Customer1.City);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.StateProvince != null) {
								sb_tFileOutputDelimited_10.append(Customer1.StateProvince);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
							if (Customer1.CountryRegion != null) {
								sb_tFileOutputDelimited_10.append(Customer1.CountryRegion);
							}
							sb_tFileOutputDelimited_10.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);

							nb_line_tFileOutputDelimited_10++;
							resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

							outtFileOutputDelimited_10.write(sb_tFileOutputDelimited_10.toString());

							tos_count_tFileOutputDelimited_10++;

							/**
							 * [tFileOutputDelimited_10 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_10 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_10";

							/**
							 * [tFileOutputDelimited_10 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_10 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_10";

							/**
							 * [tFileOutputDelimited_10 process_data_end ] stop
							 */

						} // End of branch "Customer1"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 process_data_end ] start
						 */

						currentComponent = "tDBInput_11";

						/**
						 * [tDBInput_11 process_data_end ] stop
						 */

						/**
						 * [tDBInput_11 end ] start
						 */

						currentComponent = "tDBInput_11";

					}
				} finally {
					if (rs_tDBInput_11 != null) {
						rs_tDBInput_11.close();
					}
					if (stmt_tDBInput_11 != null) {
						stmt_tDBInput_11.close();
					}
					if (conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {

						conn_tDBInput_11.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_11_NB_LINE", nb_line_tDBInput_11);

				ok_Hash.put("tDBInput_11", true);
				end_Hash.put("tDBInput_11", System.currentTimeMillis());

				/**
				 * [tDBInput_11 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE", nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);

				if (isFileGenerated_tFileOutputDelimited_7 && nb_line_tFileOutputDelimited_7 == 0) {

					filetFileOutputDelimited_7.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 end ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (outtFileOutputDelimited_10 != null) {
					outtFileOutputDelimited_10.flush();
					outtFileOutputDelimited_10.close();
				}

				globalMap.put("tFileOutputDelimited_10_NB_LINE", nb_line_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME", fileName_tFileOutputDelimited_10);

				if (isFileGenerated_tFileOutputDelimited_10 && nb_line_tFileOutputDelimited_10 == 0) {

					filetFileOutputDelimited_10.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_10", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Customer1");
				}

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row13");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row14");

			try {

				/**
				 * [tDBInput_11 finally ] start
				 */

				currentComponent = "tDBInput_11";

				/**
				 * [tDBInput_11 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_7")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_7"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_7")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (resourceMap.get("finish_tFileOutputDelimited_10") == null) {

					java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_10");
					if (outtFileOutputDelimited_10 != null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_10")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_10"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_10")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.AddressID = this.AddressID;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.City = this.City;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.PostalCode = this.PostalCode;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.AddressID = this.AddressID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.AddressLine2 = readString(dis, ois);

				this.City = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.PostalCode = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.AddressLine2, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.PostalCode, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

					this.AddressLine1 = readString(dis);

					this.AddressLine2 = readString(dis);

					this.City = readString(dis);

					this.StateProvince = readString(dis);

					this.CountryRegion = readString(dis);

					this.PostalCode = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.AddressLine2, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.StateProvince, dos);

				// String

				writeString(this.CountryRegion, dos);

				// String

				writeString(this.PostalCode, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row10Struct row14 = row10;

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileOutputDelimited_8 - inputs:(row10) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_4 - inputs:(row13,row11,row14) outputs:(Customer1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct>getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngAddressRaw" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
							fileName_tFileOutputDelimited_8.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);
				int nb_line_tFileOutputDelimited_8 = 0;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
																		 * Start field
																		 * tFileOutputDelimited_8:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				if (fileToDelete_tFileOutputDelimited_8.exists()) {
					fileToDelete_tFileOutputDelimited_8.delete();
				}
				outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false), "UTF-8"));
				if (filetFileOutputDelimited_8.length() == 0) {
					outtFileOutputDelimited_8.write("AddressID");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("AddressLine1");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("AddressLine2");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("City");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("StateProvince");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CountryRegion");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("PostalCode");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("rowguid");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("ModifiedDate");
					outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
				resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_8", isFileGenerated_tFileOutputDelimited_8);
				resourceMap.put("filetFileOutputDelimited_8", filetFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_12 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_12 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_12 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_12, talendToDBArray_tDBInput_12);
				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = "sqlfamily";

				final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:CONgFAXhQQroIxbqtCAEzl7KmYDHEFicfDPE3jZnmYLxFuTp9g==");

				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;

				String port_tDBInput_12 = "1433";
				String dbname_tDBInput_12 = "AdventureWorks";
				String url_tDBInput_12 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_12)) {
					url_tDBInput_12 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_12)) {
					url_tDBInput_12 += "//" + "AdventureWorks";
				}
				url_tDBInput_12 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_12 = "SalesLT";

				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12, dbUser_tDBInput_12,
						dbPwd_tDBInput_12);

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

				String dbquery_tDBInput_12 = "SELECT SalesLT.Address.AddressID,\n		SalesLT.Address.AddressLine1,\n		SalesLT.Address.AddressLine2,\n		SalesLT.Address.Cit"
						+ "y,\n		SalesLT.Address.StateProvince,\n		SalesLT.Address.CountryRegion,\n		SalesLT.Address.PostalCode,\n		SalesLT.Address.row"
						+ "guid,\n		SalesLT.Address.ModifiedDate\nFROM	SalesLT.Address";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row10.AddressID = 0;
						} else {

							row10.AddressID = rs_tDBInput_12.getInt(1);
							if (rs_tDBInput_12.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 2) {
							row10.AddressLine1 = null;
						} else {

							tmpContent_tDBInput_12 = rs_tDBInput_12.getString(2);
							if (tmpContent_tDBInput_12 != null) {
								if (talendToDBList_tDBInput_12.contains(
										rsmd_tDBInput_12.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.AddressLine1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
								} else {
									row10.AddressLine1 = tmpContent_tDBInput_12;
								}
							} else {
								row10.AddressLine1 = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 3) {
							row10.AddressLine2 = null;
						} else {

							tmpContent_tDBInput_12 = rs_tDBInput_12.getString(3);
							if (tmpContent_tDBInput_12 != null) {
								if (talendToDBList_tDBInput_12.contains(
										rsmd_tDBInput_12.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.AddressLine2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
								} else {
									row10.AddressLine2 = tmpContent_tDBInput_12;
								}
							} else {
								row10.AddressLine2 = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 4) {
							row10.City = null;
						} else {

							tmpContent_tDBInput_12 = rs_tDBInput_12.getString(4);
							if (tmpContent_tDBInput_12 != null) {
								if (talendToDBList_tDBInput_12.contains(
										rsmd_tDBInput_12.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.City = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
								} else {
									row10.City = tmpContent_tDBInput_12;
								}
							} else {
								row10.City = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 5) {
							row10.StateProvince = null;
						} else {

							tmpContent_tDBInput_12 = rs_tDBInput_12.getString(5);
							if (tmpContent_tDBInput_12 != null) {
								if (talendToDBList_tDBInput_12.contains(
										rsmd_tDBInput_12.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.StateProvince = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
								} else {
									row10.StateProvince = tmpContent_tDBInput_12;
								}
							} else {
								row10.StateProvince = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 6) {
							row10.CountryRegion = null;
						} else {

							net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_12 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_12
									.getClob(6);
							if (clob_tDBInput_12 != null) {
								net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_12 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(
										clob_tDBInput_12);
								tmpContent_tDBInput_12 = tNTextImpl_tDBInput_12.getValue();
							} else {
								tmpContent_tDBInput_12 = null;
							}
							if (tmpContent_tDBInput_12 != null) {
								if (talendToDBList_tDBInput_12.contains(
										rsmd_tDBInput_12.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.CountryRegion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
								} else {
									row10.CountryRegion = tmpContent_tDBInput_12;
								}
							} else {
								row10.CountryRegion = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 7) {
							row10.PostalCode = null;
						} else {

							tmpContent_tDBInput_12 = rs_tDBInput_12.getString(7);
							if (tmpContent_tDBInput_12 != null) {
								if (talendToDBList_tDBInput_12.contains(
										rsmd_tDBInput_12.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
								} else {
									row10.PostalCode = tmpContent_tDBInput_12;
								}
							} else {
								row10.PostalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 8) {
							row10.rowguid = null;
						} else {

							row10.rowguid = rs_tDBInput_12.getObject(8);
							if (rs_tDBInput_12.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 9) {
							row10.ModifiedDate = null;
						} else {

							row10.ModifiedDate = mssqlGTU_tDBInput_12.getDate(rsmd_tDBInput_12, rs_tDBInput_12, 9);

						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 main ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
						}

						StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
						sb_tFileOutputDelimited_8.append(row10.AddressID);
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.AddressLine1 != null) {
							sb_tFileOutputDelimited_8.append(row10.AddressLine1);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.AddressLine2 != null) {
							sb_tFileOutputDelimited_8.append(row10.AddressLine2);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.City != null) {
							sb_tFileOutputDelimited_8.append(row10.City);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.StateProvince != null) {
							sb_tFileOutputDelimited_8.append(row10.StateProvince);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.CountryRegion != null) {
							sb_tFileOutputDelimited_8.append(row10.CountryRegion);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.PostalCode != null) {
							sb_tFileOutputDelimited_8.append(row10.PostalCode);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.rowguid != null) {
							sb_tFileOutputDelimited_8.append(row10.rowguid);
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
						if (row10.ModifiedDate != null) {
							sb_tFileOutputDelimited_8
									.append(FormatterUtils.format_Date(row10.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

						nb_line_tFileOutputDelimited_8++;
						resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

						outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());

						row14 = row10;

						tos_count_tFileOutputDelimited_8++;

						/**
						 * [tFileOutputDelimited_8 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						/**
						 * [tFileOutputDelimited_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row14 main ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
						}

						row14Struct row14_HashRow = new row14Struct();

						row14_HashRow.AddressID = row14.AddressID;

						row14_HashRow.AddressLine1 = row14.AddressLine1;

						row14_HashRow.AddressLine2 = row14.AddressLine2;

						row14_HashRow.City = row14.City;

						row14_HashRow.StateProvince = row14.StateProvince;

						row14_HashRow.CountryRegion = row14.CountryRegion;

						row14_HashRow.PostalCode = row14.PostalCode;

						row14_HashRow.rowguid = row14.rowguid;

						row14_HashRow.ModifiedDate = row14.ModifiedDate;

						tHash_Lookup_row14.put(row14_HashRow);

						tos_count_tAdvancedHash_row14++;

						/**
						 * [tAdvancedHash_row14 main ] stop
						 */

						/**
						 * [tAdvancedHash_row14 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						/**
						 * [tAdvancedHash_row14 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row14 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						/**
						 * [tAdvancedHash_row14 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						/**
						 * [tFileOutputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					if (rs_tDBInput_12 != null) {
						rs_tDBInput_12.close();
					}
					if (stmt_tDBInput_12 != null) {
						stmt_tDBInput_12.close();
					}
					if (conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {

						conn_tDBInput_12.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE", nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);

				if (isFileGenerated_tFileOutputDelimited_8 && nb_line_tFileOutputDelimited_8 == 0) {

					filetFileOutputDelimited_8.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_8")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_8"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_8")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public Object ThumbNailPhoto;

		public Object getThumbNailPhoto() {
			return this.ThumbNailPhoto;
		}

		public String ThumbnailPhotoFileName;

		public String getThumbnailPhotoFileName() {
			return this.ThumbnailPhotoFileName;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.Color = this.Color;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.Size = this.Size;
			other.Weight = this.Weight;
			other.ProductCategoryID = this.ProductCategoryID;
			other.ProductModelID = this.ProductModelID;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.ThumbNailPhoto = this.ThumbNailPhoto;
			other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.ProductNumber = readString(dis, ois);

				this.Color = readString(dis, ois);

				this.StandardCost = (Object) ois.readObject();

				this.ListPrice = (Object) ois.readObject();

				this.Size = readString(dis, ois);

				this.Weight = (BigDecimal) ois.readObject();

				this.ProductCategoryID = readInteger(dis, ois);

				this.ProductModelID = readInteger(dis, ois);

				this.SellStartDate = readDate(dis, ois);

				this.SellEndDate = readDate(dis, ois);

				this.DiscontinuedDate = readDate(dis, ois);

				this.ThumbNailPhoto = (Object) ois.readObject();

				this.ThumbnailPhotoFileName = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.ProductNumber, dos, oos);

				writeString(this.Color, dos, oos);

				oos.writeObject(this.StandardCost);

				oos.writeObject(this.ListPrice);

				writeString(this.Size, dos, oos);

				oos.writeObject(this.Weight);

				writeInteger(this.ProductCategoryID, dos, oos);

				writeInteger(this.ProductModelID, dos, oos);

				writeDate(this.SellStartDate, dos, oos);

				writeDate(this.SellEndDate, dos, oos);

				writeDate(this.DiscontinuedDate, dos, oos);

				oos.writeObject(this.ThumbNailPhoto);

				writeString(this.ThumbnailPhotoFileName, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",ThumbNailPhoto=" + String.valueOf(ThumbNailPhoto));
			sb.append(",ThumbnailPhotoFileName=" + ThumbnailPhotoFileName);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tFileInputDelimited_1 - inputs:(after_tDBInput_6)
				// outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18)
				// outputs:()
				// linked node: tMap_3 - inputs:(row17,row16,row18) outputs:(SalesProduct)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct>getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngProduct"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngProduct"
										+ TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"UTF-8", ";", "\n", true, 0, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row18 = null;

						row18 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row18 = new row18Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.ProductID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductID", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'ProductID' in 'row18' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row18.Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row18.ProductNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row18.Color = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row18.StandardCost = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row18.ListPrice = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row18.Size = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.Weight = ParserUtils.parseTo_BigDecimal(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Weight", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.Weight = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.ProductCategoryID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductCategoryID", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.ProductCategoryID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.ProductModelID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ProductModelID", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.ProductModelID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.SellStartDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SellStartDate", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.SellStartDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.SellEndDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SellEndDate", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.SellEndDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.DiscontinuedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DiscontinuedDate", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.DiscontinuedDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row18.ThumbNailPhoto = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row18.ThumbnailPhotoFileName = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row18.rowguid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row18.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ModifiedDate", "row18", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row18.ModifiedDate = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row18 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tAdvancedHash_row18 main ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
							}

							row18Struct row18_HashRow = new row18Struct();

							row18_HashRow.ProductID = row18.ProductID;

							row18_HashRow.Name = row18.Name;

							row18_HashRow.ProductNumber = row18.ProductNumber;

							row18_HashRow.Color = row18.Color;

							row18_HashRow.StandardCost = row18.StandardCost;

							row18_HashRow.ListPrice = row18.ListPrice;

							row18_HashRow.Size = row18.Size;

							row18_HashRow.Weight = row18.Weight;

							row18_HashRow.ProductCategoryID = row18.ProductCategoryID;

							row18_HashRow.ProductModelID = row18.ProductModelID;

							row18_HashRow.SellStartDate = row18.SellStartDate;

							row18_HashRow.SellEndDate = row18.SellEndDate;

							row18_HashRow.DiscontinuedDate = row18.DiscontinuedDate;

							row18_HashRow.ThumbNailPhoto = row18.ThumbNailPhoto;

							row18_HashRow.ThumbnailPhotoFileName = row18.ThumbnailPhotoFileName;

							row18_HashRow.rowguid = row18.rowguid;

							row18_HashRow.ModifiedDate = row18.ModifiedDate;

							tHash_Lookup_row18.put(row18_HashRow);

							tos_count_tAdvancedHash_row18++;

							/**
							 * [tAdvancedHash_row18 main ] stop
							 */

							/**
							 * [tAdvancedHash_row18 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							/**
							 * [tAdvancedHash_row18 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row18 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							/**
							 * [tAdvancedHash_row18 process_data_end ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("D:/Projetos/12ABDGrupo2DataOPS/DL/raw/ChrunIngProduct"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesPerson = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SalesPerson, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesPerson=" + SalesPerson);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SalesPersonStruct implements routines.system.IPersistableRow<SalesPersonStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.SalesPerson = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SalesPerson, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesPerson=" + SalesPerson);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalesPersonStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoCienciaDados, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoCienciaDados) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.NameStyle = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.SalesPerson = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

					this.PasswordHash = readString(dis);

					this.PasswordSalt = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.NameStyle, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.PasswordHash, dos);

				// String

				writeString(this.PasswordSalt, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				SalesPersonStruct SalesPerson = new SalesPersonStruct();
				row20Struct row20 = new row20Struct();

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/ChrunSalesPerson" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
								fileName_tFileOutputDelimited_13.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
							fileName_tFileOutputDelimited_13.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
								fileName_tFileOutputDelimited_13.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME", fileName_tFileOutputDelimited_13);
				int nb_line_tFileOutputDelimited_13 = 0;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				final String OUT_DELIM_tFileOutputDelimited_13 = /**
																	 * Start field
																	 * tFileOutputDelimited_13:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_13:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_13 = /**
																		 * Start field
																		 * tFileOutputDelimited_13:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_13:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {
						dir_tFileOutputDelimited_13.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_13 = null;

				java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
				if (fileToDelete_tFileOutputDelimited_13.exists()) {
					fileToDelete_tFileOutputDelimited_13.delete();
				}
				outtFileOutputDelimited_13 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_13, false), "UTF-8"));
				if (filetFileOutputDelimited_13.length() == 0) {
					outtFileOutputDelimited_13.write("SalesPerson");
					outtFileOutputDelimited_13.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_13", outtFileOutputDelimited_13);
				resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_13", isFileGenerated_tFileOutputDelimited_13);
				resourceMap.put("filetFileOutputDelimited_13", filetFileOutputDelimited_13);

				/**
				 * [tFileOutputDelimited_13 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SalesPerson");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String SalesPerson;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.SalesPerson == null) ? 0 : this.SalesPerson.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.SalesPerson == null) {
							if (other.SalesPerson != null)
								return false;

						} else if (!this.SalesPerson.equals(other.SalesPerson))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalesPersonStruct SalesPerson_tmp = new SalesPersonStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/ChrunCustomerHarmonized"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/ChrunCustomerHarmonized"
										+ TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"UTF-8", ";", "\n", true, 0, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row19 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row19 = new row19Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row19.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "row19", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'row19' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row19.NameStyle = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row19.Title = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row19.FirstName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row19.MiddleName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row19.LastName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row19.Suffix = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row19.CompanyName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row19.SalesPerson = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row19.EmailAddress = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row19.Phone = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row19.PasswordHash = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row19.PasswordSalt = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row19.rowguid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row19.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ModifiedDate", "row19", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row19.ModifiedDate = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row19 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								SalesPerson = null;

// # Output table : 'SalesPerson'
								SalesPerson_tmp.SalesPerson = row19.SalesPerson;
								SalesPerson = SalesPerson_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "SalesPerson"
							if (SalesPerson != null) {

								/**
								 * [tUniqRow_1 main ] start
								 */

								currentComponent = "tUniqRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "SalesPerson");
								}

								row20 = null;
								if (SalesPerson.SalesPerson == null) {
									finder_tUniqRow_1.SalesPerson = null;
								} else {
									finder_tUniqRow_1.SalesPerson = SalesPerson.SalesPerson.toLowerCase();
								}
								finder_tUniqRow_1.hashCodeDirty = true;
								if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
									KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

									if (SalesPerson.SalesPerson == null) {
										new_tUniqRow_1.SalesPerson = null;
									} else {
										new_tUniqRow_1.SalesPerson = SalesPerson.SalesPerson.toLowerCase();
									}

									keystUniqRow_1.add(new_tUniqRow_1);
									if (row20 == null) {

										row20 = new row20Struct();
									}
									row20.SalesPerson = SalesPerson.SalesPerson;
									nb_uniques_tUniqRow_1++;
								} else {
									nb_duplicates_tUniqRow_1++;
								}

								tos_count_tUniqRow_1++;

								/**
								 * [tUniqRow_1 main ] stop
								 */

								/**
								 * [tUniqRow_1 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_begin ] stop
								 */
// Start of branch "row20"
								if (row20 != null) {

									/**
									 * [tFileOutputDelimited_13 main ] start
									 */

									currentComponent = "tFileOutputDelimited_13";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row20");
									}

									StringBuilder sb_tFileOutputDelimited_13 = new StringBuilder();
									if (row20.SalesPerson != null) {
										sb_tFileOutputDelimited_13.append(row20.SalesPerson);
									}
									sb_tFileOutputDelimited_13.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);

									nb_line_tFileOutputDelimited_13++;
									resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

									outtFileOutputDelimited_13.write(sb_tFileOutputDelimited_13.toString());

									tos_count_tFileOutputDelimited_13++;

									/**
									 * [tFileOutputDelimited_13 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_13 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_13";

									/**
									 * [tFileOutputDelimited_13 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_13 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_13";

									/**
									 * [tFileOutputDelimited_13 process_data_end ] stop
									 */

								} // End of branch "row20"

								/**
								 * [tUniqRow_1 process_data_end ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_end ] stop
								 */

							} // End of branch "SalesPerson"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row19"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/ChrunCustomerHarmonized"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SalesPerson");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 end ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (outtFileOutputDelimited_13 != null) {
					outtFileOutputDelimited_13.flush();
					outtFileOutputDelimited_13.close();
				}

				globalMap.put("tFileOutputDelimited_13_NB_LINE", nb_line_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME", fileName_tFileOutputDelimited_13);

				if (isFileGenerated_tFileOutputDelimited_13 && nb_line_tFileOutputDelimited_13 == 0) {

					filetFileOutputDelimited_13.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_13", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (resourceMap.get("finish_tFileOutputDelimited_13") == null) {

					java.io.Writer outtFileOutputDelimited_13 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_13");
					if (outtFileOutputDelimited_13 != null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_13")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_13"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_13")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IngestaoCienciaDados IngestaoCienciaDadosClass = new IngestaoCienciaDados();

		int exitCode = IngestaoCienciaDadosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = IngestaoCienciaDados.class.getClassLoader().getResourceAsStream(
					"local_project/ingestaocienciadados_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = IngestaoCienciaDados.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_4) {
			globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

			e_tDBInput_4.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_6) {
			globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

			e_tDBInput_6.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_8) {
			globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

			e_tDBInput_8.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_10) {
			globalMap.put("tDBInput_10_SUBPROCESS_STATE", -1);

			e_tDBInput_10.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_11) {
			globalMap.put("tDBInput_11_SUBPROCESS_STATE", -1);

			e_tDBInput_11.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : IngestaoCienciaDados");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 631937 characters generated by Talend Open Studio for Data Integration on the
 * July 11, 2021 10:23:31 PM BRT
 ************************************************************************************************/