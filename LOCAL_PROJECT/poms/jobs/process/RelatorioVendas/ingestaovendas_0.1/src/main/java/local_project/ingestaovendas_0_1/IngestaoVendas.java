// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.ingestaovendas_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: IngestaoVendas Purpose: Realizar a ingestao de dados de vendas<br>
 * Description: Objetivo de apresentar um relatorio com as seguintes agregacoes:
 * - Vendas Diarias - Vendas Por regiao - Vendas Online e Offline <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class IngestaoVendas implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IngestaoVendas";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IngestaoVendas.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IngestaoVendas.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row27_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SalesHeaderJoinAddressStruct
			implements routines.system.IPersistableRow<SalesHeaderJoinAddressStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalesHeaderJoinAddressStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_1Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_1Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				row1Struct row3 = row1;
				SalesHeaderJoinAddressStruct SalesHeaderJoinAddress = new SalesHeaderJoinAddressStruct();
				SalesHeaderJoinAddressStruct row5 = SalesHeaderJoinAddress;
				row6Struct row6 = new row6Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CountryRegion;
					BigDecimal TotalDue_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.CountryRegion == null) ? 0 : this.CountryRegion.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.CountryRegion == null) {
							if (other.CountryRegion != null)
								return false;
						} else if (!this.CountryRegion.equals(other.CountryRegion))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SalesHeaderJoinAddress");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/SalesOrderJoinAddress"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("CountryRegion");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("TotalDue");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_3", isFileGenerated_tFileOutputDelimited_3);
				resourceMap.put("filetFileOutputDelimited_3", filetFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalesHeaderJoinAddressStruct SalesHeaderJoinAddress_tmp = new SalesHeaderJoinAddressStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("SalesOrderID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("RevisionNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("OrderDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DueDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ShipDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Status");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("OnlineOrderFlag");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SalesOrderNumber");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CustomerID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ShipToAddressID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("BillToAddressID");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ShipMethod");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CreditCardApprovalCode");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SubTotal");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("TaxAmt");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Freight");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("TotalDue");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Comment");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("rowguid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ModifiedDate");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "sqlfamily";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:hgknJFynz0u7VzPUis6zqOSpqXVYBkwEDz2rMJQP/up7K5AFKA==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = "1433";
				String dbname_tDBInput_1 = "AdventureWorks";
				String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += "//" + "AdventureWorks";
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_1 = "SalesLT";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT SalesLT.SalesOrderHeader.SalesOrderID,\n		SalesLT.SalesOrderHeader.RevisionNumber,\n		SalesLT.SalesOrderHeader.Ord"
						+ "erDate,\n		SalesLT.SalesOrderHeader.DueDate,\n		SalesLT.SalesOrderHeader.ShipDate,\n		SalesLT.SalesOrderHeader.Status,\n		Sa"
						+ "lesLT.SalesOrderHeader.OnlineOrderFlag,\n		SalesLT.SalesOrderHeader.SalesOrderNumber,\n		SalesLT.SalesOrderHeader.Customer"
						+ "ID,\n		SalesLT.SalesOrderHeader.ShipToAddressID,\n		SalesLT.SalesOrderHeader.BillToAddressID,\n		SalesLT.SalesOrderHeader.S"
						+ "hipMethod,\n		SalesLT.SalesOrderHeader.CreditCardApprovalCode,\n		SalesLT.SalesOrderHeader.SubTotal,\n		SalesLT.SalesOrderH"
						+ "eader.TaxAmt,\n		SalesLT.SalesOrderHeader.Freight,\n		SalesLT.SalesOrderHeader.TotalDue,\n		SalesLT.SalesOrderHeader.Commen"
						+ "t,\n		SalesLT.SalesOrderHeader.rowguid,\n		SalesLT.SalesOrderHeader.ModifiedDate\nFROM	SalesLT.SalesOrderHeader";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.SalesOrderID = 0;
						} else {

							row1.SalesOrderID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.RevisionNumber = 0;
						} else {

							row1.RevisionNumber = rs_tDBInput_1.getShort(2);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.OrderDate = null;
						} else {

							row1.OrderDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 3);

						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.DueDate = null;
						} else {

							row1.DueDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 4);

						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.ShipDate = null;
						} else {

							row1.ShipDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 5);

						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.Status = 0;
						} else {

							row1.Status = rs_tDBInput_1.getShort(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.OnlineOrderFlag = null;
						} else {

							row1.OnlineOrderFlag = rs_tDBInput_1.getInt(7);
							if (rs_tDBInput_1.wasNull()) {
								row1.OnlineOrderFlag = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.SalesOrderNumber = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SalesOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.SalesOrderNumber = tmpContent_tDBInput_1;
								}
							} else {
								row1.SalesOrderNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.CustomerID = 0;
						} else {

							row1.CustomerID = rs_tDBInput_1.getInt(9);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.ShipToAddressID = null;
						} else {

							row1.ShipToAddressID = rs_tDBInput_1.getInt(10);
							if (rs_tDBInput_1.wasNull()) {
								row1.ShipToAddressID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.BillToAddressID = null;
						} else {

							row1.BillToAddressID = rs_tDBInput_1.getInt(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.BillToAddressID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.ShipMethod = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ShipMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ShipMethod = tmpContent_tDBInput_1;
								}
							} else {
								row1.ShipMethod = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.CreditCardApprovalCode = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(13);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CreditCardApprovalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CreditCardApprovalCode = tmpContent_tDBInput_1;
								}
							} else {
								row1.CreditCardApprovalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.SubTotal = null;
						} else {

							row1.SubTotal = rs_tDBInput_1.getObject(14);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.TaxAmt = null;
						} else {

							row1.TaxAmt = rs_tDBInput_1.getObject(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.Freight = null;
						} else {

							row1.Freight = rs_tDBInput_1.getObject(16);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.TotalDue = null;
						} else {

							row1.TotalDue = rs_tDBInput_1.getBigDecimal(17);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.Comment = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Comment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Comment = tmpContent_tDBInput_1;
								}
							} else {
								row1.Comment = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.rowguid = null;
						} else {

							row1.rowguid = rs_tDBInput_1.getObject(19);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.ModifiedDate = null;
						} else {

							row1.ModifiedDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 20);

						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						sb_tFileOutputDelimited_1.append(row1.SalesOrderID);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						sb_tFileOutputDelimited_1.append(row1.RevisionNumber);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.OrderDate != null) {
							sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row1.OrderDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.DueDate != null) {
							sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row1.DueDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ShipDate != null) {
							sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row1.ShipDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						sb_tFileOutputDelimited_1.append(row1.Status);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.OnlineOrderFlag != null) {
							sb_tFileOutputDelimited_1.append(row1.OnlineOrderFlag);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.SalesOrderNumber != null) {
							sb_tFileOutputDelimited_1.append(row1.SalesOrderNumber);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						sb_tFileOutputDelimited_1.append(row1.CustomerID);
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ShipToAddressID != null) {
							sb_tFileOutputDelimited_1.append(row1.ShipToAddressID);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.BillToAddressID != null) {
							sb_tFileOutputDelimited_1.append(row1.BillToAddressID);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ShipMethod != null) {
							sb_tFileOutputDelimited_1.append(row1.ShipMethod);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.CreditCardApprovalCode != null) {
							sb_tFileOutputDelimited_1.append(row1.CreditCardApprovalCode);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.SubTotal != null) {
							sb_tFileOutputDelimited_1.append(row1.SubTotal);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.TaxAmt != null) {
							sb_tFileOutputDelimited_1.append(row1.TaxAmt);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Freight != null) {
							sb_tFileOutputDelimited_1.append(row1.Freight);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.TotalDue != null) {
							sb_tFileOutputDelimited_1
									.append(row1.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.Comment != null) {
							sb_tFileOutputDelimited_1.append(row1.Comment);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.rowguid != null) {
							sb_tFileOutputDelimited_1.append(row1.rowguid);
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row1.ModifiedDate != null) {
							sb_tFileOutputDelimited_1
									.append(FormatterUtils.format_Date(row1.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						nb_line_tFileOutputDelimited_1++;
						resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

						outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

						row3 = row1;

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							Object exprKeyValue_row4__AddressID = row3.ShipToAddressID;
							if (exprKeyValue_row4__AddressID == null) {
								hasCasePrimitiveKeyWithNull_tMap_1 = true;
							} else {
								row4HashKey.AddressID = (int) (Integer) exprKeyValue_row4__AddressID;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.AddressID = '" +
							// row4HashKey.AddressID + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							SalesHeaderJoinAddress = null;

// # Output table : 'SalesHeaderJoinAddress'
							SalesHeaderJoinAddress_tmp.CountryRegion = row4.CountryRegion;
							SalesHeaderJoinAddress_tmp.TotalDue = row3.TotalDue;
							SalesHeaderJoinAddress = SalesHeaderJoinAddress_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "SalesHeaderJoinAddress"
						if (SalesHeaderJoinAddress != null) {

							/**
							 * [tFileOutputDelimited_3 main ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "SalesHeaderJoinAddress");
							}

							StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
							if (SalesHeaderJoinAddress.CountryRegion != null) {
								sb_tFileOutputDelimited_3.append(SalesHeaderJoinAddress.CountryRegion);
							}
							sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
							if (SalesHeaderJoinAddress.TotalDue != null) {
								sb_tFileOutputDelimited_3.append(SalesHeaderJoinAddress.TotalDue
										.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
							}
							sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

							nb_line_tFileOutputDelimited_3++;
							resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

							outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

							row5 = SalesHeaderJoinAddress;

							tos_count_tFileOutputDelimited_3++;

							/**
							 * [tFileOutputDelimited_3 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_3 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							/**
							 * [tFileOutputDelimited_3 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							operation_finder_tAggregateRow_1.CountryRegion = row5.CountryRegion;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.CountryRegion = operation_finder_tAggregateRow_1.CountryRegion;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.TotalDue_sum == null) {
								operation_result_tAggregateRow_1.TotalDue_sum = new BigDecimal(0).setScale(4);
							}
							operation_result_tAggregateRow_1.TotalDue_sum = operation_result_tAggregateRow_1.TotalDue_sum
									.add(new BigDecimal(String.valueOf(row5.TotalDue)));

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_3 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							/**
							 * [tFileOutputDelimited_3 process_data_end ] stop
							 */

						} // End of branch "SalesHeaderJoinAddress"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				if (isFileGenerated_tFileOutputDelimited_3 && nb_line_tFileOutputDelimited_3 == 0) {

					filetFileOutputDelimited_3.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SalesHeaderJoinAddress");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/AggregateTotalRegion"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("CountryRegion");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TotalDue");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_4", isFileGenerated_tFileOutputDelimited_4);
				resourceMap.put("filetFileOutputDelimited_4", filetFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row6.CountryRegion = aggregated_row_tAggregateRow_1.CountryRegion;
					row6.TotalDue = aggregated_row_tAggregateRow_1.TotalDue_sum;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 main ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
					if (row6.CountryRegion != null) {
						sb_tFileOutputDelimited_4.append(row6.CountryRegion);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row6.TotalDue != null) {
						sb_tFileOutputDelimited_4
								.append(row6.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

					nb_line_tFileOutputDelimited_4++;
					resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

					outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

					tos_count_tFileOutputDelimited_4++;

					/**
					 * [tFileOutputDelimited_4 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				if (isFileGenerated_tFileOutputDelimited_4 && nb_line_tFileOutputDelimited_4 == 0) {

					filetFileOutputDelimited_4.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_3")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_3"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_3")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_4")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_4"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_4")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.AddressID = this.AddressID;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.City = this.City;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.PostalCode = this.PostalCode;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.AddressID = this.AddressID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.AddressLine2 = readString(dis, ois);

				this.City = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.PostalCode = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.AddressLine2, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.PostalCode, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

					this.AddressLine1 = readString(dis);

					this.AddressLine2 = readString(dis);

					this.City = readString(dis);

					this.StateProvince = readString(dis);

					this.CountryRegion = readString(dis);

					this.PostalCode = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.AddressLine2, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.StateProvince, dos);

				// String

				writeString(this.CountryRegion, dos);

				// String

				writeString(this.PostalCode, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row2Struct row4 = row2;

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tFileOutputDelimited_2 - inputs:(row2) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row3,row4) outputs:(SalesHeaderJoinAddress)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngAddress" + TalendDate.getDate("YYYY-MM-DD") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("AddressID");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("AddressLine1");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("AddressLine2");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("City");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("StateProvince");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("CountryRegion");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("PostalCode");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("rowguid");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("ModifiedDate");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "sqlfamily";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Fp/H7czODChnWU/z0P//P8nncn3tolXBeIJqZPjFkhR0hgbuow==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String port_tDBInput_2 = "1433";
				String dbname_tDBInput_2 = "AdventureWorks";
				String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_2)) {
					url_tDBInput_2 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_2)) {
					url_tDBInput_2 += "//" + "AdventureWorks";
				}
				url_tDBInput_2 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_2 = "SalesLT";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT SalesLT.Address.AddressID,\n		SalesLT.Address.AddressLine1,\n		SalesLT.Address.AddressLine2,\n		SalesLT.Address.Cit"
						+ "y,\n		SalesLT.Address.StateProvince,\n		SalesLT.Address.CountryRegion,\n		SalesLT.Address.PostalCode,\n		SalesLT.Address.row"
						+ "guid,\n		SalesLT.Address.ModifiedDate\nFROM	SalesLT.Address";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.AddressID = 0;
						} else {

							row2.AddressID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.AddressLine1 = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.AddressLine1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.AddressLine1 = tmpContent_tDBInput_2;
								}
							} else {
								row2.AddressLine1 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.AddressLine2 = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.AddressLine2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.AddressLine2 = tmpContent_tDBInput_2;
								}
							} else {
								row2.AddressLine2 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.City = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.City = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.City = tmpContent_tDBInput_2;
								}
							} else {
								row2.City = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.StateProvince = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.StateProvince = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.StateProvince = tmpContent_tDBInput_2;
								}
							} else {
								row2.StateProvince = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.CountryRegion = null;
						} else {

							net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_2 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_2
									.getClob(6);
							if (clob_tDBInput_2 != null) {
								net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_2 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(
										clob_tDBInput_2);
								tmpContent_tDBInput_2 = tNTextImpl_tDBInput_2.getValue();
							} else {
								tmpContent_tDBInput_2 = null;
							}
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.CountryRegion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CountryRegion = tmpContent_tDBInput_2;
								}
							} else {
								row2.CountryRegion = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.PostalCode = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(7);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.PostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PostalCode = tmpContent_tDBInput_2;
								}
							} else {
								row2.PostalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.rowguid = null;
						} else {

							row2.rowguid = rs_tDBInput_2.getObject(8);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.ModifiedDate = null;
						} else {

							row2.ModifiedDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 9);

						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						sb_tFileOutputDelimited_2.append(row2.AddressID);
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.AddressLine1 != null) {
							sb_tFileOutputDelimited_2.append(row2.AddressLine1);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.AddressLine2 != null) {
							sb_tFileOutputDelimited_2.append(row2.AddressLine2);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.City != null) {
							sb_tFileOutputDelimited_2.append(row2.City);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.StateProvince != null) {
							sb_tFileOutputDelimited_2.append(row2.StateProvince);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.CountryRegion != null) {
							sb_tFileOutputDelimited_2.append(row2.CountryRegion);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.PostalCode != null) {
							sb_tFileOutputDelimited_2.append(row2.PostalCode);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.rowguid != null) {
							sb_tFileOutputDelimited_2.append(row2.rowguid);
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row2.ModifiedDate != null) {
							sb_tFileOutputDelimited_2
									.append(FormatterUtils.format_Date(row2.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						nb_line_tFileOutputDelimited_2++;
						resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

						outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

						row4 = row2;

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.AddressID = row4.AddressID;

						row4_HashRow.AddressLine1 = row4.AddressLine1;

						row4_HashRow.AddressLine2 = row4.AddressLine2;

						row4_HashRow.City = row4.City;

						row4_HashRow.StateProvince = row4.StateProvince;

						row4_HashRow.CountryRegion = row4.CountryRegion;

						row4_HashRow.PostalCode = row4.PostalCode;

						row4_HashRow.rowguid = row4.rowguid;

						row4_HashRow.ModifiedDate = row4.ModifiedDate;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.OnlineOrderFlag = readInteger(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.OnlineOrderFlag = readInteger(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.OnlineOrderFlag = readInteger(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.OnlineOrderFlag = readInteger(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;
				row9Struct row9 = new row9Struct();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer OnlineOrderFlag;
					BigDecimal TotalDue_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.OnlineOrderFlag == null) ? 0 : this.OnlineOrderFlag.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.OnlineOrderFlag == null) {
							if (other.OnlineOrderFlag != null)
								return false;
						} else if (!this.OnlineOrderFlag.equals(other.OnlineOrderFlag))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderOnlineOffline"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "UTF-8"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("OnlineOrderFlag");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("TotalDue");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_5", isFileGenerated_tFileOutputDelimited_5);
				resourceMap.put("filetFileOutputDelimited_5", filetFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "sqlfamily";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:2+ieGeB+GyZWZ57wlzemC4bafro5KcpByOcPICmz3eJR+8RDlw==");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String port_tDBInput_3 = "1433";
				String dbname_tDBInput_3 = "AdventureWorks";
				String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_3)) {
					url_tDBInput_3 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_3)) {
					url_tDBInput_3 += "//" + "AdventureWorks";
				}
				url_tDBInput_3 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_3 = "SalesLT";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT SalesLT.SalesOrderHeader.OnlineOrderFlag,\n		SalesLT.SalesOrderHeader.TotalDue\nFROM	SalesLT.SalesOrderHeader";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row7.OnlineOrderFlag = null;
						} else {

							row7.OnlineOrderFlag = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								row7.OnlineOrderFlag = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row7.TotalDue = null;
						} else {

							row7.TotalDue = rs_tDBInput_3.getBigDecimal(2);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
						if (row7.OnlineOrderFlag != null) {
							sb_tFileOutputDelimited_5.append(row7.OnlineOrderFlag);
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row7.TotalDue != null) {
							sb_tFileOutputDelimited_5
									.append(row7.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

						nb_line_tFileOutputDelimited_5++;
						resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

						outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

						row8 = row7;

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
						}

						operation_finder_tAggregateRow_2.OnlineOrderFlag = row8.OnlineOrderFlag;

						operation_finder_tAggregateRow_2.hashCodeDirty = true;

						operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

						if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

							operation_result_tAggregateRow_2.OnlineOrderFlag = operation_finder_tAggregateRow_2.OnlineOrderFlag;

							hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
									operation_result_tAggregateRow_2);

						} // G_OutMain_AggR_001

						if (operation_result_tAggregateRow_2.TotalDue_sum == null) {
							operation_result_tAggregateRow_2.TotalDue_sum = new BigDecimal(0).setScale(4);
						}
						operation_result_tAggregateRow_2.TotalDue_sum = operation_result_tAggregateRow_2.TotalDue_sum
								.add(new BigDecimal(String.valueOf(row8.TotalDue)));

						tos_count_tAggregateRow_2_AGGOUT++;

						/**
						 * [tAggregateRow_2_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				if (isFileGenerated_tFileOutputDelimited_5 && nb_line_tFileOutputDelimited_5 == 0) {

					filetFileOutputDelimited_5.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/AggregateTotalOnline"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("OnlineOrderFlag");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("TotalDue");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_6", isFileGenerated_tFileOutputDelimited_6);
				resourceMap.put("filetFileOutputDelimited_6", filetFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row9.OnlineOrderFlag = aggregated_row_tAggregateRow_2.OnlineOrderFlag;
					row9.TotalDue = aggregated_row_tAggregateRow_2.TotalDue_sum;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 main ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
					}

					StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
					if (row9.OnlineOrderFlag != null) {
						sb_tFileOutputDelimited_6.append(row9.OnlineOrderFlag);
					}
					sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
					if (row9.TotalDue != null) {
						sb_tFileOutputDelimited_6
								.append(row9.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
					}
					sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

					nb_line_tFileOutputDelimited_6++;
					resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

					outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

					tos_count_tFileOutputDelimited_6++;

					/**
					 * [tFileOutputDelimited_6 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

					/**
					 * [tFileOutputDelimited_6 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_6 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_6";

					/**
					 * [tFileOutputDelimited_6 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				if (isFileGenerated_tFileOutputDelimited_6 && nb_line_tFileOutputDelimited_6 == 0) {

					filetFileOutputDelimited_6.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_5")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_5"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_5")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_6")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_6"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_6")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;
			other.PasswordHash = this.PasswordHash;
			other.PasswordSalt = this.PasswordSalt;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NameStyle = readString(dis, ois);

				this.Title = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.MiddleName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Suffix = readString(dis, ois);

				this.CompanyName = readString(dis, ois);

				this.SalesPerson = readString(dis, ois);

				this.EmailAddress = readString(dis, ois);

				this.Phone = readString(dis, ois);

				this.PasswordHash = readString(dis, ois);

				this.PasswordSalt = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NameStyle, dos, oos);

				writeString(this.Title, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.MiddleName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Suffix, dos, oos);

				writeString(this.CompanyName, dos, oos);

				writeString(this.SalesPerson, dos, oos);

				writeString(this.EmailAddress, dos, oos);

				writeString(this.Phone, dos, oos);

				writeString(this.PasswordHash, dos, oos);

				writeString(this.PasswordSalt, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;
			other.PasswordHash = this.PasswordHash;
			other.PasswordSalt = this.PasswordSalt;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.NameStyle = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					this.Suffix = readString(dis);

					this.CompanyName = readString(dis);

					this.SalesPerson = readString(dis);

					this.EmailAddress = readString(dis);

					this.Phone = readString(dis);

					this.PasswordHash = readString(dis);

					this.PasswordSalt = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.NameStyle, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.EmailAddress, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.PasswordHash, dos);

				// String

				writeString(this.PasswordSalt, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row10Struct row12 = row10;

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tFileOutputDelimited_7 - inputs:(row10) outputs:(row12,row12) |
				// target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
				// linked node: tMap_2 - inputs:(row12,row11) outputs:(TotalVendidoPVendedor)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct>getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/RelatorioIngCustomer" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
							fileName_tFileOutputDelimited_7.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
																		 * Start field
																		 * tFileOutputDelimited_7:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "UTF-8"));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("CustomerID");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("NameStyle");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Title");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("FirstName");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("MiddleName");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("LastName");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Suffix");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CompanyName");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("SalesPerson");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("EmailAddress");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Phone");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("PasswordHash");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("PasswordSalt");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("rowguid");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("ModifiedDate");
					outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_7", isFileGenerated_tFileOutputDelimited_7);
				resourceMap.put("filetFileOutputDelimited_7", filetFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "sqlfamily";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:II5qPFYtE/a2RC40tTWXoW5CWO9j7MKrnT1oC0HeuDl8E2hwAg==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String port_tDBInput_4 = "1433";
				String dbname_tDBInput_4 = "AdventureWorks";
				String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_4)) {
					url_tDBInput_4 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_4)) {
					url_tDBInput_4 += "//" + "AdventureWorks";
				}
				url_tDBInput_4 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_4 = "SalesLT";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT SalesLT.Customer.CustomerID,\n		SalesLT.Customer.NameStyle,\n		SalesLT.Customer.Title,\n		SalesLT.Customer.FirstNam"
						+ "e,\n		SalesLT.Customer.MiddleName,\n		SalesLT.Customer.LastName,\n		SalesLT.Customer.Suffix,\n		SalesLT.Customer.CompanyName"
						+ ",\n		SalesLT.Customer.SalesPerson,\n		SalesLT.Customer.EmailAddress,\n		SalesLT.Customer.Phone,\n		SalesLT.Customer.Password"
						+ "Hash,\n		SalesLT.Customer.PasswordSalt,\n		SalesLT.Customer.rowguid,\n		SalesLT.Customer.ModifiedDate\nFROM	SalesLT.Customer"
						+ "";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row10.CustomerID = 0;
						} else {

							row10.CustomerID = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row10.NameStyle = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.NameStyle = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.NameStyle = tmpContent_tDBInput_4;
								}
							} else {
								row10.NameStyle = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row10.Title = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.Title = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.Title = tmpContent_tDBInput_4;
								}
							} else {
								row10.Title = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row10.FirstName = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.FirstName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.FirstName = tmpContent_tDBInput_4;
								}
							} else {
								row10.FirstName = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row10.MiddleName = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.MiddleName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.MiddleName = tmpContent_tDBInput_4;
								}
							} else {
								row10.MiddleName = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row10.LastName = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(6);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.LastName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.LastName = tmpContent_tDBInput_4;
								}
							} else {
								row10.LastName = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row10.Suffix = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(7);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.Suffix = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.Suffix = tmpContent_tDBInput_4;
								}
							} else {
								row10.Suffix = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row10.CompanyName = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(8);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.CompanyName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.CompanyName = tmpContent_tDBInput_4;
								}
							} else {
								row10.CompanyName = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row10.SalesPerson = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(9);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.SalesPerson = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.SalesPerson = tmpContent_tDBInput_4;
								}
							} else {
								row10.SalesPerson = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row10.EmailAddress = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.EmailAddress = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.EmailAddress = tmpContent_tDBInput_4;
								}
							} else {
								row10.EmailAddress = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row10.Phone = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(11);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.Phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.Phone = tmpContent_tDBInput_4;
								}
							} else {
								row10.Phone = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row10.PasswordHash = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(12);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PasswordHash = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.PasswordHash = tmpContent_tDBInput_4;
								}
							} else {
								row10.PasswordHash = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row10.PasswordSalt = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(13);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row10.PasswordSalt = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row10.PasswordSalt = tmpContent_tDBInput_4;
								}
							} else {
								row10.PasswordSalt = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row10.rowguid = null;
						} else {

							row10.rowguid = rs_tDBInput_4.getObject(14);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row10.ModifiedDate = null;
						} else {

							row10.ModifiedDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 15);

						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
						}

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
						sb_tFileOutputDelimited_7.append(row10.CustomerID);
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.NameStyle != null) {
							sb_tFileOutputDelimited_7.append(row10.NameStyle);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.Title != null) {
							sb_tFileOutputDelimited_7.append(row10.Title);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.FirstName != null) {
							sb_tFileOutputDelimited_7.append(row10.FirstName);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.MiddleName != null) {
							sb_tFileOutputDelimited_7.append(row10.MiddleName);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.LastName != null) {
							sb_tFileOutputDelimited_7.append(row10.LastName);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.Suffix != null) {
							sb_tFileOutputDelimited_7.append(row10.Suffix);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.CompanyName != null) {
							sb_tFileOutputDelimited_7.append(row10.CompanyName);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.SalesPerson != null) {
							sb_tFileOutputDelimited_7.append(row10.SalesPerson);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.EmailAddress != null) {
							sb_tFileOutputDelimited_7.append(row10.EmailAddress);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.Phone != null) {
							sb_tFileOutputDelimited_7.append(row10.Phone);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.PasswordHash != null) {
							sb_tFileOutputDelimited_7.append(row10.PasswordHash);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.PasswordSalt != null) {
							sb_tFileOutputDelimited_7.append(row10.PasswordSalt);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.rowguid != null) {
							sb_tFileOutputDelimited_7.append(row10.rowguid);
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row10.ModifiedDate != null) {
							sb_tFileOutputDelimited_7
									.append(FormatterUtils.format_Date(row10.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						nb_line_tFileOutputDelimited_7++;
						resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

						outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

						row12 = row10;

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 main ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
						}

						row12Struct row12_HashRow = new row12Struct();

						row12_HashRow.CustomerID = row12.CustomerID;

						row12_HashRow.NameStyle = row12.NameStyle;

						row12_HashRow.Title = row12.Title;

						row12_HashRow.FirstName = row12.FirstName;

						row12_HashRow.MiddleName = row12.MiddleName;

						row12_HashRow.LastName = row12.LastName;

						row12_HashRow.Suffix = row12.Suffix;

						row12_HashRow.CompanyName = row12.CompanyName;

						row12_HashRow.SalesPerson = row12.SalesPerson;

						row12_HashRow.EmailAddress = row12.EmailAddress;

						row12_HashRow.Phone = row12.Phone;

						row12_HashRow.PasswordHash = row12.PasswordHash;

						row12_HashRow.PasswordSalt = row12.PasswordSalt;

						row12_HashRow.rowguid = row12.rowguid;

						row12_HashRow.ModifiedDate = row12.ModifiedDate;

						tHash_Lookup_row12.put(row12_HashRow);

						tos_count_tAdvancedHash_row12++;

						/**
						 * [tAdvancedHash_row12 main ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row12 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						/**
						 * [tAdvancedHash_row12 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE", nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);

				if (isFileGenerated_tFileOutputDelimited_7 && nb_line_tFileOutputDelimited_7 == 0) {

					filetFileOutputDelimited_7.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_7")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_7"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_7")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal CountTotalDue;

		public BigDecimal getCountTotalDue() {
			return this.CountTotalDue;
		}

		public BigDecimal MaxTotalDue;

		public BigDecimal getMaxTotalDue() {
			return this.MaxTotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.CountTotalDue = (BigDecimal) dis.readObject();

					this.MaxTotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.CountTotalDue);

				// BigDecimal

				dos.writeObject(this.MaxTotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",CountTotalDue=" + String.valueOf(CountTotalDue));
			sb.append(",MaxTotalDue=" + String.valueOf(MaxTotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal CountTotalDue;

		public BigDecimal getCountTotalDue() {
			return this.CountTotalDue;
		}

		public BigDecimal MaxTotalDue;

		public BigDecimal getMaxTotalDue() {
			return this.MaxTotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.CountTotalDue = (BigDecimal) dis.readObject();

					this.MaxTotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.CountTotalDue);

				// BigDecimal

				dos.writeObject(this.MaxTotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",CountTotalDue=" + String.valueOf(CountTotalDue));
			sb.append(",MaxTotalDue=" + String.valueOf(MaxTotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfSalesHeaderJoinAddressStruct
			implements routines.system.IPersistableRow<copyOfSalesHeaderJoinAddressStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CountryRegion = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryRegion, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryRegion=" + CountryRegion);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfSalesHeaderJoinAddressStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_5Struct other = (after_tDBInput_5Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_5Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_5Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_6Process(globalMap);

				row14Struct row14 = new row14Struct();
				row14Struct row16 = row14;
				copyOfSalesHeaderJoinAddressStruct copyOfSalesHeaderJoinAddress = new copyOfSalesHeaderJoinAddressStruct();
				copyOfSalesHeaderJoinAddressStruct row15 = copyOfSalesHeaderJoinAddress;
				row19Struct row19 = new row19Struct();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAggregateRow_5_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CountryRegion;
					int count = 0;
					int CountTotalDue_clmCount = 0;

					BigDecimal MaxTotalDue_max;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.CountryRegion == null) ? 0 : this.CountryRegion.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.CountryRegion == null) {
							if (other.CountryRegion != null)
								return false;
						} else if (!this.CountryRegion.equals(other.CountryRegion))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_11", false);
				start_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfSalesHeaderJoinAddress");
				}

				int tos_count_tFileOutputDelimited_11 = 0;

				String fileName_tFileOutputDelimited_11 = "";
				fileName_tFileOutputDelimited_11 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/MesSalesPerRegion" + TalendDate.getDate("YYYY-MM")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_11 = null;
				String extension_tFileOutputDelimited_11 = null;
				String directory_tFileOutputDelimited_11 = null;
				if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
								fileName_tFileOutputDelimited_11.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
							fileName_tFileOutputDelimited_11.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11.substring(0,
								fileName_tFileOutputDelimited_11.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					}
					directory_tFileOutputDelimited_11 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_11 = true;
				java.io.File filetFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME", fileName_tFileOutputDelimited_11);
				int nb_line_tFileOutputDelimited_11 = 0;
				int splitedFileNo_tFileOutputDelimited_11 = 0;
				int currentRow_tFileOutputDelimited_11 = 0;

				final String OUT_DELIM_tFileOutputDelimited_11 = /**
																	 * Start field
																	 * tFileOutputDelimited_11:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_11:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_11 = /**
																		 * Start field
																		 * tFileOutputDelimited_11:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_11:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_11 != null
						&& directory_tFileOutputDelimited_11.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_11 = new java.io.File(directory_tFileOutputDelimited_11);
					if (!dir_tFileOutputDelimited_11.exists()) {
						dir_tFileOutputDelimited_11.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_11 = null;

				java.io.File fileToDelete_tFileOutputDelimited_11 = new java.io.File(fileName_tFileOutputDelimited_11);
				if (fileToDelete_tFileOutputDelimited_11.exists()) {
					fileToDelete_tFileOutputDelimited_11.delete();
				}
				outtFileOutputDelimited_11 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_11, false), "UTF-8"));
				if (filetFileOutputDelimited_11.length() == 0) {
					outtFileOutputDelimited_11.write("CountryRegion");
					outtFileOutputDelimited_11.write(OUT_DELIM_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.write("TotalDue");
					outtFileOutputDelimited_11.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);
					outtFileOutputDelimited_11.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_11", outtFileOutputDelimited_11);
				resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_11", isFileGenerated_tFileOutputDelimited_11);
				resourceMap.put("filetFileOutputDelimited_11", filetFileOutputDelimited_11);

				/**
				 * [tFileOutputDelimited_11 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfSalesHeaderJoinAddressStruct copyOfSalesHeaderJoinAddress_tmp = new copyOfSalesHeaderJoinAddressStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrder" + TalendDate.getDate("YYYY-MM") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
							fileName_tFileOutputDelimited_9.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);
				int nb_line_tFileOutputDelimited_9 = 0;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
																		 * Start field
																		 * tFileOutputDelimited_9:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;

				java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				if (fileToDelete_tFileOutputDelimited_9.exists()) {
					fileToDelete_tFileOutputDelimited_9.delete();
				}
				outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, false), "UTF-8"));
				if (filetFileOutputDelimited_9.length() == 0) {
					outtFileOutputDelimited_9.write("SalesOrderID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("RevisionNumber");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("OrderDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("DueDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ShipDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Status");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("OnlineOrderFlag");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("SalesOrderNumber");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CustomerID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ShipToAddressID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("BillToAddressID");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ShipMethod");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CreditCardApprovalCode");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("SubTotal");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("TaxAmt");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Freight");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("TotalDue");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Comment");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("rowguid");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ModifiedDate");
					outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
				resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_9", isFileGenerated_tFileOutputDelimited_9);
				resourceMap.put("filetFileOutputDelimited_9", filetFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "sqlfamily";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:MKJIJ1iwudSQ4iiFcPNuK6ID+etsnjjvPL9hH6W0tue4lhlDnA==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String port_tDBInput_5 = "1433";
				String dbname_tDBInput_5 = "AdventureWorks";
				String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_5)) {
					url_tDBInput_5 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_5)) {
					url_tDBInput_5 += "//" + "AdventureWorks";
				}
				url_tDBInput_5 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_5 = "SalesLT";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT SalesLT.SalesOrderHeader.SalesOrderID,\n		SalesLT.SalesOrderHeader.RevisionNumber,\n		SalesLT.SalesOrderHeader.Ord"
						+ "erDate,\n		SalesLT.SalesOrderHeader.DueDate,\n		SalesLT.SalesOrderHeader.ShipDate,\n		SalesLT.SalesOrderHeader.Status,\n		Sa"
						+ "lesLT.SalesOrderHeader.OnlineOrderFlag,\n		SalesLT.SalesOrderHeader.SalesOrderNumber,\n		SalesLT.SalesOrderHeader.Customer"
						+ "ID,\n		SalesLT.SalesOrderHeader.ShipToAddressID,\n		SalesLT.SalesOrderHeader.BillToAddressID,\n		SalesLT.SalesOrderHeader.S"
						+ "hipMethod,\n		SalesLT.SalesOrderHeader.CreditCardApprovalCode,\n		SalesLT.SalesOrderHeader.SubTotal,\n		SalesLT.SalesOrderH"
						+ "eader.TaxAmt,\n		SalesLT.SalesOrderHeader.Freight,\n		SalesLT.SalesOrderHeader.TotalDue,\n		SalesLT.SalesOrderHeader.Commen"
						+ "t,\n		SalesLT.SalesOrderHeader.rowguid,\n		SalesLT.SalesOrderHeader.ModifiedDate\nFROM	SalesLT.SalesOrderHeader";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row14.SalesOrderID = 0;
						} else {

							row14.SalesOrderID = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row14.RevisionNumber = 0;
						} else {

							row14.RevisionNumber = rs_tDBInput_5.getShort(2);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row14.OrderDate = null;
						} else {

							row14.OrderDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 3);

						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row14.DueDate = null;
						} else {

							row14.DueDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 4);

						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row14.ShipDate = null;
						} else {

							row14.ShipDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 5);

						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row14.Status = 0;
						} else {

							row14.Status = rs_tDBInput_5.getShort(6);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row14.OnlineOrderFlag = null;
						} else {

							row14.OnlineOrderFlag = rs_tDBInput_5.getInt(7);
							if (rs_tDBInput_5.wasNull()) {
								row14.OnlineOrderFlag = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row14.SalesOrderNumber = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.SalesOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row14.SalesOrderNumber = tmpContent_tDBInput_5;
								}
							} else {
								row14.SalesOrderNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row14.CustomerID = 0;
						} else {

							row14.CustomerID = rs_tDBInput_5.getInt(9);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row14.ShipToAddressID = null;
						} else {

							row14.ShipToAddressID = rs_tDBInput_5.getInt(10);
							if (rs_tDBInput_5.wasNull()) {
								row14.ShipToAddressID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row14.BillToAddressID = null;
						} else {

							row14.BillToAddressID = rs_tDBInput_5.getInt(11);
							if (rs_tDBInput_5.wasNull()) {
								row14.BillToAddressID = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row14.ShipMethod = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ShipMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row14.ShipMethod = tmpContent_tDBInput_5;
								}
							} else {
								row14.ShipMethod = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row14.CreditCardApprovalCode = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(13);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CreditCardApprovalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row14.CreditCardApprovalCode = tmpContent_tDBInput_5;
								}
							} else {
								row14.CreditCardApprovalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row14.SubTotal = null;
						} else {

							row14.SubTotal = rs_tDBInput_5.getObject(14);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row14.TaxAmt = null;
						} else {

							row14.TaxAmt = rs_tDBInput_5.getObject(15);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row14.Freight = null;
						} else {

							row14.Freight = rs_tDBInput_5.getObject(16);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row14.TotalDue = null;
						} else {

							row14.TotalDue = rs_tDBInput_5.getBigDecimal(17);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row14.Comment = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(18);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.Comment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row14.Comment = tmpContent_tDBInput_5;
								}
							} else {
								row14.Comment = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row14.rowguid = null;
						} else {

							row14.rowguid = rs_tDBInput_5.getObject(19);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row14.ModifiedDate = null;
						} else {

							row14.ModifiedDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 20);

						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 main ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
						}

						StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
						sb_tFileOutputDelimited_9.append(row14.SalesOrderID);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						sb_tFileOutputDelimited_9.append(row14.RevisionNumber);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.OrderDate != null) {
							sb_tFileOutputDelimited_9.append(FormatterUtils.format_Date(row14.OrderDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.DueDate != null) {
							sb_tFileOutputDelimited_9.append(FormatterUtils.format_Date(row14.DueDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.ShipDate != null) {
							sb_tFileOutputDelimited_9.append(FormatterUtils.format_Date(row14.ShipDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						sb_tFileOutputDelimited_9.append(row14.Status);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.OnlineOrderFlag != null) {
							sb_tFileOutputDelimited_9.append(row14.OnlineOrderFlag);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.SalesOrderNumber != null) {
							sb_tFileOutputDelimited_9.append(row14.SalesOrderNumber);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						sb_tFileOutputDelimited_9.append(row14.CustomerID);
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.ShipToAddressID != null) {
							sb_tFileOutputDelimited_9.append(row14.ShipToAddressID);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.BillToAddressID != null) {
							sb_tFileOutputDelimited_9.append(row14.BillToAddressID);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.ShipMethod != null) {
							sb_tFileOutputDelimited_9.append(row14.ShipMethod);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.CreditCardApprovalCode != null) {
							sb_tFileOutputDelimited_9.append(row14.CreditCardApprovalCode);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.SubTotal != null) {
							sb_tFileOutputDelimited_9.append(row14.SubTotal);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.TaxAmt != null) {
							sb_tFileOutputDelimited_9.append(row14.TaxAmt);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.Freight != null) {
							sb_tFileOutputDelimited_9.append(row14.Freight);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.TotalDue != null) {
							sb_tFileOutputDelimited_9
									.append(row14.TotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.Comment != null) {
							sb_tFileOutputDelimited_9.append(row14.Comment);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.rowguid != null) {
							sb_tFileOutputDelimited_9.append(row14.rowguid);
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
						if (row14.ModifiedDate != null) {
							sb_tFileOutputDelimited_9
									.append(FormatterUtils.format_Date(row14.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

						nb_line_tFileOutputDelimited_9++;
						resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

						outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());

						row16 = row14;

						tos_count_tFileOutputDelimited_9++;

						/**
						 * [tFileOutputDelimited_9 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						/**
						 * [tFileOutputDelimited_9 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row18"
						///////////////////////////////////////////////

						boolean forceLooprow18 = false;

						row18Struct row18ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row18__AddressID = row16.ShipToAddressID;
							if (exprKeyValue_row18__AddressID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row18HashKey.AddressID = (int) (Integer) exprKeyValue_row18__AddressID;
							}

							row18HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row18.lookup(row18HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row18' and it contains more one result from keys : row18.AddressID = '" +
							// row18HashKey.AddressID + "'");
						} // G 071

						row18Struct row18 = null;

						row18Struct fromLookup_row18 = null;
						row18 = row18Default;

						if (tHash_Lookup_row18 != null && tHash_Lookup_row18.hasNext()) { // G 099

							fromLookup_row18 = tHash_Lookup_row18.next();

						} // G 099

						if (fromLookup_row18 != null) {
							row18 = fromLookup_row18;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							copyOfSalesHeaderJoinAddress = null;

// # Output table : 'copyOfSalesHeaderJoinAddress'
							copyOfSalesHeaderJoinAddress_tmp.CountryRegion = row18.CountryRegion;
							copyOfSalesHeaderJoinAddress_tmp.TotalDue = row16.TotalDue;
							copyOfSalesHeaderJoinAddress = copyOfSalesHeaderJoinAddress_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "copyOfSalesHeaderJoinAddress"
						if (copyOfSalesHeaderJoinAddress != null) {

							/**
							 * [tFileOutputDelimited_11 main ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfSalesHeaderJoinAddress");
							}

							StringBuilder sb_tFileOutputDelimited_11 = new StringBuilder();
							if (copyOfSalesHeaderJoinAddress.CountryRegion != null) {
								sb_tFileOutputDelimited_11.append(copyOfSalesHeaderJoinAddress.CountryRegion);
							}
							sb_tFileOutputDelimited_11.append(OUT_DELIM_tFileOutputDelimited_11);
							if (copyOfSalesHeaderJoinAddress.TotalDue != null) {
								sb_tFileOutputDelimited_11.append(copyOfSalesHeaderJoinAddress.TotalDue
										.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
							}
							sb_tFileOutputDelimited_11.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);

							nb_line_tFileOutputDelimited_11++;
							resourceMap.put("nb_line_tFileOutputDelimited_11", nb_line_tFileOutputDelimited_11);

							outtFileOutputDelimited_11.write(sb_tFileOutputDelimited_11.toString());

							row15 = copyOfSalesHeaderJoinAddress;

							tos_count_tFileOutputDelimited_11++;

							/**
							 * [tFileOutputDelimited_11 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_11 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

							/**
							 * [tFileOutputDelimited_11 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_5_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_5";

							currentComponent = "tAggregateRow_5_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
							}

							operation_finder_tAggregateRow_5.CountryRegion = row15.CountryRegion;

							operation_finder_tAggregateRow_5.hashCodeDirty = true;

							operation_result_tAggregateRow_5 = hash_tAggregateRow_5
									.get(operation_finder_tAggregateRow_5);

							boolean isFirstAdd_tAggregateRow_5 = false;

							if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

								operation_result_tAggregateRow_5.CountryRegion = operation_finder_tAggregateRow_5.CountryRegion;

								isFirstAdd_tAggregateRow_5 = true;

								hash_tAggregateRow_5.put(operation_result_tAggregateRow_5,
										operation_result_tAggregateRow_5);

							} // G_OutMain_AggR_001

							operation_result_tAggregateRow_5.CountTotalDue_clmCount++;
							operation_result_tAggregateRow_5.count++;

							if (

							operation_result_tAggregateRow_5.MaxTotalDue_max == null
									|| row15.TotalDue.compareTo(operation_result_tAggregateRow_5.MaxTotalDue_max) > 0

							) {
								operation_result_tAggregateRow_5.MaxTotalDue_max = row15.TotalDue;
							}

							tos_count_tAggregateRow_5_AGGOUT++;

							/**
							 * [tAggregateRow_5_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_5_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_5";

							currentComponent = "tAggregateRow_5_AGGOUT";

							/**
							 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_5_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_5";

							currentComponent = "tAggregateRow_5_AGGOUT";

							/**
							 * [tAggregateRow_5_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_11 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

							/**
							 * [tFileOutputDelimited_11 process_data_end ] stop
							 */

						} // End of branch "copyOfSalesHeaderJoinAddress"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_9";

						/**
						 * [tFileOutputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE", nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);

				if (isFileGenerated_tFileOutputDelimited_9 && nb_line_tFileOutputDelimited_9 == 0) {

					filetFileOutputDelimited_9.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 end ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (outtFileOutputDelimited_11 != null) {
					outtFileOutputDelimited_11.flush();
					outtFileOutputDelimited_11.close();
				}

				globalMap.put("tFileOutputDelimited_11_NB_LINE", nb_line_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME", fileName_tFileOutputDelimited_11);

				if (isFileGenerated_tFileOutputDelimited_11 && nb_line_tFileOutputDelimited_11 == 0) {

					filetFileOutputDelimited_11.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_11", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfSalesHeaderJoinAddress");
				}

				ok_Hash.put("tFileOutputDelimited_11", true);
				end_Hash.put("tFileOutputDelimited_11", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_11 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_12", false);
				start_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tFileOutputDelimited_12 = 0;

				String fileName_tFileOutputDelimited_12 = "";
				fileName_tFileOutputDelimited_12 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/AggregateTotalRegionMes"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_12 = null;
				String extension_tFileOutputDelimited_12 = null;
				String directory_tFileOutputDelimited_12 = null;
				if ((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
								fileName_tFileOutputDelimited_12.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
							fileName_tFileOutputDelimited_12.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0,
								fileName_tFileOutputDelimited_12.lastIndexOf("."));
						extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12
								.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
						extension_tFileOutputDelimited_12 = "";
					}
					directory_tFileOutputDelimited_12 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_12 = true;
				java.io.File filetFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME", fileName_tFileOutputDelimited_12);
				int nb_line_tFileOutputDelimited_12 = 0;
				int splitedFileNo_tFileOutputDelimited_12 = 0;
				int currentRow_tFileOutputDelimited_12 = 0;

				final String OUT_DELIM_tFileOutputDelimited_12 = /**
																	 * Start field
																	 * tFileOutputDelimited_12:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /**
																		 * Start field
																		 * tFileOutputDelimited_12:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_12 != null
						&& directory_tFileOutputDelimited_12.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_12 = new java.io.File(directory_tFileOutputDelimited_12);
					if (!dir_tFileOutputDelimited_12.exists()) {
						dir_tFileOutputDelimited_12.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_12 = null;

				java.io.File fileToDelete_tFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
				if (fileToDelete_tFileOutputDelimited_12.exists()) {
					fileToDelete_tFileOutputDelimited_12.delete();
				}
				outtFileOutputDelimited_12 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_12, false), "UTF-8"));
				if (filetFileOutputDelimited_12.length() == 0) {
					outtFileOutputDelimited_12.write("CountryRegion");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("CountTotalDue");
					outtFileOutputDelimited_12.write(OUT_DELIM_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.write("MaxTotalDue");
					outtFileOutputDelimited_12.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);
					outtFileOutputDelimited_12.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_12", outtFileOutputDelimited_12);
				resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_12", isFileGenerated_tFileOutputDelimited_12);
				resourceMap.put("filetFileOutputDelimited_12", filetFileOutputDelimited_12);

				/**
				 * [tFileOutputDelimited_12 begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					row19.CountryRegion = aggregated_row_tAggregateRow_5.CountryRegion;

					row19.CountTotalDue = new BigDecimal(aggregated_row_tAggregateRow_5.count);
					row19.CountTotalDue = new BigDecimal(aggregated_row_tAggregateRow_5.CountTotalDue_clmCount);

					row19.MaxTotalDue = aggregated_row_tAggregateRow_5.MaxTotalDue_max;

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_12 main ] start
					 */

					currentComponent = "tFileOutputDelimited_12";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
					}

					StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();
					if (row19.CountryRegion != null) {
						sb_tFileOutputDelimited_12.append(row19.CountryRegion);
					}
					sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
					if (row19.CountTotalDue != null) {
						sb_tFileOutputDelimited_12.append(
								row19.CountTotalDue.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString());
					}
					sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
					if (row19.MaxTotalDue != null) {
						sb_tFileOutputDelimited_12.append(row19.MaxTotalDue.toPlainString());
					}
					sb_tFileOutputDelimited_12.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);

					nb_line_tFileOutputDelimited_12++;
					resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

					outtFileOutputDelimited_12.write(sb_tFileOutputDelimited_12.toString());

					tos_count_tFileOutputDelimited_12++;

					/**
					 * [tFileOutputDelimited_12 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_12 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_12";

					/**
					 * [tFileOutputDelimited_12 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_12 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_12";

					/**
					 * [tFileOutputDelimited_12 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 end ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (outtFileOutputDelimited_12 != null) {
					outtFileOutputDelimited_12.flush();
					outtFileOutputDelimited_12.close();
				}

				globalMap.put("tFileOutputDelimited_12_NB_LINE", nb_line_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME", fileName_tFileOutputDelimited_12);

				if (isFileGenerated_tFileOutputDelimited_12 && nb_line_tFileOutputDelimited_12 == 0) {

					filetFileOutputDelimited_12.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_12", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tFileOutputDelimited_12", true);
				end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row18");

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_9")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_9"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_9")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (resourceMap.get("finish_tFileOutputDelimited_11") == null) {

					java.io.Writer outtFileOutputDelimited_11 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_11");
					if (outtFileOutputDelimited_11 != null) {
						outtFileOutputDelimited_11.flush();
						outtFileOutputDelimited_11.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_11")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_11"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_11")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_11 finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				/**
				 * [tAggregateRow_5_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				/**
				 * [tAggregateRow_5_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_12 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_12";

				if (resourceMap.get("finish_tFileOutputDelimited_12") == null) {

					java.io.Writer outtFileOutputDelimited_12 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_12");
					if (outtFileOutputDelimited_12 != null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_12")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_12"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_12")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.AddressID = this.AddressID;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.City = this.City;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.PostalCode = this.PostalCode;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.AddressID = this.AddressID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.AddressLine2 = readString(dis, ois);

				this.City = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.PostalCode = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.AddressLine2, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.PostalCode, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

					this.AddressLine1 = readString(dis);

					this.AddressLine2 = readString(dis);

					this.City = readString(dis);

					this.StateProvince = readString(dis);

					this.CountryRegion = readString(dis);

					this.PostalCode = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.AddressLine2, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.StateProvince, dos);

				// String

				writeString(this.CountryRegion, dos);

				// String

				writeString(this.PostalCode, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				row17Struct row18 = row17;

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tFileOutputDelimited_10 - inputs:(row17) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_3 - inputs:(row16,row18)
				// outputs:(copyOfSalesHeaderJoinAddress)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct>getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngAddress" + TalendDate.getDate("YYYY-MM") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
								fileName_tFileOutputDelimited_10.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
							fileName_tFileOutputDelimited_10.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0,
								fileName_tFileOutputDelimited_10.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME", fileName_tFileOutputDelimited_10);
				int nb_line_tFileOutputDelimited_10 = 0;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				final String OUT_DELIM_tFileOutputDelimited_10 = /**
																	 * Start field
																	 * tFileOutputDelimited_10:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /**
																		 * Start field
																		 * tFileOutputDelimited_10:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {
						dir_tFileOutputDelimited_10.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_10 = null;

				java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
				if (fileToDelete_tFileOutputDelimited_10.exists()) {
					fileToDelete_tFileOutputDelimited_10.delete();
				}
				outtFileOutputDelimited_10 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_10, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_10.length() == 0) {
					outtFileOutputDelimited_10.write("AddressID");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("AddressLine1");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("AddressLine2");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("City");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("StateProvince");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("CountryRegion");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("PostalCode");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("rowguid");
					outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.write("ModifiedDate");
					outtFileOutputDelimited_10.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);
					outtFileOutputDelimited_10.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_10", outtFileOutputDelimited_10);
				resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_10", isFileGenerated_tFileOutputDelimited_10);
				resourceMap.put("filetFileOutputDelimited_10", filetFileOutputDelimited_10);

				/**
				 * [tFileOutputDelimited_10 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "sqlfamily";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:C2d93gw6NLmQlah1qbDbQ1H7VKCS7S3uC6OByIgwAEo46pqpgw==");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String port_tDBInput_6 = "1433";
				String dbname_tDBInput_6 = "AdventureWorks";
				String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_6)) {
					url_tDBInput_6 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_6)) {
					url_tDBInput_6 += "//" + "AdventureWorks";
				}
				url_tDBInput_6 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_6 = "SalesLT";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT SalesLT.Address.AddressID,\n		SalesLT.Address.AddressLine1,\n		SalesLT.Address.AddressLine2,\n		SalesLT.Address.Cit"
						+ "y,\n		SalesLT.Address.StateProvince,\n		SalesLT.Address.CountryRegion,\n		SalesLT.Address.PostalCode,\n		SalesLT.Address.row"
						+ "guid,\n		SalesLT.Address.ModifiedDate\nFROM	SalesLT.Address";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row17.AddressID = 0;
						} else {

							row17.AddressID = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row17.AddressLine1 = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.AddressLine1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row17.AddressLine1 = tmpContent_tDBInput_6;
								}
							} else {
								row17.AddressLine1 = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row17.AddressLine2 = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(3);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.AddressLine2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row17.AddressLine2 = tmpContent_tDBInput_6;
								}
							} else {
								row17.AddressLine2 = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row17.City = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.City = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row17.City = tmpContent_tDBInput_6;
								}
							} else {
								row17.City = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row17.StateProvince = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(5);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.StateProvince = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row17.StateProvince = tmpContent_tDBInput_6;
								}
							} else {
								row17.StateProvince = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row17.CountryRegion = null;
						} else {

							net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_6 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_6
									.getClob(6);
							if (clob_tDBInput_6 != null) {
								net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_6 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(
										clob_tDBInput_6);
								tmpContent_tDBInput_6 = tNTextImpl_tDBInput_6.getValue();
							} else {
								tmpContent_tDBInput_6 = null;
							}
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CountryRegion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row17.CountryRegion = tmpContent_tDBInput_6;
								}
							} else {
								row17.CountryRegion = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row17.PostalCode = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(7);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.PostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row17.PostalCode = tmpContent_tDBInput_6;
								}
							} else {
								row17.PostalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row17.rowguid = null;
						} else {

							row17.rowguid = rs_tDBInput_6.getObject(8);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row17.ModifiedDate = null;
						} else {

							row17.ModifiedDate = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 9);

						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 main ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
						}

						StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();
						sb_tFileOutputDelimited_10.append(row17.AddressID);
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.AddressLine1 != null) {
							sb_tFileOutputDelimited_10.append(row17.AddressLine1);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.AddressLine2 != null) {
							sb_tFileOutputDelimited_10.append(row17.AddressLine2);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.City != null) {
							sb_tFileOutputDelimited_10.append(row17.City);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.StateProvince != null) {
							sb_tFileOutputDelimited_10.append(row17.StateProvince);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.CountryRegion != null) {
							sb_tFileOutputDelimited_10.append(row17.CountryRegion);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.PostalCode != null) {
							sb_tFileOutputDelimited_10.append(row17.PostalCode);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.rowguid != null) {
							sb_tFileOutputDelimited_10.append(row17.rowguid);
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
						if (row17.ModifiedDate != null) {
							sb_tFileOutputDelimited_10
									.append(FormatterUtils.format_Date(row17.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_10.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);

						nb_line_tFileOutputDelimited_10++;
						resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

						outtFileOutputDelimited_10.write(sb_tFileOutputDelimited_10.toString());

						row18 = row17;

						tos_count_tFileOutputDelimited_10++;

						/**
						 * [tFileOutputDelimited_10 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						/**
						 * [tFileOutputDelimited_10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row18 main ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
						}

						row18Struct row18_HashRow = new row18Struct();

						row18_HashRow.AddressID = row18.AddressID;

						row18_HashRow.AddressLine1 = row18.AddressLine1;

						row18_HashRow.AddressLine2 = row18.AddressLine2;

						row18_HashRow.City = row18.City;

						row18_HashRow.StateProvince = row18.StateProvince;

						row18_HashRow.CountryRegion = row18.CountryRegion;

						row18_HashRow.PostalCode = row18.PostalCode;

						row18_HashRow.rowguid = row18.rowguid;

						row18_HashRow.ModifiedDate = row18.ModifiedDate;

						tHash_Lookup_row18.put(row18_HashRow);

						tos_count_tAdvancedHash_row18++;

						/**
						 * [tAdvancedHash_row18 main ] stop
						 */

						/**
						 * [tAdvancedHash_row18 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						/**
						 * [tAdvancedHash_row18 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row18 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						/**
						 * [tAdvancedHash_row18 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_10 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_10";

						/**
						 * [tFileOutputDelimited_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 end ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (outtFileOutputDelimited_10 != null) {
					outtFileOutputDelimited_10.flush();
					outtFileOutputDelimited_10.close();
				}

				globalMap.put("tFileOutputDelimited_10_NB_LINE", nb_line_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME", fileName_tFileOutputDelimited_10);

				if (isFileGenerated_tFileOutputDelimited_10 && nb_line_tFileOutputDelimited_10 == 0) {

					filetFileOutputDelimited_10.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_10", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (resourceMap.get("finish_tFileOutputDelimited_10") == null) {

					java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_10");
					if (outtFileOutputDelimited_10 != null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_10")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_10"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_10")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class DadosVendasStruct implements routines.system.IPersistableRow<DadosVendasStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductColor;

		public String getProductColor() {
			return this.ProductColor;
		}

		public String ProductSize;

		public String getProductSize() {
			return this.ProductSize;
		}

		public BigDecimal ProductWeight;

		public BigDecimal getProductWeight() {
			return this.ProductWeight;
		}

		public Object ProductStandardCost;

		public Object getProductStandardCost() {
			return this.ProductStandardCost;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final DadosVendasStruct other = (DadosVendasStruct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(DadosVendasStruct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesPerson = this.SalesPerson;
			other.CountryRegion = this.CountryRegion;
			other.ProductName = this.ProductName;
			other.ProductColor = this.ProductColor;
			other.ProductSize = this.ProductSize;
			other.ProductWeight = this.ProductWeight;
			other.ProductStandardCost = this.ProductStandardCost;

		}

		public void copyKeysDataTo(DadosVendasStruct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesPerson = readString(dis);

					this.CountryRegion = readString(dis);

					this.ProductName = readString(dis);

					this.ProductColor = readString(dis);

					this.ProductSize = readString(dis);

					this.ProductWeight = (BigDecimal) dis.readObject();

					this.ProductStandardCost = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// String

				writeString(this.SalesPerson, dos);

				// String

				writeString(this.CountryRegion, dos);

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductColor, dos);

				// String

				writeString(this.ProductSize, dos);

				// BigDecimal

				dos.writeObject(this.ProductWeight);

				// Object

				dos.writeObject(this.ProductStandardCost);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",ProductName=" + ProductName);
			sb.append(",ProductColor=" + ProductColor);
			sb.append(",ProductSize=" + ProductSize);
			sb.append(",ProductWeight=" + String.valueOf(ProductWeight));
			sb.append(",ProductStandardCost=" + String.valueOf(ProductStandardCost));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DadosVendasStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductColor;

		public String getProductColor() {
			return this.ProductColor;
		}

		public String ProductSize;

		public String getProductSize() {
			return this.ProductSize;
		}

		public BigDecimal ProductWeight;

		public BigDecimal getProductWeight() {
			return this.ProductWeight;
		}

		public Object ProductStandardCost;

		public Object getProductStandardCost() {
			return this.ProductStandardCost;
		}

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public java.util.Date SalesOrderDate;

		public java.util.Date getSalesOrderDate() {
			return this.SalesOrderDate;
		}

		public Integer SalesShipToAddressID;

		public Integer getSalesShipToAddressID() {
			return this.SalesShipToAddressID;
		}

		public int SalesCustomerID;

		public int getSalesCustomerID() {
			return this.SalesCustomerID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductColor = readString(dis);

					this.ProductSize = readString(dis);

					this.ProductWeight = (BigDecimal) dis.readObject();

					this.ProductStandardCost = (Object) dis.readObject();

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDate = readDate(dis);

					this.SalesShipToAddressID = readInteger(dis);

					this.SalesCustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductColor, dos);

				// String

				writeString(this.ProductSize, dos);

				// BigDecimal

				dos.writeObject(this.ProductWeight);

				// Object

				dos.writeObject(this.ProductStandardCost);

				// int

				dos.writeInt(this.SalesOrderID);

				// java.util.Date

				writeDate(this.SalesOrderDate, dos);

				// Integer

				writeInteger(this.SalesShipToAddressID, dos);

				// int

				dos.writeInt(this.SalesCustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductName=" + ProductName);
			sb.append(",ProductColor=" + ProductColor);
			sb.append(",ProductSize=" + ProductSize);
			sb.append(",ProductWeight=" + String.valueOf(ProductWeight));
			sb.append(",ProductStandardCost=" + String.valueOf(ProductStandardCost));
			sb.append(",SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDate=" + String.valueOf(SalesOrderDate));
			sb.append(",SalesShipToAddressID=" + String.valueOf(SalesShipToAddressID));
			sb.append(",SalesCustomerID=" + String.valueOf(SalesCustomerID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DetalhesVendasStruct implements routines.system.IPersistableRow<DetalhesVendasStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String ProductColor;

		public String getProductColor() {
			return this.ProductColor;
		}

		public String ProductSize;

		public String getProductSize() {
			return this.ProductSize;
		}

		public BigDecimal ProductWeight;

		public BigDecimal getProductWeight() {
			return this.ProductWeight;
		}

		public Object ProductStandardCost;

		public Object getProductStandardCost() {
			return this.ProductStandardCost;
		}

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public java.util.Date SalesOrderDate;

		public java.util.Date getSalesOrderDate() {
			return this.SalesOrderDate;
		}

		public Integer SalesShipToAddressID;

		public Integer getSalesShipToAddressID() {
			return this.SalesShipToAddressID;
		}

		public int SalesCustomerID;

		public int getSalesCustomerID() {
			return this.SalesCustomerID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final DetalhesVendasStruct other = (DetalhesVendasStruct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(DetalhesVendasStruct other) {

			other.ProductName = this.ProductName;
			other.ProductColor = this.ProductColor;
			other.ProductSize = this.ProductSize;
			other.ProductWeight = this.ProductWeight;
			other.ProductStandardCost = this.ProductStandardCost;
			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDate = this.SalesOrderDate;
			other.SalesShipToAddressID = this.SalesShipToAddressID;
			other.SalesCustomerID = this.SalesCustomerID;

		}

		public void copyKeysDataTo(DetalhesVendasStruct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.ProductName = readString(dis);

					this.ProductColor = readString(dis);

					this.ProductSize = readString(dis);

					this.ProductWeight = (BigDecimal) dis.readObject();

					this.ProductStandardCost = (Object) dis.readObject();

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDate = readDate(dis);

					this.SalesShipToAddressID = readInteger(dis);

					this.SalesCustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ProductName, dos);

				// String

				writeString(this.ProductColor, dos);

				// String

				writeString(this.ProductSize, dos);

				// BigDecimal

				dos.writeObject(this.ProductWeight);

				// Object

				dos.writeObject(this.ProductStandardCost);

				// int

				dos.writeInt(this.SalesOrderID);

				// java.util.Date

				writeDate(this.SalesOrderDate, dos);

				// Integer

				writeInteger(this.SalesShipToAddressID, dos);

				// int

				dos.writeInt(this.SalesCustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductName=" + ProductName);
			sb.append(",ProductColor=" + ProductColor);
			sb.append(",ProductSize=" + ProductSize);
			sb.append(",ProductWeight=" + String.valueOf(ProductWeight));
			sb.append(",ProductStandardCost=" + String.valueOf(ProductStandardCost));
			sb.append(",SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDate=" + String.valueOf(SalesOrderDate));
			sb.append(",SalesShipToAddressID=" + String.valueOf(SalesShipToAddressID));
			sb.append(",SalesCustomerID=" + String.valueOf(SalesCustomerID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DetalhesVendasStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDetailID = dis.readInt();

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				result = prime * result + (int) this.SalesOrderDetailID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			if (this.SalesOrderDetailID != other.SalesOrderDetailID)
				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;
			other.OrderQty = this.OrderQty;
			other.ProductID = this.ProductID;
			other.UnitPrice = this.UnitPrice;
			other.UnitPriceDiscount = this.UnitPriceDiscount;
			other.LineTotal = this.LineTotal;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDetailID = dis.readInt();

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public int SalesOrderDetailID;

		public int getSalesOrderDetailID() {
			return this.SalesOrderDetailID;
		}

		public short OrderQty;

		public short getOrderQty() {
			return this.OrderQty;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public Object UnitPrice;

		public Object getUnitPrice() {
			return this.UnitPrice;
		}

		public Object UnitPriceDiscount;

		public Object getUnitPriceDiscount() {
			return this.UnitPriceDiscount;
		}

		public BigDecimal LineTotal;

		public BigDecimal getLineTotal() {
			return this.LineTotal;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				result = prime * result + (int) this.SalesOrderDetailID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_7Struct other = (after_tDBInput_7Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			if (this.SalesOrderDetailID != other.SalesOrderDetailID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_7Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;
			other.OrderQty = this.OrderQty;
			other.ProductID = this.ProductID;
			other.UnitPrice = this.UnitPrice;
			other.UnitPriceDiscount = this.UnitPriceDiscount;
			other.LineTotal = this.LineTotal;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tDBInput_7Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.SalesOrderDetailID = this.SalesOrderDetailID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.SalesOrderDetailID = dis.readInt();

					this.OrderQty = dis.readShort();

					this.ProductID = dis.readInt();

					this.UnitPrice = (Object) dis.readObject();

					this.UnitPriceDiscount = (Object) dis.readObject();

					this.LineTotal = (BigDecimal) dis.readObject();

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// int

				dos.writeInt(this.SalesOrderDetailID);

				// short

				dos.writeShort(this.OrderQty);

				// int

				dos.writeInt(this.ProductID);

				// Object

				dos.writeObject(this.UnitPrice);

				// Object

				dos.writeObject(this.UnitPriceDiscount);

				// BigDecimal

				dos.writeObject(this.LineTotal);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",SalesOrderDetailID=" + String.valueOf(SalesOrderDetailID));
			sb.append(",OrderQty=" + String.valueOf(OrderQty));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",UnitPrice=" + String.valueOf(UnitPrice));
			sb.append(",UnitPriceDiscount=" + String.valueOf(UnitPriceDiscount));
			sb.append(",LineTotal=" + String.valueOf(LineTotal));
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_8Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_2Process(globalMap);

				row20Struct row20 = new row20Struct();
				row20Struct row22 = row20;
				DetalhesVendasStruct DetalhesVendas = new DetalhesVendasStruct();
				DetalhesVendasStruct row29 = DetalhesVendas;
				DadosVendasStruct DadosVendas = new DadosVendasStruct();

				/**
				 * [tFileOutputDelimited_18 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_18", false);
				start_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_18";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DadosVendas");
				}

				int tos_count_tFileOutputDelimited_18 = 0;

				String fileName_tFileOutputDelimited_18 = "";
				fileName_tFileOutputDelimited_18 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/CuratedRelProductPerRergionPerSalesPerson"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_18 = null;
				String extension_tFileOutputDelimited_18 = null;
				String directory_tFileOutputDelimited_18 = null;
				if ((fileName_tFileOutputDelimited_18.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") < fileName_tFileOutputDelimited_18
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(0,
								fileName_tFileOutputDelimited_18.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(0,
							fileName_tFileOutputDelimited_18.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_18.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18.substring(0,
								fileName_tFileOutputDelimited_18.lastIndexOf("."));
						extension_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18
								.substring(fileName_tFileOutputDelimited_18.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_18 = fileName_tFileOutputDelimited_18;
						extension_tFileOutputDelimited_18 = "";
					}
					directory_tFileOutputDelimited_18 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_18 = true;
				java.io.File filetFileOutputDelimited_18 = new java.io.File(fileName_tFileOutputDelimited_18);
				globalMap.put("tFileOutputDelimited_18_FILE_NAME", fileName_tFileOutputDelimited_18);
				int nb_line_tFileOutputDelimited_18 = 0;
				int splitedFileNo_tFileOutputDelimited_18 = 0;
				int currentRow_tFileOutputDelimited_18 = 0;

				final String OUT_DELIM_tFileOutputDelimited_18 = /**
																	 * Start field
																	 * tFileOutputDelimited_18:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_18:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_18 = /**
																		 * Start field
																		 * tFileOutputDelimited_18:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_18:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_18 != null
						&& directory_tFileOutputDelimited_18.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_18 = new java.io.File(directory_tFileOutputDelimited_18);
					if (!dir_tFileOutputDelimited_18.exists()) {
						dir_tFileOutputDelimited_18.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_18 = null;

				java.io.File fileToDelete_tFileOutputDelimited_18 = new java.io.File(fileName_tFileOutputDelimited_18);
				if (fileToDelete_tFileOutputDelimited_18.exists()) {
					fileToDelete_tFileOutputDelimited_18.delete();
				}
				outtFileOutputDelimited_18 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_18, false), "UTF-8"));
				if (filetFileOutputDelimited_18.length() == 0) {
					outtFileOutputDelimited_18.write("SalesOrderID");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("SalesPerson");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("CountryRegion");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("ProductName");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("ProductColor");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("ProductSize");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("ProductWeight");
					outtFileOutputDelimited_18.write(OUT_DELIM_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.write("ProductStandardCost");
					outtFileOutputDelimited_18.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_18);
					outtFileOutputDelimited_18.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_18", outtFileOutputDelimited_18);
				resourceMap.put("nb_line_tFileOutputDelimited_18", nb_line_tFileOutputDelimited_18);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_18", isFileGenerated_tFileOutputDelimited_18);
				resourceMap.put("filetFileOutputDelimited_18", filetFileOutputDelimited_18);

				/**
				 * [tFileOutputDelimited_18 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) globalMap
						.get("tHash_Lookup_row30"));

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				DadosVendasStruct DadosVendas_tmp = new DadosVendasStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_15", false);
				start_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DetalhesVendas");
				}

				int tos_count_tFileOutputDelimited_15 = 0;

				String fileName_tFileOutputDelimited_15 = "";
				fileName_tFileOutputDelimited_15 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/HarmonizedRelVendas"
								+ TalendDate.getDate("YYYY-MM") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_15 = null;
				String extension_tFileOutputDelimited_15 = null;
				String directory_tFileOutputDelimited_15 = null;
				if ((fileName_tFileOutputDelimited_15.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") < fileName_tFileOutputDelimited_15
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15.substring(0,
								fileName_tFileOutputDelimited_15.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15.substring(0,
							fileName_tFileOutputDelimited_15.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_15.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15.substring(0,
								fileName_tFileOutputDelimited_15.lastIndexOf("."));
						extension_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15
								.substring(fileName_tFileOutputDelimited_15.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_15 = fileName_tFileOutputDelimited_15;
						extension_tFileOutputDelimited_15 = "";
					}
					directory_tFileOutputDelimited_15 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_15 = true;
				java.io.File filetFileOutputDelimited_15 = new java.io.File(fileName_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME", fileName_tFileOutputDelimited_15);
				int nb_line_tFileOutputDelimited_15 = 0;
				int splitedFileNo_tFileOutputDelimited_15 = 0;
				int currentRow_tFileOutputDelimited_15 = 0;

				final String OUT_DELIM_tFileOutputDelimited_15 = /**
																	 * Start field
																	 * tFileOutputDelimited_15:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_15:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_15 = /**
																		 * Start field
																		 * tFileOutputDelimited_15:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_15:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_15 != null
						&& directory_tFileOutputDelimited_15.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_15 = new java.io.File(directory_tFileOutputDelimited_15);
					if (!dir_tFileOutputDelimited_15.exists()) {
						dir_tFileOutputDelimited_15.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_15 = null;

				java.io.File fileToDelete_tFileOutputDelimited_15 = new java.io.File(fileName_tFileOutputDelimited_15);
				if (fileToDelete_tFileOutputDelimited_15.exists()) {
					fileToDelete_tFileOutputDelimited_15.delete();
				}
				outtFileOutputDelimited_15 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_15, false), "UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_15", outtFileOutputDelimited_15);
				resourceMap.put("nb_line_tFileOutputDelimited_15", nb_line_tFileOutputDelimited_15);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_15", isFileGenerated_tFileOutputDelimited_15);
				resourceMap.put("filetFileOutputDelimited_15", filetFileOutputDelimited_15);

				/**
				 * [tFileOutputDelimited_15 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) globalMap
						.get("tHash_Lookup_row23"));

				row23Struct row23HashKey = new row23Struct();
				row23Struct row23Default = new row23Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				DetalhesVendasStruct DetalhesVendas_tmp = new DetalhesVendasStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_13", false);
				start_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tFileOutputDelimited_13 = 0;

				String fileName_tFileOutputDelimited_13 = "";
				fileName_tFileOutputDelimited_13 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderDetail" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_13 = null;
				String extension_tFileOutputDelimited_13 = null;
				String directory_tFileOutputDelimited_13 = null;
				if ((fileName_tFileOutputDelimited_13.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") < fileName_tFileOutputDelimited_13
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
								fileName_tFileOutputDelimited_13.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
							fileName_tFileOutputDelimited_13.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_13.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13.substring(0,
								fileName_tFileOutputDelimited_13.lastIndexOf("."));
						extension_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13
								.substring(fileName_tFileOutputDelimited_13.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_13 = fileName_tFileOutputDelimited_13;
						extension_tFileOutputDelimited_13 = "";
					}
					directory_tFileOutputDelimited_13 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_13 = true;
				java.io.File filetFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME", fileName_tFileOutputDelimited_13);
				int nb_line_tFileOutputDelimited_13 = 0;
				int splitedFileNo_tFileOutputDelimited_13 = 0;
				int currentRow_tFileOutputDelimited_13 = 0;

				final String OUT_DELIM_tFileOutputDelimited_13 = /**
																	 * Start field
																	 * tFileOutputDelimited_13:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_13:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_13 = /**
																		 * Start field
																		 * tFileOutputDelimited_13:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_13:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_13 != null
						&& directory_tFileOutputDelimited_13.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_13 = new java.io.File(directory_tFileOutputDelimited_13);
					if (!dir_tFileOutputDelimited_13.exists()) {
						dir_tFileOutputDelimited_13.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_13 = null;

				java.io.File fileToDelete_tFileOutputDelimited_13 = new java.io.File(fileName_tFileOutputDelimited_13);
				if (fileToDelete_tFileOutputDelimited_13.exists()) {
					fileToDelete_tFileOutputDelimited_13.delete();
				}
				outtFileOutputDelimited_13 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_13, false), "UTF-8"));
				if (filetFileOutputDelimited_13.length() == 0) {
					outtFileOutputDelimited_13.write("SalesOrderID");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("SalesOrderDetailID");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("OrderQty");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("ProductID");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("UnitPrice");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("UnitPriceDiscount");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("LineTotal");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("rowguid");
					outtFileOutputDelimited_13.write(OUT_DELIM_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.write("ModifiedDate");
					outtFileOutputDelimited_13.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);
					outtFileOutputDelimited_13.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_13", outtFileOutputDelimited_13);
				resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_13", isFileGenerated_tFileOutputDelimited_13);
				resourceMap.put("filetFileOutputDelimited_13", filetFileOutputDelimited_13);

				/**
				 * [tFileOutputDelimited_13 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "sqlfamily";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:xrxsDAq7d6yh1VQwP0hMCG4JMUGWeSlefB9ctp7PrJ4rtWSpfQ==");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String port_tDBInput_7 = "1433";
				String dbname_tDBInput_7 = "AdventureWorks";
				String url_tDBInput_7 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_7)) {
					url_tDBInput_7 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_7)) {
					url_tDBInput_7 += "//" + "AdventureWorks";
				}
				url_tDBInput_7 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_7 = "SalesLT";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "SELECT SalesLT.SalesOrderDetail.SalesOrderID,\n		SalesLT.SalesOrderDetail.SalesOrderDetailID,\n		SalesLT.SalesOrderDetail"
						+ ".OrderQty,\n		SalesLT.SalesOrderDetail.ProductID,\n		SalesLT.SalesOrderDetail.UnitPrice,\n		SalesLT.SalesOrderDetail.UnitPr"
						+ "iceDiscount,\n		SalesLT.SalesOrderDetail.LineTotal,\n		SalesLT.SalesOrderDetail.rowguid,\n		SalesLT.SalesOrderDetail.Modifi"
						+ "edDate\nFROM	SalesLT.SalesOrderDetail";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row20.SalesOrderID = 0;
						} else {

							row20.SalesOrderID = rs_tDBInput_7.getInt(1);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row20.SalesOrderDetailID = 0;
						} else {

							row20.SalesOrderDetailID = rs_tDBInput_7.getInt(2);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row20.OrderQty = 0;
						} else {

							row20.OrderQty = rs_tDBInput_7.getShort(3);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row20.ProductID = 0;
						} else {

							row20.ProductID = rs_tDBInput_7.getInt(4);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row20.UnitPrice = null;
						} else {

							row20.UnitPrice = rs_tDBInput_7.getObject(5);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row20.UnitPriceDiscount = null;
						} else {

							row20.UnitPriceDiscount = rs_tDBInput_7.getObject(6);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row20.LineTotal = null;
						} else {

							row20.LineTotal = rs_tDBInput_7.getBigDecimal(7);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row20.rowguid = null;
						} else {

							row20.rowguid = rs_tDBInput_7.getObject(8);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row20.ModifiedDate = null;
						} else {

							row20.ModifiedDate = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 9);

						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 main ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row20");
						}

						StringBuilder sb_tFileOutputDelimited_13 = new StringBuilder();
						sb_tFileOutputDelimited_13.append(row20.SalesOrderID);
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						sb_tFileOutputDelimited_13.append(row20.SalesOrderDetailID);
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						sb_tFileOutputDelimited_13.append(row20.OrderQty);
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						sb_tFileOutputDelimited_13.append(row20.ProductID);
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						if (row20.UnitPrice != null) {
							sb_tFileOutputDelimited_13.append(row20.UnitPrice);
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						if (row20.UnitPriceDiscount != null) {
							sb_tFileOutputDelimited_13.append(row20.UnitPriceDiscount);
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						if (row20.LineTotal != null) {
							sb_tFileOutputDelimited_13.append(
									row20.LineTotal.setScale(6, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						if (row20.rowguid != null) {
							sb_tFileOutputDelimited_13.append(row20.rowguid);
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_tFileOutputDelimited_13);
						if (row20.ModifiedDate != null) {
							sb_tFileOutputDelimited_13
									.append(FormatterUtils.format_Date(row20.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_13.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_13);

						nb_line_tFileOutputDelimited_13++;
						resourceMap.put("nb_line_tFileOutputDelimited_13", nb_line_tFileOutputDelimited_13);

						outtFileOutputDelimited_13.write(sb_tFileOutputDelimited_13.toString());

						row22 = row20;

						tos_count_tFileOutputDelimited_13++;

						/**
						 * [tFileOutputDelimited_13 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						/**
						 * [tFileOutputDelimited_13 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row23"
						///////////////////////////////////////////////

						boolean forceLooprow23 = false;

						row23Struct row23ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							Object exprKeyValue_row23__ProductID = row22.ProductID;
							if (exprKeyValue_row23__ProductID == null) {
								hasCasePrimitiveKeyWithNull_tMap_4 = true;
							} else {
								row23HashKey.ProductID = (int) (Integer) exprKeyValue_row23__ProductID;
							}

							row23HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

								tHash_Lookup_row23.lookup(row23HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row23' and it contains more one result from keys : row23.ProductID = '" +
							// row23HashKey.ProductID + "'");
						} // G 071

						row23Struct row23 = null;

						row23Struct fromLookup_row23 = null;
						row23 = row23Default;

						if (tHash_Lookup_row23 != null && tHash_Lookup_row23.hasNext()) { // G 099

							fromLookup_row23 = tHash_Lookup_row23.next();

						} // G 099

						if (fromLookup_row23 != null) {
							row23 = fromLookup_row23;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row24"
						///////////////////////////////////////////////

						boolean forceLooprow24 = false;

						row24Struct row24ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_4 = false;

							Object exprKeyValue_row24__SalesOrderID = row22.SalesOrderID;
							if (exprKeyValue_row24__SalesOrderID == null) {
								hasCasePrimitiveKeyWithNull_tMap_4 = true;
							} else {
								row24HashKey.SalesOrderID = (int) (Integer) exprKeyValue_row24__SalesOrderID;
							}

							row24HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091

								tHash_Lookup_row24.lookup(row24HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row24 != null && tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row24' and it contains more one result from keys : row24.SalesOrderID = '" +
							// row24HashKey.SalesOrderID + "'");
						} // G 071

						row24Struct row24 = null;

						row24Struct fromLookup_row24 = null;
						row24 = row24Default;

						if (tHash_Lookup_row24 != null && tHash_Lookup_row24.hasNext()) { // G 099

							fromLookup_row24 = tHash_Lookup_row24.next();

						} // G 099

						if (fromLookup_row24 != null) {
							row24 = fromLookup_row24;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							DetalhesVendas = null;

// # Output table : 'DetalhesVendas'
							DetalhesVendas_tmp.ProductName = row23.Name;
							DetalhesVendas_tmp.ProductColor = row23.Color;
							DetalhesVendas_tmp.ProductSize = row23.Size;
							DetalhesVendas_tmp.ProductWeight = row23.Weight;
							DetalhesVendas_tmp.ProductStandardCost = row23.StandardCost;
							DetalhesVendas_tmp.SalesOrderID = row24.SalesOrderID;
							DetalhesVendas_tmp.SalesOrderDate = row24.OrderDate;
							DetalhesVendas_tmp.SalesShipToAddressID = row24.ShipToAddressID;
							DetalhesVendas_tmp.SalesCustomerID = row24.CustomerID;
							DetalhesVendas = DetalhesVendas_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "DetalhesVendas"
						if (DetalhesVendas != null) {

							/**
							 * [tFileOutputDelimited_15 main ] start
							 */

							currentComponent = "tFileOutputDelimited_15";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "DetalhesVendas");
							}

							StringBuilder sb_tFileOutputDelimited_15 = new StringBuilder();
							if (DetalhesVendas.ProductName != null) {
								sb_tFileOutputDelimited_15.append(DetalhesVendas.ProductName);
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							if (DetalhesVendas.ProductColor != null) {
								sb_tFileOutputDelimited_15.append(DetalhesVendas.ProductColor);
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							if (DetalhesVendas.ProductSize != null) {
								sb_tFileOutputDelimited_15.append(DetalhesVendas.ProductSize);
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							if (DetalhesVendas.ProductWeight != null) {
								sb_tFileOutputDelimited_15.append(DetalhesVendas.ProductWeight
										.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							if (DetalhesVendas.ProductStandardCost != null) {
								sb_tFileOutputDelimited_15.append(DetalhesVendas.ProductStandardCost);
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							sb_tFileOutputDelimited_15.append(DetalhesVendas.SalesOrderID);
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							if (DetalhesVendas.SalesOrderDate != null) {
								sb_tFileOutputDelimited_15.append(
										FormatterUtils.format_Date(DetalhesVendas.SalesOrderDate, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							if (DetalhesVendas.SalesShipToAddressID != null) {
								sb_tFileOutputDelimited_15.append(DetalhesVendas.SalesShipToAddressID);
							}
							sb_tFileOutputDelimited_15.append(OUT_DELIM_tFileOutputDelimited_15);
							sb_tFileOutputDelimited_15.append(DetalhesVendas.SalesCustomerID);
							sb_tFileOutputDelimited_15.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_15);

							nb_line_tFileOutputDelimited_15++;
							resourceMap.put("nb_line_tFileOutputDelimited_15", nb_line_tFileOutputDelimited_15);

							outtFileOutputDelimited_15.write(sb_tFileOutputDelimited_15.toString());

							row29 = DetalhesVendas;

							tos_count_tFileOutputDelimited_15++;

							/**
							 * [tFileOutputDelimited_15 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_15 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_15";

							/**
							 * [tFileOutputDelimited_15 process_data_begin ] stop
							 */

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row29");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row30"
							///////////////////////////////////////////////

							boolean forceLooprow30 = false;

							row30Struct row30ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								Object exprKeyValue_row30__SalesOrderID = row29.SalesOrderID;
								if (exprKeyValue_row30__SalesOrderID == null) {
									hasCasePrimitiveKeyWithNull_tMap_6 = true;
								} else {
									row30HashKey.SalesOrderID = (int) (Integer) exprKeyValue_row30__SalesOrderID;
								}

								row30HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_6) { // G_TM_M_091

									tHash_Lookup_row30.lookup(row30HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row30' and it contains more one result from keys : row30.SalesOrderID = '" +
								// row30HashKey.SalesOrderID + "'");
							} // G 071

							row30Struct row30 = null;

							row30Struct fromLookup_row30 = null;
							row30 = row30Default;

							if (tHash_Lookup_row30 != null && tHash_Lookup_row30.hasNext()) { // G 099

								fromLookup_row30 = tHash_Lookup_row30.next();

							} // G 099

							if (fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								DadosVendas = null;

// # Output table : 'DadosVendas'
								DadosVendas_tmp.SalesOrderID = row29.SalesOrderID;
								DadosVendas_tmp.SalesPerson = row30.SalesPerson;
								DadosVendas_tmp.CountryRegion = row30.CountryRegion;
								DadosVendas_tmp.ProductName = row29.ProductName;
								DadosVendas_tmp.ProductColor = row29.ProductColor;
								DadosVendas_tmp.ProductSize = row29.ProductSize;
								DadosVendas_tmp.ProductWeight = row29.ProductWeight;
								DadosVendas_tmp.ProductStandardCost = row29.ProductStandardCost;
								DadosVendas = DadosVendas_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */

							/**
							 * [tMap_6 process_data_begin ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_begin ] stop
							 */
// Start of branch "DadosVendas"
							if (DadosVendas != null) {

								/**
								 * [tFileOutputDelimited_18 main ] start
								 */

								currentComponent = "tFileOutputDelimited_18";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "DadosVendas");
								}

								StringBuilder sb_tFileOutputDelimited_18 = new StringBuilder();
								sb_tFileOutputDelimited_18.append(DadosVendas.SalesOrderID);
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.SalesPerson != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.SalesPerson);
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.CountryRegion != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.CountryRegion);
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.ProductName != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.ProductName);
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.ProductColor != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.ProductColor);
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.ProductSize != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.ProductSize);
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.ProductWeight != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.ProductWeight
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_tFileOutputDelimited_18);
								if (DadosVendas.ProductStandardCost != null) {
									sb_tFileOutputDelimited_18.append(DadosVendas.ProductStandardCost);
								}
								sb_tFileOutputDelimited_18.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_18);

								nb_line_tFileOutputDelimited_18++;
								resourceMap.put("nb_line_tFileOutputDelimited_18", nb_line_tFileOutputDelimited_18);

								outtFileOutputDelimited_18.write(sb_tFileOutputDelimited_18.toString());

								tos_count_tFileOutputDelimited_18++;

								/**
								 * [tFileOutputDelimited_18 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_18 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_18";

								/**
								 * [tFileOutputDelimited_18 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_18 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_18";

								/**
								 * [tFileOutputDelimited_18 process_data_end ] stop
								 */

							} // End of branch "DadosVendas"

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_15 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_15";

							/**
							 * [tFileOutputDelimited_15 process_data_end ] stop
							 */

						} // End of branch "DetalhesVendas"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_13 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_13";

						/**
						 * [tFileOutputDelimited_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 end ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (outtFileOutputDelimited_13 != null) {
					outtFileOutputDelimited_13.flush();
					outtFileOutputDelimited_13.close();
				}

				globalMap.put("tFileOutputDelimited_13_NB_LINE", nb_line_tFileOutputDelimited_13);
				globalMap.put("tFileOutputDelimited_13_FILE_NAME", fileName_tFileOutputDelimited_13);

				if (isFileGenerated_tFileOutputDelimited_13 && nb_line_tFileOutputDelimited_13 == 0) {

					filetFileOutputDelimited_13.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_13", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tFileOutputDelimited_13", true);
				end_Hash.put("tFileOutputDelimited_13", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_13 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row23 != null) {
					tHash_Lookup_row23.endGet();
				}
				globalMap.remove("tHash_Lookup_row23");

				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 end ] start
				 */

				currentComponent = "tFileOutputDelimited_15";

				if (outtFileOutputDelimited_15 != null) {
					outtFileOutputDelimited_15.flush();
					outtFileOutputDelimited_15.close();
				}

				globalMap.put("tFileOutputDelimited_15_NB_LINE", nb_line_tFileOutputDelimited_15);
				globalMap.put("tFileOutputDelimited_15_FILE_NAME", fileName_tFileOutputDelimited_15);

				if (isFileGenerated_tFileOutputDelimited_15 && nb_line_tFileOutputDelimited_15 == 0) {

					filetFileOutputDelimited_15.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_15", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DetalhesVendas");
				}

				ok_Hash.put("tFileOutputDelimited_15", true);
				end_Hash.put("tFileOutputDelimited_15", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_15 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row30 != null) {
					tHash_Lookup_row30.endGet();
				}
				globalMap.remove("tHash_Lookup_row30");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_18 end ] start
				 */

				currentComponent = "tFileOutputDelimited_18";

				if (outtFileOutputDelimited_18 != null) {
					outtFileOutputDelimited_18.flush();
					outtFileOutputDelimited_18.close();
				}

				globalMap.put("tFileOutputDelimited_18_NB_LINE", nb_line_tFileOutputDelimited_18);
				globalMap.put("tFileOutputDelimited_18_FILE_NAME", fileName_tFileOutputDelimited_18);

				if (isFileGenerated_tFileOutputDelimited_18 && nb_line_tFileOutputDelimited_18 == 0) {

					filetFileOutputDelimited_18.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_18", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DadosVendas");
				}

				ok_Hash.put("tFileOutputDelimited_18", true);
				end_Hash.put("tFileOutputDelimited_18", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_18 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row30");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row23");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row24");

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_13 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_13";

				if (resourceMap.get("finish_tFileOutputDelimited_13") == null) {

					java.io.Writer outtFileOutputDelimited_13 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_13");
					if (outtFileOutputDelimited_13 != null) {
						outtFileOutputDelimited_13.flush();
						outtFileOutputDelimited_13.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_13")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_13"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_13")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_13 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_15 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_15";

				if (resourceMap.get("finish_tFileOutputDelimited_15") == null) {

					java.io.Writer outtFileOutputDelimited_15 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_15");
					if (outtFileOutputDelimited_15 != null) {
						outtFileOutputDelimited_15.flush();
						outtFileOutputDelimited_15.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_15")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_15"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_15")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_15 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_18 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_18";

				if (resourceMap.get("finish_tFileOutputDelimited_18") == null) {

					java.io.Writer outtFileOutputDelimited_18 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_18");
					if (outtFileOutputDelimited_18 != null) {
						outtFileOutputDelimited_18.flush();
						outtFileOutputDelimited_18.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_18")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_18"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_18")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public Object ThumbNailPhoto;

		public Object getThumbNailPhoto() {
			return this.ThumbNailPhoto;
		}

		public String ThumbnailPhotoFileName;

		public String getThumbnailPhotoFileName() {
			return this.ThumbnailPhotoFileName;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.Color = this.Color;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.Size = this.Size;
			other.Weight = this.Weight;
			other.ProductCategoryID = this.ProductCategoryID;
			other.ProductModelID = this.ProductModelID;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.ThumbNailPhoto = this.ThumbNailPhoto;
			other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.ProductNumber = readString(dis, ois);

				this.Color = readString(dis, ois);

				this.StandardCost = (Object) ois.readObject();

				this.ListPrice = (Object) ois.readObject();

				this.Size = readString(dis, ois);

				this.Weight = (BigDecimal) ois.readObject();

				this.ProductCategoryID = readInteger(dis, ois);

				this.ProductModelID = readInteger(dis, ois);

				this.SellStartDate = readDate(dis, ois);

				this.SellEndDate = readDate(dis, ois);

				this.DiscontinuedDate = readDate(dis, ois);

				this.ThumbNailPhoto = (Object) ois.readObject();

				this.ThumbnailPhotoFileName = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.ProductNumber, dos, oos);

				writeString(this.Color, dos, oos);

				oos.writeObject(this.StandardCost);

				oos.writeObject(this.ListPrice);

				writeString(this.Size, dos, oos);

				oos.writeObject(this.Weight);

				writeInteger(this.ProductCategoryID, dos, oos);

				writeInteger(this.ProductModelID, dos, oos);

				writeDate(this.SellStartDate, dos, oos);

				writeDate(this.SellEndDate, dos, oos);

				writeDate(this.DiscontinuedDate, dos, oos);

				oos.writeObject(this.ThumbNailPhoto);

				writeString(this.ThumbnailPhotoFileName, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",ThumbNailPhoto=" + String.valueOf(ThumbNailPhoto));
			sb.append(",ThumbnailPhotoFileName=" + ThumbnailPhotoFileName);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String ProductNumber;

		public String getProductNumber() {
			return this.ProductNumber;
		}

		public String Color;

		public String getColor() {
			return this.Color;
		}

		public Object StandardCost;

		public Object getStandardCost() {
			return this.StandardCost;
		}

		public Object ListPrice;

		public Object getListPrice() {
			return this.ListPrice;
		}

		public String Size;

		public String getSize() {
			return this.Size;
		}

		public BigDecimal Weight;

		public BigDecimal getWeight() {
			return this.Weight;
		}

		public Integer ProductCategoryID;

		public Integer getProductCategoryID() {
			return this.ProductCategoryID;
		}

		public Integer ProductModelID;

		public Integer getProductModelID() {
			return this.ProductModelID;
		}

		public java.util.Date SellStartDate;

		public java.util.Date getSellStartDate() {
			return this.SellStartDate;
		}

		public java.util.Date SellEndDate;

		public java.util.Date getSellEndDate() {
			return this.SellEndDate;
		}

		public java.util.Date DiscontinuedDate;

		public java.util.Date getDiscontinuedDate() {
			return this.DiscontinuedDate;
		}

		public Object ThumbNailPhoto;

		public Object getThumbNailPhoto() {
			return this.ThumbNailPhoto;
		}

		public String ThumbnailPhotoFileName;

		public String getThumbnailPhotoFileName() {
			return this.ThumbnailPhotoFileName;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.ProductID = this.ProductID;
			other.Name = this.Name;
			other.ProductNumber = this.ProductNumber;
			other.Color = this.Color;
			other.StandardCost = this.StandardCost;
			other.ListPrice = this.ListPrice;
			other.Size = this.Size;
			other.Weight = this.Weight;
			other.ProductCategoryID = this.ProductCategoryID;
			other.ProductModelID = this.ProductModelID;
			other.SellStartDate = this.SellStartDate;
			other.SellEndDate = this.SellEndDate;
			other.DiscontinuedDate = this.DiscontinuedDate;
			other.ThumbNailPhoto = this.ThumbNailPhoto;
			other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.Name = readString(dis);

					this.ProductNumber = readString(dis);

					this.Color = readString(dis);

					this.StandardCost = (Object) dis.readObject();

					this.ListPrice = (Object) dis.readObject();

					this.Size = readString(dis);

					this.Weight = (BigDecimal) dis.readObject();

					this.ProductCategoryID = readInteger(dis);

					this.ProductModelID = readInteger(dis);

					this.SellStartDate = readDate(dis);

					this.SellEndDate = readDate(dis);

					this.DiscontinuedDate = readDate(dis);

					this.ThumbNailPhoto = (Object) dis.readObject();

					this.ThumbnailPhotoFileName = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.ProductNumber, dos);

				// String

				writeString(this.Color, dos);

				// Object

				dos.writeObject(this.StandardCost);

				// Object

				dos.writeObject(this.ListPrice);

				// String

				writeString(this.Size, dos);

				// BigDecimal

				dos.writeObject(this.Weight);

				// Integer

				writeInteger(this.ProductCategoryID, dos);

				// Integer

				writeInteger(this.ProductModelID, dos);

				// java.util.Date

				writeDate(this.SellStartDate, dos);

				// java.util.Date

				writeDate(this.SellEndDate, dos);

				// java.util.Date

				writeDate(this.DiscontinuedDate, dos);

				// Object

				dos.writeObject(this.ThumbNailPhoto);

				// String

				writeString(this.ThumbnailPhotoFileName, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",Name=" + Name);
			sb.append(",ProductNumber=" + ProductNumber);
			sb.append(",Color=" + Color);
			sb.append(",StandardCost=" + String.valueOf(StandardCost));
			sb.append(",ListPrice=" + String.valueOf(ListPrice));
			sb.append(",Size=" + Size);
			sb.append(",Weight=" + String.valueOf(Weight));
			sb.append(",ProductCategoryID=" + String.valueOf(ProductCategoryID));
			sb.append(",ProductModelID=" + String.valueOf(ProductModelID));
			sb.append(",SellStartDate=" + String.valueOf(SellStartDate));
			sb.append(",SellEndDate=" + String.valueOf(SellEndDate));
			sb.append(",DiscontinuedDate=" + String.valueOf(DiscontinuedDate));
			sb.append(",ThumbNailPhoto=" + String.valueOf(ThumbNailPhoto));
			sb.append(",ThumbnailPhotoFileName=" + ThumbnailPhotoFileName);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();
				row21Struct row23 = row21;

				/**
				 * [tAdvancedHash_row23 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row23", false);
				start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tAdvancedHash_row23 = 0;

				// connection name:row23
				// source node:tFileOutputDelimited_14 - inputs:(row21) outputs:(row23,row23) |
				// target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
				// linked node: tMap_4 - inputs:(row22,row23,row24) outputs:(DetalhesVendas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row23Struct>getLookup(matchingModeEnum_row23);

				globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);

				/**
				 * [tAdvancedHash_row23 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_14", false);
				start_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tFileOutputDelimited_14 = 0;

				String fileName_tFileOutputDelimited_14 = "";
				fileName_tFileOutputDelimited_14 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngProduct" + TalendDate.getDate("YYYY-MM-DD") + ".csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_14 = null;
				String extension_tFileOutputDelimited_14 = null;
				String directory_tFileOutputDelimited_14 = null;
				if ((fileName_tFileOutputDelimited_14.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") < fileName_tFileOutputDelimited_14
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0,
								fileName_tFileOutputDelimited_14.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0,
							fileName_tFileOutputDelimited_14.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_14.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14.substring(0,
								fileName_tFileOutputDelimited_14.lastIndexOf("."));
						extension_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14
								.substring(fileName_tFileOutputDelimited_14.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_14 = fileName_tFileOutputDelimited_14;
						extension_tFileOutputDelimited_14 = "";
					}
					directory_tFileOutputDelimited_14 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_14 = true;
				java.io.File filetFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME", fileName_tFileOutputDelimited_14);
				int nb_line_tFileOutputDelimited_14 = 0;
				int splitedFileNo_tFileOutputDelimited_14 = 0;
				int currentRow_tFileOutputDelimited_14 = 0;

				final String OUT_DELIM_tFileOutputDelimited_14 = /**
																	 * Start field
																	 * tFileOutputDelimited_14:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_14:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_14 = /**
																		 * Start field
																		 * tFileOutputDelimited_14:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_14:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_14 != null
						&& directory_tFileOutputDelimited_14.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_14 = new java.io.File(directory_tFileOutputDelimited_14);
					if (!dir_tFileOutputDelimited_14.exists()) {
						dir_tFileOutputDelimited_14.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_14 = null;

				java.io.File fileToDelete_tFileOutputDelimited_14 = new java.io.File(fileName_tFileOutputDelimited_14);
				if (fileToDelete_tFileOutputDelimited_14.exists()) {
					fileToDelete_tFileOutputDelimited_14.delete();
				}
				outtFileOutputDelimited_14 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_14, false), "UTF-8"));
				if (filetFileOutputDelimited_14.length() == 0) {
					outtFileOutputDelimited_14.write("ProductID");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("Name");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ProductNumber");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("Color");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("StandardCost");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ListPrice");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("Size");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("Weight");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ProductCategoryID");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ProductModelID");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("SellStartDate");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("SellEndDate");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("DiscontinuedDate");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ThumbNailPhoto");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ThumbnailPhotoFileName");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("rowguid");
					outtFileOutputDelimited_14.write(OUT_DELIM_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.write("ModifiedDate");
					outtFileOutputDelimited_14.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);
					outtFileOutputDelimited_14.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_14", outtFileOutputDelimited_14);
				resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_14", isFileGenerated_tFileOutputDelimited_14);
				resourceMap.put("filetFileOutputDelimited_14", filetFileOutputDelimited_14);

				/**
				 * [tFileOutputDelimited_14 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "sqlfamily";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:b2o4ghbgAkC4exJ5NJDNuZZUfQ5jSWZkei6zwxIQIMI3UH5Z8Q==");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String port_tDBInput_8 = "1433";
				String dbname_tDBInput_8 = "AdventureWorks";
				String url_tDBInput_8 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_8)) {
					url_tDBInput_8 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_8)) {
					url_tDBInput_8 += "//" + "AdventureWorks";
				}
				url_tDBInput_8 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_8 = "SalesLT";

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT SalesLT.Product.ProductID,\n		SalesLT.Product.Name,\n		SalesLT.Product.ProductNumber,\n		SalesLT.Product.Color,\n		S"
						+ "alesLT.Product.StandardCost,\n		SalesLT.Product.ListPrice,\n		SalesLT.Product.Size,\n		SalesLT.Product.Weight,\n		SalesLT.Pr"
						+ "oduct.ProductCategoryID,\n		SalesLT.Product.ProductModelID,\n		SalesLT.Product.SellStartDate,\n		SalesLT.Product.SellEndDat"
						+ "e,\n		SalesLT.Product.DiscontinuedDate,\n		SalesLT.Product.ThumbNailPhoto,\n		SalesLT.Product.ThumbnailPhotoFileName,\n		Sal"
						+ "esLT.Product.rowguid,\n		SalesLT.Product.ModifiedDate\nFROM	SalesLT.Product";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row21.ProductID = 0;
						} else {

							row21.ProductID = rs_tDBInput_8.getInt(1);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row21.Name = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row21.Name = tmpContent_tDBInput_8;
								}
							} else {
								row21.Name = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row21.ProductNumber = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(3);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.ProductNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row21.ProductNumber = tmpContent_tDBInput_8;
								}
							} else {
								row21.ProductNumber = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row21.Color = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(4);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.Color = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row21.Color = tmpContent_tDBInput_8;
								}
							} else {
								row21.Color = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row21.StandardCost = null;
						} else {

							row21.StandardCost = rs_tDBInput_8.getObject(5);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row21.ListPrice = null;
						} else {

							row21.ListPrice = rs_tDBInput_8.getObject(6);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row21.Size = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(7);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.Size = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row21.Size = tmpContent_tDBInput_8;
								}
							} else {
								row21.Size = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row21.Weight = null;
						} else {

							row21.Weight = rs_tDBInput_8.getBigDecimal(8);
							if (rs_tDBInput_8.wasNull()) {
								row21.Weight = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 9) {
							row21.ProductCategoryID = null;
						} else {

							row21.ProductCategoryID = rs_tDBInput_8.getInt(9);
							if (rs_tDBInput_8.wasNull()) {
								row21.ProductCategoryID = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 10) {
							row21.ProductModelID = null;
						} else {

							row21.ProductModelID = rs_tDBInput_8.getInt(10);
							if (rs_tDBInput_8.wasNull()) {
								row21.ProductModelID = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 11) {
							row21.SellStartDate = null;
						} else {

							row21.SellStartDate = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 11);

						}
						if (colQtyInRs_tDBInput_8 < 12) {
							row21.SellEndDate = null;
						} else {

							row21.SellEndDate = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 12);

						}
						if (colQtyInRs_tDBInput_8 < 13) {
							row21.DiscontinuedDate = null;
						} else {

							row21.DiscontinuedDate = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 13);

						}
						if (colQtyInRs_tDBInput_8 < 14) {
							row21.ThumbNailPhoto = null;
						} else {

							row21.ThumbNailPhoto = rs_tDBInput_8.getObject(14);
							if (rs_tDBInput_8.wasNull()) {
								row21.ThumbNailPhoto = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 15) {
							row21.ThumbnailPhotoFileName = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(15);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.ThumbnailPhotoFileName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row21.ThumbnailPhotoFileName = tmpContent_tDBInput_8;
								}
							} else {
								row21.ThumbnailPhotoFileName = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 16) {
							row21.rowguid = null;
						} else {

							row21.rowguid = rs_tDBInput_8.getObject(16);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 17) {
							row21.ModifiedDate = null;
						} else {

							row21.ModifiedDate = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 17);

						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 main ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row21");
						}

						StringBuilder sb_tFileOutputDelimited_14 = new StringBuilder();
						sb_tFileOutputDelimited_14.append(row21.ProductID);
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.Name != null) {
							sb_tFileOutputDelimited_14.append(row21.Name);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ProductNumber != null) {
							sb_tFileOutputDelimited_14.append(row21.ProductNumber);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.Color != null) {
							sb_tFileOutputDelimited_14.append(row21.Color);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.StandardCost != null) {
							sb_tFileOutputDelimited_14.append(row21.StandardCost);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ListPrice != null) {
							sb_tFileOutputDelimited_14.append(row21.ListPrice);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.Size != null) {
							sb_tFileOutputDelimited_14.append(row21.Size);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.Weight != null) {
							sb_tFileOutputDelimited_14
									.append(row21.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString());
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ProductCategoryID != null) {
							sb_tFileOutputDelimited_14.append(row21.ProductCategoryID);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ProductModelID != null) {
							sb_tFileOutputDelimited_14.append(row21.ProductModelID);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.SellStartDate != null) {
							sb_tFileOutputDelimited_14
									.append(FormatterUtils.format_Date(row21.SellStartDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.SellEndDate != null) {
							sb_tFileOutputDelimited_14
									.append(FormatterUtils.format_Date(row21.SellEndDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.DiscontinuedDate != null) {
							sb_tFileOutputDelimited_14
									.append(FormatterUtils.format_Date(row21.DiscontinuedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ThumbNailPhoto != null) {
							sb_tFileOutputDelimited_14.append(row21.ThumbNailPhoto);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ThumbnailPhotoFileName != null) {
							sb_tFileOutputDelimited_14.append(row21.ThumbnailPhotoFileName);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.rowguid != null) {
							sb_tFileOutputDelimited_14.append(row21.rowguid);
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_tFileOutputDelimited_14);
						if (row21.ModifiedDate != null) {
							sb_tFileOutputDelimited_14
									.append(FormatterUtils.format_Date(row21.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_14.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_14);

						nb_line_tFileOutputDelimited_14++;
						resourceMap.put("nb_line_tFileOutputDelimited_14", nb_line_tFileOutputDelimited_14);

						outtFileOutputDelimited_14.write(sb_tFileOutputDelimited_14.toString());

						row23 = row21;

						tos_count_tFileOutputDelimited_14++;

						/**
						 * [tFileOutputDelimited_14 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						/**
						 * [tFileOutputDelimited_14 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row23 main ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
						}

						row23Struct row23_HashRow = new row23Struct();

						row23_HashRow.ProductID = row23.ProductID;

						row23_HashRow.Name = row23.Name;

						row23_HashRow.ProductNumber = row23.ProductNumber;

						row23_HashRow.Color = row23.Color;

						row23_HashRow.StandardCost = row23.StandardCost;

						row23_HashRow.ListPrice = row23.ListPrice;

						row23_HashRow.Size = row23.Size;

						row23_HashRow.Weight = row23.Weight;

						row23_HashRow.ProductCategoryID = row23.ProductCategoryID;

						row23_HashRow.ProductModelID = row23.ProductModelID;

						row23_HashRow.SellStartDate = row23.SellStartDate;

						row23_HashRow.SellEndDate = row23.SellEndDate;

						row23_HashRow.DiscontinuedDate = row23.DiscontinuedDate;

						row23_HashRow.ThumbNailPhoto = row23.ThumbNailPhoto;

						row23_HashRow.ThumbnailPhotoFileName = row23.ThumbnailPhotoFileName;

						row23_HashRow.rowguid = row23.rowguid;

						row23_HashRow.ModifiedDate = row23.ModifiedDate;

						tHash_Lookup_row23.put(row23_HashRow);

						tos_count_tAdvancedHash_row23++;

						/**
						 * [tAdvancedHash_row23 main ] stop
						 */

						/**
						 * [tAdvancedHash_row23 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						/**
						 * [tAdvancedHash_row23 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row23 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						/**
						 * [tAdvancedHash_row23 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_14 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_14";

						/**
						 * [tFileOutputDelimited_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 end ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (outtFileOutputDelimited_14 != null) {
					outtFileOutputDelimited_14.flush();
					outtFileOutputDelimited_14.close();
				}

				globalMap.put("tFileOutputDelimited_14_NB_LINE", nb_line_tFileOutputDelimited_14);
				globalMap.put("tFileOutputDelimited_14_FILE_NAME", fileName_tFileOutputDelimited_14);

				if (isFileGenerated_tFileOutputDelimited_14 && nb_line_tFileOutputDelimited_14 == 0) {

					filetFileOutputDelimited_14.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_14", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tFileOutputDelimited_14", true);
				end_Hash.put("tFileOutputDelimited_14", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row23 end ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				tHash_Lookup_row23.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tAdvancedHash_row23", true);
				end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row23 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_14 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_14";

				if (resourceMap.get("finish_tFileOutputDelimited_14") == null) {

					java.io.Writer outtFileOutputDelimited_14 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_14");
					if (outtFileOutputDelimited_14 != null) {
						outtFileOutputDelimited_14.flush();
						outtFileOutputDelimited_14.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_14")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_14"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_14")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row23 finally ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				/**
				 * [tAdvancedHash_row23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.AddressID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.AddressID != other.AddressID)
				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.AddressID = this.AddressID;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.City = this.City;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.PostalCode = this.PostalCode;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.AddressID = this.AddressID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.AddressLine2 = readString(dis, ois);

				this.City = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.PostalCode = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.AddressLine2, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.PostalCode, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int AddressID;

		public int getAddressID() {
			return this.AddressID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String PostalCode;

		public String getPostalCode() {
			return this.PostalCode;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.AddressID = dis.readInt();

					this.AddressLine1 = readString(dis);

					this.AddressLine2 = readString(dis);

					this.City = readString(dis);

					this.StateProvince = readString(dis);

					this.CountryRegion = readString(dis);

					this.PostalCode = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.AddressID);

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.AddressLine2, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.StateProvince, dos);

				// String

				writeString(this.CountryRegion, dos);

				// String

				writeString(this.PostalCode, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AddressID=" + String.valueOf(AddressID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",PostalCode=" + PostalCode);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				row25Struct row27 = row25;

				/**
				 * [tAdvancedHash_row27 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row27", false);
				start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row27";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tAdvancedHash_row27 = 0;

				// connection name:row27
				// source node:tFileOutputDelimited_16 - inputs:(row25) outputs:(row27,row27) |
				// target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
				// linked node: tMap_5 - inputs:(row27,row26,row28) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row27Struct>getLookup(matchingModeEnum_row27);

				globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);

				/**
				 * [tAdvancedHash_row27 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_16", false);
				start_Hash.put("tFileOutputDelimited_16", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tFileOutputDelimited_16 = 0;

				String fileName_tFileOutputDelimited_16 = "";
				fileName_tFileOutputDelimited_16 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngestedAddress" + TalendDate.getDate("YYYY-MM-DD")
								+ ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_16 = null;
				String extension_tFileOutputDelimited_16 = null;
				String directory_tFileOutputDelimited_16 = null;
				if ((fileName_tFileOutputDelimited_16.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") < fileName_tFileOutputDelimited_16
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(0,
								fileName_tFileOutputDelimited_16.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(0,
							fileName_tFileOutputDelimited_16.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_16.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16.substring(0,
								fileName_tFileOutputDelimited_16.lastIndexOf("."));
						extension_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16
								.substring(fileName_tFileOutputDelimited_16.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_16 = fileName_tFileOutputDelimited_16;
						extension_tFileOutputDelimited_16 = "";
					}
					directory_tFileOutputDelimited_16 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_16 = true;
				java.io.File filetFileOutputDelimited_16 = new java.io.File(fileName_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME", fileName_tFileOutputDelimited_16);
				int nb_line_tFileOutputDelimited_16 = 0;
				int splitedFileNo_tFileOutputDelimited_16 = 0;
				int currentRow_tFileOutputDelimited_16 = 0;

				final String OUT_DELIM_tFileOutputDelimited_16 = /**
																	 * Start field
																	 * tFileOutputDelimited_16:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_16:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_16 = /**
																		 * Start field
																		 * tFileOutputDelimited_16:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_16:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_16 != null
						&& directory_tFileOutputDelimited_16.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_16 = new java.io.File(directory_tFileOutputDelimited_16);
					if (!dir_tFileOutputDelimited_16.exists()) {
						dir_tFileOutputDelimited_16.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_16 = null;

				java.io.File fileToDelete_tFileOutputDelimited_16 = new java.io.File(fileName_tFileOutputDelimited_16);
				if (fileToDelete_tFileOutputDelimited_16.exists()) {
					fileToDelete_tFileOutputDelimited_16.delete();
				}
				outtFileOutputDelimited_16 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_16, false), "UTF-8"));
				if (filetFileOutputDelimited_16.length() == 0) {
					outtFileOutputDelimited_16.write("AddressID");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("AddressLine1");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("AddressLine2");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("City");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("StateProvince");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("CountryRegion");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("PostalCode");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("rowguid");
					outtFileOutputDelimited_16.write(OUT_DELIM_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.write("ModifiedDate");
					outtFileOutputDelimited_16.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_16);
					outtFileOutputDelimited_16.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_16", outtFileOutputDelimited_16);
				resourceMap.put("nb_line_tFileOutputDelimited_16", nb_line_tFileOutputDelimited_16);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_16", isFileGenerated_tFileOutputDelimited_16);
				resourceMap.put("filetFileOutputDelimited_16", filetFileOutputDelimited_16);

				/**
				 * [tFileOutputDelimited_16 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "sqlfamily";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:uf9AuwASfYRQVahMh5zzDIVRBnxSwDJvqoprSMStge+WCa3uqg==");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String port_tDBInput_9 = "1433";
				String dbname_tDBInput_9 = "AdventureWorks";
				String url_tDBInput_9 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net";
				if (!"".equals(port_tDBInput_9)) {
					url_tDBInput_9 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_9)) {
					url_tDBInput_9 += "//" + "AdventureWorks";
				}
				url_tDBInput_9 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_9 = "SalesLT";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT SalesLT.Address.AddressID,\n		SalesLT.Address.AddressLine1,\n		SalesLT.Address.AddressLine2,\n		SalesLT.Address.Cit"
						+ "y,\n		SalesLT.Address.StateProvince,\n		SalesLT.Address.CountryRegion,\n		SalesLT.Address.PostalCode,\n		SalesLT.Address.row"
						+ "guid,\n		SalesLT.Address.ModifiedDate\nFROM	SalesLT.Address";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row25.AddressID = 0;
						} else {

							row25.AddressID = rs_tDBInput_9.getInt(1);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row25.AddressLine1 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(2);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.AddressLine1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row25.AddressLine1 = tmpContent_tDBInput_9;
								}
							} else {
								row25.AddressLine1 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row25.AddressLine2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(3);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.AddressLine2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row25.AddressLine2 = tmpContent_tDBInput_9;
								}
							} else {
								row25.AddressLine2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row25.City = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(4);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.City = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row25.City = tmpContent_tDBInput_9;
								}
							} else {
								row25.City = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row25.StateProvince = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(5);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.StateProvince = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row25.StateProvince = tmpContent_tDBInput_9;
								}
							} else {
								row25.StateProvince = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row25.CountryRegion = null;
						} else {

							net.sourceforge.jtds.jdbc.ClobImpl clob_tDBInput_9 = (net.sourceforge.jtds.jdbc.ClobImpl) rs_tDBInput_9
									.getClob(6);
							if (clob_tDBInput_9 != null) {
								net.sourceforge.jtds.jdbc.TalendNTextImpl tNTextImpl_tDBInput_9 = new net.sourceforge.jtds.jdbc.TalendNTextImpl(
										clob_tDBInput_9);
								tmpContent_tDBInput_9 = tNTextImpl_tDBInput_9.getValue();
							} else {
								tmpContent_tDBInput_9 = null;
							}
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.CountryRegion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row25.CountryRegion = tmpContent_tDBInput_9;
								}
							} else {
								row25.CountryRegion = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row25.PostalCode = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(7);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.PostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row25.PostalCode = tmpContent_tDBInput_9;
								}
							} else {
								row25.PostalCode = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row25.rowguid = null;
						} else {

							row25.rowguid = rs_tDBInput_9.getObject(8);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row25.ModifiedDate = null;
						} else {

							row25.ModifiedDate = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 9);

						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_16 main ] start
						 */

						currentComponent = "tFileOutputDelimited_16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
						}

						StringBuilder sb_tFileOutputDelimited_16 = new StringBuilder();
						sb_tFileOutputDelimited_16.append(row25.AddressID);
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.AddressLine1 != null) {
							sb_tFileOutputDelimited_16.append(row25.AddressLine1);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.AddressLine2 != null) {
							sb_tFileOutputDelimited_16.append(row25.AddressLine2);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.City != null) {
							sb_tFileOutputDelimited_16.append(row25.City);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.StateProvince != null) {
							sb_tFileOutputDelimited_16.append(row25.StateProvince);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.CountryRegion != null) {
							sb_tFileOutputDelimited_16.append(row25.CountryRegion);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.PostalCode != null) {
							sb_tFileOutputDelimited_16.append(row25.PostalCode);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.rowguid != null) {
							sb_tFileOutputDelimited_16.append(row25.rowguid);
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_tFileOutputDelimited_16);
						if (row25.ModifiedDate != null) {
							sb_tFileOutputDelimited_16
									.append(FormatterUtils.format_Date(row25.ModifiedDate, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_16.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_16);

						nb_line_tFileOutputDelimited_16++;
						resourceMap.put("nb_line_tFileOutputDelimited_16", nb_line_tFileOutputDelimited_16);

						outtFileOutputDelimited_16.write(sb_tFileOutputDelimited_16.toString());

						row27 = row25;

						tos_count_tFileOutputDelimited_16++;

						/**
						 * [tFileOutputDelimited_16 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_16 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_16";

						/**
						 * [tFileOutputDelimited_16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row27 main ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
						}

						row27Struct row27_HashRow = new row27Struct();

						row27_HashRow.AddressID = row27.AddressID;

						row27_HashRow.AddressLine1 = row27.AddressLine1;

						row27_HashRow.AddressLine2 = row27.AddressLine2;

						row27_HashRow.City = row27.City;

						row27_HashRow.StateProvince = row27.StateProvince;

						row27_HashRow.CountryRegion = row27.CountryRegion;

						row27_HashRow.PostalCode = row27.PostalCode;

						row27_HashRow.rowguid = row27.rowguid;

						row27_HashRow.ModifiedDate = row27.ModifiedDate;

						tHash_Lookup_row27.put(row27_HashRow);

						tos_count_tAdvancedHash_row27++;

						/**
						 * [tAdvancedHash_row27 main ] stop
						 */

						/**
						 * [tAdvancedHash_row27 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						/**
						 * [tAdvancedHash_row27 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row27 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row27";

						/**
						 * [tAdvancedHash_row27 process_data_end ] stop
						 */

						/**
						 * [tFileOutputDelimited_16 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_16";

						/**
						 * [tFileOutputDelimited_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 end ] start
				 */

				currentComponent = "tFileOutputDelimited_16";

				if (outtFileOutputDelimited_16 != null) {
					outtFileOutputDelimited_16.flush();
					outtFileOutputDelimited_16.close();
				}

				globalMap.put("tFileOutputDelimited_16_NB_LINE", nb_line_tFileOutputDelimited_16);
				globalMap.put("tFileOutputDelimited_16_FILE_NAME", fileName_tFileOutputDelimited_16);

				if (isFileGenerated_tFileOutputDelimited_16 && nb_line_tFileOutputDelimited_16 == 0) {

					filetFileOutputDelimited_16.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_16", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tFileOutputDelimited_16", true);
				end_Hash.put("tFileOutputDelimited_16", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row27 end ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				tHash_Lookup_row27.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tAdvancedHash_row27", true);
				end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row27 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_16 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_16";

				if (resourceMap.get("finish_tFileOutputDelimited_16") == null) {

					java.io.Writer outtFileOutputDelimited_16 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_16");
					if (outtFileOutputDelimited_16 != null) {
						outtFileOutputDelimited_16.flush();
						outtFileOutputDelimited_16.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_16")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_16"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_16")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row27 finally ] start
				 */

				currentComponent = "tAdvancedHash_row27";

				/**
				 * [tAdvancedHash_row27 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public Integer TotalDue;

		public Integer getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesPerson = readString(dis);

					this.TotalDue = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SalesPerson, dos);

				// Integer

				writeInteger(this.TotalDue, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesPerson=" + SalesPerson);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public Integer TotalDue;

		public Integer getTotalDue() {
			return this.TotalDue;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesPerson = readString(dis);

					this.TotalDue = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SalesPerson, dos);

				// Integer

				writeInteger(this.TotalDue, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesPerson=" + SalesPerson);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class TotalVendidoPVendedorStruct
			implements routines.system.IPersistableRow<TotalVendidoPVendedorStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SalesPerson == null) ? 0 : this.SalesPerson.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final TotalVendidoPVendedorStruct other = (TotalVendidoPVendedorStruct) obj;

			if (this.SalesPerson == null) {
				if (other.SalesPerson != null)
					return false;

			} else if (!this.SalesPerson.equals(other.SalesPerson))

				return false;

			return true;
		}

		public void copyDataTo(TotalVendidoPVendedorStruct other) {

			other.SalesPerson = this.SalesPerson;
			other.TotalDue = this.TotalDue;

		}

		public void copyKeysDataTo(TotalVendidoPVendedorStruct other) {

			other.SalesPerson = this.SalesPerson;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesPerson = readString(dis);

					this.TotalDue = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SalesPerson, dos);

				// BigDecimal

				dos.writeObject(this.TotalDue);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesPerson=" + SalesPerson);
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(TotalVendidoPVendedorStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesPerson, other.SalesPerson);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_4Process(globalMap);

				row11Struct row11 = new row11Struct();
				TotalVendidoPVendedorStruct TotalVendidoPVendedor = new TotalVendidoPVendedorStruct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "TotalVendidoPVendedor");
				}

				int tos_count_tAggregateRow_4_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String SalesPerson;
					Integer TotalDue_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.SalesPerson == null) ? 0 : this.SalesPerson.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.SalesPerson == null) {
							if (other.SalesPerson != null)
								return false;
						} else if (!this.SalesPerson.equals(other.SalesPerson))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				TotalVendidoPVendedorStruct TotalVendidoPVendedor_tmp = new TotalVendidoPVendedorStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
										+ TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row11 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row11 = new row11Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.SalesOrderID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SalesOrderID", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'SalesOrderID' in 'row11' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.RevisionNumber = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"RevisionNumber", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'RevisionNumber' in 'row11' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.OrderDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OrderDate", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.OrderDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.DueDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DueDate", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.DueDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.ShipDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipDate", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.ShipDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.Status = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Status", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'Status' in 'row11' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.OnlineOrderFlag = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OnlineOrderFlag", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.OnlineOrderFlag = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row11.SalesOrderNumber = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'row11' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.ShipToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipToAddressID", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.ShipToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.BillToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"BillToAddressID", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.BillToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row11.ShipMethod = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row11.CreditCardApprovalCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row11.SubTotal = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row11.TaxAmt = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row11.Freight = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.TotalDue = ParserUtils.parseTo_BigDecimal(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"TotalDue", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.TotalDue = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row11.Comment = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row11.rowguid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row11.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ModifiedDate", "row11", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row11.ModifiedDate = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row12"
							///////////////////////////////////////////////

							boolean forceLooprow12 = false;

							row12Struct row12ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								Object exprKeyValue_row12__CustomerID = row11.CustomerID;
								if (exprKeyValue_row12__CustomerID == null) {
									hasCasePrimitiveKeyWithNull_tMap_2 = true;
								} else {
									row12HashKey.CustomerID = (int) (Integer) exprKeyValue_row12__CustomerID;
								}

								row12HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

									tHash_Lookup_row12.lookup(row12HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row12' and it contains more one result from keys : row12.CustomerID = '" +
								// row12HashKey.CustomerID + "'");
							} // G 071

							row12Struct row12 = null;

							row12Struct fromLookup_row12 = null;
							row12 = row12Default;

							if (tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) { // G 099

								fromLookup_row12 = tHash_Lookup_row12.next();

							} // G 099

							if (fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								TotalVendidoPVendedor = null;

// # Output table : 'TotalVendidoPVendedor'
								TotalVendidoPVendedor_tmp.SalesPerson = row12.SalesPerson.replace("adventure-works\\",
										"");
								TotalVendidoPVendedor_tmp.TotalDue = row11.TotalDue;
								TotalVendidoPVendedor = TotalVendidoPVendedor_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "TotalVendidoPVendedor"
							if (TotalVendidoPVendedor != null) {

								/**
								 * [tAggregateRow_4_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "TotalVendidoPVendedor");
								}

								operation_finder_tAggregateRow_4.SalesPerson = TotalVendidoPVendedor.SalesPerson;

								operation_finder_tAggregateRow_4.hashCodeDirty = true;

								operation_result_tAggregateRow_4 = hash_tAggregateRow_4
										.get(operation_finder_tAggregateRow_4);

								if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

									operation_result_tAggregateRow_4.SalesPerson = operation_finder_tAggregateRow_4.SalesPerson;

									hash_tAggregateRow_4.put(operation_result_tAggregateRow_4,
											operation_result_tAggregateRow_4);

								} // G_OutMain_AggR_001

								if (operation_result_tAggregateRow_4.TotalDue_sum == null) {
									operation_result_tAggregateRow_4.TotalDue_sum = (int) 0;
								}

								operation_result_tAggregateRow_4.TotalDue_sum += TotalVendidoPVendedor.TotalDue
										.intValue();

								tos_count_tAggregateRow_4_AGGOUT++;

								/**
								 * [tAggregateRow_4_AGGOUT main ] stop
								 */

								/**
								 * [tAggregateRow_4_AGGOUT process_data_begin ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								/**
								 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
								 */

								/**
								 * [tAggregateRow_4_AGGOUT process_data_end ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								/**
								 * [tAggregateRow_4_AGGOUT process_data_end ] stop
								 */

							} // End of branch "TotalVendidoPVendedor"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "TotalVendidoPVendedor");
				}

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Curated/RelatorioSalesPersonCurated"
								+ TalendDate.getDate("YYYY-MM-DD") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
							fileName_tFileOutputDelimited_8.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);
				int nb_line_tFileOutputDelimited_8 = 0;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
																		 * Start field
																		 * tFileOutputDelimited_8:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				if (fileToDelete_tFileOutputDelimited_8.exists()) {
					fileToDelete_tFileOutputDelimited_8.delete();
				}
				outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false), "UTF-8"));
				if (filetFileOutputDelimited_8.length() == 0) {
					outtFileOutputDelimited_8.write("SalesPerson");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("TotalDue");
					outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
				resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_8", isFileGenerated_tFileOutputDelimited_8);
				resourceMap.put("filetFileOutputDelimited_8", filetFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					row13.SalesPerson = aggregated_row_tAggregateRow_4.SalesPerson;
					row13.TotalDue = aggregated_row_tAggregateRow_4.TotalDue_sum;

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_8 main ] start
					 */

					currentComponent = "tFileOutputDelimited_8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
					}

					StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
					if (row13.SalesPerson != null) {
						sb_tFileOutputDelimited_8.append(row13.SalesPerson);
					}
					sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
					if (row13.TotalDue != null) {
						sb_tFileOutputDelimited_8.append(row13.TotalDue);
					}
					sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

					nb_line_tFileOutputDelimited_8++;
					resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

					outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());

					tos_count_tFileOutputDelimited_8++;

					/**
					 * [tFileOutputDelimited_8 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_8 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_8";

					/**
					 * [tFileOutputDelimited_8 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_8 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_8";

					/**
					 * [tFileOutputDelimited_8 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE", nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);

				if (isFileGenerated_tFileOutputDelimited_8 && nb_line_tFileOutputDelimited_8 == 0) {

					filetFileOutputDelimited_8.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.remove("tAggregateRow_4");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row12");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				/**
				 * [tAggregateRow_4_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				/**
				 * [tAggregateRow_4_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_8")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_8"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_8")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.RevisionNumber = dis.readShort();

				this.OrderDate = readDate(dis, ois);

				this.DueDate = readDate(dis, ois);

				this.ShipDate = readDate(dis, ois);

				this.Status = dis.readShort();

				this.OnlineOrderFlag = readInteger(dis, ois);

				this.SalesOrderNumber = readString(dis, ois);

				this.CustomerID = dis.readInt();

				this.ShipToAddressID = readInteger(dis, ois);

				this.BillToAddressID = readInteger(dis, ois);

				this.ShipMethod = readString(dis, ois);

				this.CreditCardApprovalCode = readString(dis, ois);

				this.SubTotal = (Object) ois.readObject();

				this.TaxAmt = (Object) ois.readObject();

				this.Freight = (Object) ois.readObject();

				this.TotalDue = (BigDecimal) ois.readObject();

				this.Comment = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeShort(this.RevisionNumber);

				writeDate(this.OrderDate, dos, oos);

				writeDate(this.DueDate, dos, oos);

				writeDate(this.ShipDate, dos, oos);

				dos.writeShort(this.Status);

				writeInteger(this.OnlineOrderFlag, dos, oos);

				writeString(this.SalesOrderNumber, dos, oos);

				dos.writeInt(this.CustomerID);

				writeInteger(this.ShipToAddressID, dos, oos);

				writeInteger(this.BillToAddressID, dos, oos);

				writeString(this.ShipMethod, dos, oos);

				writeString(this.CreditCardApprovalCode, dos, oos);

				oos.writeObject(this.SubTotal);

				oos.writeObject(this.TaxAmt);

				oos.writeObject(this.Freight);

				oos.writeObject(this.TotalDue);

				writeString(this.Comment, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tFileInputDelimited_2 - inputs:(after_tDBInput_7)
				// outputs:(row24,row24) | target node:tAdvancedHash_row24 - inputs:(row24)
				// outputs:()
				// linked node: tMap_4 - inputs:(row22,row23,row24) outputs:(DetalhesVendas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct>getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
										+ TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row24 = null;

						row24 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row24 = new row24Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.SalesOrderID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SalesOrderID", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'SalesOrderID' in 'row24' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.RevisionNumber = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"RevisionNumber", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'RevisionNumber' in 'row24' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.OrderDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OrderDate", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.OrderDate = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.DueDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DueDate", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.DueDate = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.ShipDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipDate", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.ShipDate = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.Status = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Status", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'Status' in 'row24' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.OnlineOrderFlag = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OnlineOrderFlag", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.OnlineOrderFlag = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row24.SalesOrderNumber = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'row24' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.ShipToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipToAddressID", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.ShipToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.BillToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"BillToAddressID", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.BillToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row24.ShipMethod = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row24.CreditCardApprovalCode = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row24.SubTotal = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row24.TaxAmt = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							row24.Freight = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.TotalDue = ParserUtils.parseTo_BigDecimal(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"TotalDue", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.TotalDue = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 17;

							row24.Comment = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							row24.rowguid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row24.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ModifiedDate", "row24", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row24.ModifiedDate = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row24 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tAdvancedHash_row24 main ] start
							 */

							currentComponent = "tAdvancedHash_row24";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
							}

							row24Struct row24_HashRow = new row24Struct();

							row24_HashRow.SalesOrderID = row24.SalesOrderID;

							row24_HashRow.RevisionNumber = row24.RevisionNumber;

							row24_HashRow.OrderDate = row24.OrderDate;

							row24_HashRow.DueDate = row24.DueDate;

							row24_HashRow.ShipDate = row24.ShipDate;

							row24_HashRow.Status = row24.Status;

							row24_HashRow.OnlineOrderFlag = row24.OnlineOrderFlag;

							row24_HashRow.SalesOrderNumber = row24.SalesOrderNumber;

							row24_HashRow.CustomerID = row24.CustomerID;

							row24_HashRow.ShipToAddressID = row24.ShipToAddressID;

							row24_HashRow.BillToAddressID = row24.BillToAddressID;

							row24_HashRow.ShipMethod = row24.ShipMethod;

							row24_HashRow.CreditCardApprovalCode = row24.CreditCardApprovalCode;

							row24_HashRow.SubTotal = row24.SubTotal;

							row24_HashRow.TaxAmt = row24.TaxAmt;

							row24_HashRow.Freight = row24.Freight;

							row24_HashRow.TotalDue = row24.TotalDue;

							row24_HashRow.Comment = row24.Comment;

							row24_HashRow.rowguid = row24.rowguid;

							row24_HashRow.ModifiedDate = row24.ModifiedDate;

							tHash_Lookup_row24.put(row24_HashRow);

							tos_count_tAdvancedHash_row24++;

							/**
							 * [tAdvancedHash_row24 main ] stop
							 */

							/**
							 * [tAdvancedHash_row24 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row24";

							/**
							 * [tAdvancedHash_row24 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row24 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row24";

							/**
							 * [tAdvancedHash_row24 process_data_end ] stop
							 */

						} // End of branch "row24"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.AddressLine1 = this.AddressLine1;
			other.City = this.City;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.LastName = this.LastName;
			other.SalesPerson = this.SalesPerson;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AddressLine1 = readString(dis, ois);

				this.City = readString(dis, ois);

				this.StateProvince = readString(dis, ois);

				this.CountryRegion = readString(dis, ois);

				this.Title = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.SalesPerson = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.AddressLine1, dos, oos);

				writeString(this.City, dos, oos);

				writeString(this.StateProvince, dos, oos);

				writeString(this.CountryRegion, dos, oos);

				writeString(this.Title, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.SalesPerson, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String StateProvince;

		public String getStateProvince() {
			return this.StateProvince;
		}

		public String CountryRegion;

		public String getCountryRegion() {
			return this.CountryRegion;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.AddressLine1 = this.AddressLine1;
			other.City = this.City;
			other.StateProvince = this.StateProvince;
			other.CountryRegion = this.CountryRegion;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.LastName = this.LastName;
			other.SalesPerson = this.SalesPerson;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.AddressLine1 = readString(dis);

					this.City = readString(dis);

					this.StateProvince = readString(dis);

					this.CountryRegion = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.SalesPerson = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.StateProvince, dos);

				// String

				writeString(this.CountryRegion, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.SalesPerson, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",City=" + City);
			sb.append(",StateProvince=" + StateProvince);
			sb.append(",CountryRegion=" + CountryRegion);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesOrderID;

		public int getSalesOrderID() {
			return this.SalesOrderID;
		}

		public short RevisionNumber;

		public short getRevisionNumber() {
			return this.RevisionNumber;
		}

		public java.util.Date OrderDate;

		public java.util.Date getOrderDate() {
			return this.OrderDate;
		}

		public java.util.Date DueDate;

		public java.util.Date getDueDate() {
			return this.DueDate;
		}

		public java.util.Date ShipDate;

		public java.util.Date getShipDate() {
			return this.ShipDate;
		}

		public short Status;

		public short getStatus() {
			return this.Status;
		}

		public Integer OnlineOrderFlag;

		public Integer getOnlineOrderFlag() {
			return this.OnlineOrderFlag;
		}

		public String SalesOrderNumber;

		public String getSalesOrderNumber() {
			return this.SalesOrderNumber;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public Integer ShipToAddressID;

		public Integer getShipToAddressID() {
			return this.ShipToAddressID;
		}

		public Integer BillToAddressID;

		public Integer getBillToAddressID() {
			return this.BillToAddressID;
		}

		public String ShipMethod;

		public String getShipMethod() {
			return this.ShipMethod;
		}

		public String CreditCardApprovalCode;

		public String getCreditCardApprovalCode() {
			return this.CreditCardApprovalCode;
		}

		public Object SubTotal;

		public Object getSubTotal() {
			return this.SubTotal;
		}

		public Object TaxAmt;

		public Object getTaxAmt() {
			return this.TaxAmt;
		}

		public Object Freight;

		public Object getFreight() {
			return this.Freight;
		}

		public BigDecimal TotalDue;

		public BigDecimal getTotalDue() {
			return this.TotalDue;
		}

		public String Comment;

		public String getComment() {
			return this.Comment;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesOrderID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_3Struct other = (after_tFileInputDelimited_3Struct) obj;

			if (this.SalesOrderID != other.SalesOrderID)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_3Struct other) {

			other.SalesOrderID = this.SalesOrderID;
			other.RevisionNumber = this.RevisionNumber;
			other.OrderDate = this.OrderDate;
			other.DueDate = this.DueDate;
			other.ShipDate = this.ShipDate;
			other.Status = this.Status;
			other.OnlineOrderFlag = this.OnlineOrderFlag;
			other.SalesOrderNumber = this.SalesOrderNumber;
			other.CustomerID = this.CustomerID;
			other.ShipToAddressID = this.ShipToAddressID;
			other.BillToAddressID = this.BillToAddressID;
			other.ShipMethod = this.ShipMethod;
			other.CreditCardApprovalCode = this.CreditCardApprovalCode;
			other.SubTotal = this.SubTotal;
			other.TaxAmt = this.TaxAmt;
			other.Freight = this.Freight;
			other.TotalDue = this.TotalDue;
			other.Comment = this.Comment;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_3Struct other) {

			other.SalesOrderID = this.SalesOrderID;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_IngestaoVendas.length) {
					if (length < 1024 && commonByteArray_LOCAL_PROJECT_IngestaoVendas.length == 0) {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length);
				strReturn = new String(commonByteArray_LOCAL_PROJECT_IngestaoVendas, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.SalesOrderID = dis.readInt();

					this.RevisionNumber = dis.readShort();

					this.OrderDate = readDate(dis);

					this.DueDate = readDate(dis);

					this.ShipDate = readDate(dis);

					this.Status = dis.readShort();

					this.OnlineOrderFlag = readInteger(dis);

					this.SalesOrderNumber = readString(dis);

					this.CustomerID = dis.readInt();

					this.ShipToAddressID = readInteger(dis);

					this.BillToAddressID = readInteger(dis);

					this.ShipMethod = readString(dis);

					this.CreditCardApprovalCode = readString(dis);

					this.SubTotal = (Object) dis.readObject();

					this.TaxAmt = (Object) dis.readObject();

					this.Freight = (Object) dis.readObject();

					this.TotalDue = (BigDecimal) dis.readObject();

					this.Comment = readString(dis);

					this.rowguid = (Object) dis.readObject();

					this.ModifiedDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesOrderID);

				// short

				dos.writeShort(this.RevisionNumber);

				// java.util.Date

				writeDate(this.OrderDate, dos);

				// java.util.Date

				writeDate(this.DueDate, dos);

				// java.util.Date

				writeDate(this.ShipDate, dos);

				// short

				dos.writeShort(this.Status);

				// Integer

				writeInteger(this.OnlineOrderFlag, dos);

				// String

				writeString(this.SalesOrderNumber, dos);

				// int

				dos.writeInt(this.CustomerID);

				// Integer

				writeInteger(this.ShipToAddressID, dos);

				// Integer

				writeInteger(this.BillToAddressID, dos);

				// String

				writeString(this.ShipMethod, dos);

				// String

				writeString(this.CreditCardApprovalCode, dos);

				// Object

				dos.writeObject(this.SubTotal);

				// Object

				dos.writeObject(this.TaxAmt);

				// Object

				dos.writeObject(this.Freight);

				// BigDecimal

				dos.writeObject(this.TotalDue);

				// String

				writeString(this.Comment, dos);

				// Object

				dos.writeObject(this.rowguid);

				// java.util.Date

				writeDate(this.ModifiedDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesOrderID=" + String.valueOf(SalesOrderID));
			sb.append(",RevisionNumber=" + String.valueOf(RevisionNumber));
			sb.append(",OrderDate=" + String.valueOf(OrderDate));
			sb.append(",DueDate=" + String.valueOf(DueDate));
			sb.append(",ShipDate=" + String.valueOf(ShipDate));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",OnlineOrderFlag=" + String.valueOf(OnlineOrderFlag));
			sb.append(",SalesOrderNumber=" + SalesOrderNumber);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ShipToAddressID=" + String.valueOf(ShipToAddressID));
			sb.append(",BillToAddressID=" + String.valueOf(BillToAddressID));
			sb.append(",ShipMethod=" + ShipMethod);
			sb.append(",CreditCardApprovalCode=" + CreditCardApprovalCode);
			sb.append(",SubTotal=" + String.valueOf(SubTotal));
			sb.append(",TaxAmt=" + String.valueOf(TaxAmt));
			sb.append(",Freight=" + String.valueOf(Freight));
			sb.append(",TotalDue=" + String.valueOf(TotalDue));
			sb.append(",Comment=" + Comment);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_9Process(globalMap);
				tFileInputDelimited_5Process(globalMap);

				row26Struct row26 = new row26Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row30 = out1;

				/**
				 * [tAdvancedHash_row30 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row30", false);
				start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row30";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row30");
				}

				int tos_count_tAdvancedHash_row30 = 0;

				// connection name:row30
				// source node:tFileOutputDelimited_17 - inputs:(out1) outputs:(row30,row30) |
				// target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
				// linked node: tMap_6 - inputs:(row29,row30) outputs:(DadosVendas)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row30Struct>getLookup(matchingModeEnum_row30);

				globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);

				/**
				 * [tAdvancedHash_row30 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_17", false);
				start_Hash.put("tFileOutputDelimited_17", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tFileOutputDelimited_17 = 0;

				String fileName_tFileOutputDelimited_17 = "";
				fileName_tFileOutputDelimited_17 = (new java.io.File(
						"D:/Projetos/12ABDGrupo2DataOPS/DL/Harmonized/HarmonizedRelAddressSalesPerson"
								+ TalendDate.getDate("YYYY-MM") + ".csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_17 = null;
				String extension_tFileOutputDelimited_17 = null;
				String directory_tFileOutputDelimited_17 = null;
				if ((fileName_tFileOutputDelimited_17.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") < fileName_tFileOutputDelimited_17
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(0,
								fileName_tFileOutputDelimited_17.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(0,
							fileName_tFileOutputDelimited_17.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_17.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17.substring(0,
								fileName_tFileOutputDelimited_17.lastIndexOf("."));
						extension_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17
								.substring(fileName_tFileOutputDelimited_17.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_17 = fileName_tFileOutputDelimited_17;
						extension_tFileOutputDelimited_17 = "";
					}
					directory_tFileOutputDelimited_17 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_17 = true;
				java.io.File filetFileOutputDelimited_17 = new java.io.File(fileName_tFileOutputDelimited_17);
				globalMap.put("tFileOutputDelimited_17_FILE_NAME", fileName_tFileOutputDelimited_17);
				int nb_line_tFileOutputDelimited_17 = 0;
				int splitedFileNo_tFileOutputDelimited_17 = 0;
				int currentRow_tFileOutputDelimited_17 = 0;

				final String OUT_DELIM_tFileOutputDelimited_17 = /**
																	 * Start field
																	 * tFileOutputDelimited_17:FIELDSEPARATOR
																	 */
						";"/** End field tFileOutputDelimited_17:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_17 = /**
																		 * Start field
																		 * tFileOutputDelimited_17:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_17:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_17 != null
						&& directory_tFileOutputDelimited_17.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_17 = new java.io.File(directory_tFileOutputDelimited_17);
					if (!dir_tFileOutputDelimited_17.exists()) {
						dir_tFileOutputDelimited_17.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_17 = null;

				java.io.File fileToDelete_tFileOutputDelimited_17 = new java.io.File(fileName_tFileOutputDelimited_17);
				if (fileToDelete_tFileOutputDelimited_17.exists()) {
					fileToDelete_tFileOutputDelimited_17.delete();
				}
				outtFileOutputDelimited_17 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_17, false), "UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_17", outtFileOutputDelimited_17);
				resourceMap.put("nb_line_tFileOutputDelimited_17", nb_line_tFileOutputDelimited_17);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_17", isFileGenerated_tFileOutputDelimited_17);
				resourceMap.put("filetFileOutputDelimited_17", filetFileOutputDelimited_17);

				/**
				 * [tFileOutputDelimited_17 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) globalMap
						.get("tHash_Lookup_row27"));

				row27Struct row27HashKey = new row27Struct();
				row27Struct row27Default = new row27Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
										+ TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row26 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row26 = new row26Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.SalesOrderID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"SalesOrderID", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								rowstate_tFileInputDelimited_3.setException(new RuntimeException(
										"Value is empty for column : 'SalesOrderID' in 'row26' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.RevisionNumber = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"RevisionNumber", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								rowstate_tFileInputDelimited_3.setException(new RuntimeException(
										"Value is empty for column : 'RevisionNumber' in 'row26' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.OrderDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OrderDate", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.OrderDate = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.DueDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DueDate", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.DueDate = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.ShipDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipDate", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.ShipDate = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 5;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.Status = ParserUtils.parseTo_short(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Status", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								rowstate_tFileInputDelimited_3.setException(new RuntimeException(
										"Value is empty for column : 'Status' in 'row26' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 6;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.OnlineOrderFlag = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OnlineOrderFlag", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.OnlineOrderFlag = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row26.SalesOrderNumber = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								rowstate_tFileInputDelimited_3.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'row26' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 9;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.ShipToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ShipToAddressID", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.ShipToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 10;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.BillToAddressID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"BillToAddressID", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.BillToAddressID = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 11;

							row26.ShipMethod = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 12;

							row26.CreditCardApprovalCode = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							row26.SubTotal = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 14;

							row26.TaxAmt = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 15;

							row26.Freight = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 16;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.TotalDue = ParserUtils.parseTo_BigDecimal(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"TotalDue", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.TotalDue = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 17;

							row26.Comment = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 18;

							row26.rowguid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 19;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row26.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ModifiedDate", "row26", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row26.ModifiedDate = null;

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row26 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row27"
							///////////////////////////////////////////////

							boolean forceLooprow27 = false;

							row27Struct row27ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_5 = false;

								Object exprKeyValue_row27__AddressID = row26.ShipToAddressID;
								if (exprKeyValue_row27__AddressID == null) {
									hasCasePrimitiveKeyWithNull_tMap_5 = true;
								} else {
									row27HashKey.AddressID = (int) (Integer) exprKeyValue_row27__AddressID;
								}

								row27HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_5) { // G_TM_M_091

									tHash_Lookup_row27.lookup(row27HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row27' and it contains more one result from keys : row27.AddressID = '" +
								// row27HashKey.AddressID + "'");
							} // G 071

							row27Struct row27 = null;

							row27Struct fromLookup_row27 = null;
							row27 = row27Default;

							if (tHash_Lookup_row27 != null && tHash_Lookup_row27.hasNext()) { // G 099

								fromLookup_row27 = tHash_Lookup_row27.next();

							} // G 099

							if (fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}

							///////////////////////////////////////////////
							// Starting Lookup Table "row28"
							///////////////////////////////////////////////

							boolean forceLooprow28 = false;

							row28Struct row28ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_5 = false;

								Object exprKeyValue_row28__CustomerID = row26.CustomerID;
								if (exprKeyValue_row28__CustomerID == null) {
									hasCasePrimitiveKeyWithNull_tMap_5 = true;
								} else {
									row28HashKey.CustomerID = (int) (Integer) exprKeyValue_row28__CustomerID;
								}

								row28HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_5) { // G_TM_M_091

									tHash_Lookup_row28.lookup(row28HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row28' and it contains more one result from keys : row28.CustomerID = '" +
								// row28HashKey.CustomerID + "'");
							} // G 071

							row28Struct row28 = null;

							row28Struct fromLookup_row28 = null;
							row28 = row28Default;

							if (tHash_Lookup_row28 != null && tHash_Lookup_row28.hasNext()) { // G 099

								fromLookup_row28 = tHash_Lookup_row28.next();

							} // G 099

							if (fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.SalesOrderID = row26.SalesOrderID;
								out1_tmp.AddressLine1 = row27.AddressLine1;
								out1_tmp.City = row27.City;
								out1_tmp.StateProvince = row27.StateProvince;
								out1_tmp.CountryRegion = row27.CountryRegion;
								out1_tmp.Title = row28.Title;
								out1_tmp.FirstName = row28.FirstName;
								out1_tmp.LastName = row28.LastName;
								out1_tmp.SalesPerson = row28.SalesPerson.replace("adventure-works\\", "");
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_5 = false;

							tos_count_tMap_5++;

							/**
							 * [tMap_5 main ] stop
							 */

							/**
							 * [tMap_5 process_data_begin ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tFileOutputDelimited_17 main ] start
								 */

								currentComponent = "tFileOutputDelimited_17";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
								}

								StringBuilder sb_tFileOutputDelimited_17 = new StringBuilder();
								sb_tFileOutputDelimited_17.append(out1.SalesOrderID);
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.AddressLine1 != null) {
									sb_tFileOutputDelimited_17.append(out1.AddressLine1);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.City != null) {
									sb_tFileOutputDelimited_17.append(out1.City);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.StateProvince != null) {
									sb_tFileOutputDelimited_17.append(out1.StateProvince);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.CountryRegion != null) {
									sb_tFileOutputDelimited_17.append(out1.CountryRegion);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.Title != null) {
									sb_tFileOutputDelimited_17.append(out1.Title);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.FirstName != null) {
									sb_tFileOutputDelimited_17.append(out1.FirstName);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.LastName != null) {
									sb_tFileOutputDelimited_17.append(out1.LastName);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_tFileOutputDelimited_17);
								if (out1.SalesPerson != null) {
									sb_tFileOutputDelimited_17.append(out1.SalesPerson);
								}
								sb_tFileOutputDelimited_17.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_17);

								nb_line_tFileOutputDelimited_17++;
								resourceMap.put("nb_line_tFileOutputDelimited_17", nb_line_tFileOutputDelimited_17);

								outtFileOutputDelimited_17.write(sb_tFileOutputDelimited_17.toString());

								row30 = out1;

								tos_count_tFileOutputDelimited_17++;

								/**
								 * [tFileOutputDelimited_17 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_17 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_17";

								/**
								 * [tFileOutputDelimited_17 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row30 main ] start
								 */

								currentComponent = "tAdvancedHash_row30";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row30");
								}

								row30Struct row30_HashRow = new row30Struct();

								row30_HashRow.SalesOrderID = row30.SalesOrderID;

								row30_HashRow.AddressLine1 = row30.AddressLine1;

								row30_HashRow.City = row30.City;

								row30_HashRow.StateProvince = row30.StateProvince;

								row30_HashRow.CountryRegion = row30.CountryRegion;

								row30_HashRow.Title = row30.Title;

								row30_HashRow.FirstName = row30.FirstName;

								row30_HashRow.LastName = row30.LastName;

								row30_HashRow.SalesPerson = row30.SalesPerson;

								tHash_Lookup_row30.put(row30_HashRow);

								tos_count_tAdvancedHash_row30++;

								/**
								 * [tAdvancedHash_row30 main ] stop
								 */

								/**
								 * [tAdvancedHash_row30 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row30";

								/**
								 * [tAdvancedHash_row30 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row30 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row30";

								/**
								 * [tAdvancedHash_row30 process_data_end ] stop
								 */

								/**
								 * [tFileOutputDelimited_17 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_17";

								/**
								 * [tFileOutputDelimited_17 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_5 process_data_end ] start
							 */

							currentComponent = "tMap_5";

							/**
							 * [tMap_5 process_data_end ] stop
							 */

						} // End of branch "row26"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("D:/Projetos/12ABDGrupo2DataOPS/DL/raw/IngSalesOrderHeader"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row27 != null) {
					tHash_Lookup_row27.endGet();
				}
				globalMap.remove("tHash_Lookup_row27");

				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 end ] start
				 */

				currentComponent = "tFileOutputDelimited_17";

				if (outtFileOutputDelimited_17 != null) {
					outtFileOutputDelimited_17.flush();
					outtFileOutputDelimited_17.close();
				}

				globalMap.put("tFileOutputDelimited_17_NB_LINE", nb_line_tFileOutputDelimited_17);
				globalMap.put("tFileOutputDelimited_17_FILE_NAME", fileName_tFileOutputDelimited_17);

				if (isFileGenerated_tFileOutputDelimited_17 && nb_line_tFileOutputDelimited_17 == 0) {

					filetFileOutputDelimited_17.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_17", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tFileOutputDelimited_17", true);
				end_Hash.put("tFileOutputDelimited_17", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row30 end ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				tHash_Lookup_row30.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row30");
				}

				ok_Hash.put("tAdvancedHash_row30", true);
				end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row30 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row27");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row28");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_17 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_17";

				if (resourceMap.get("finish_tFileOutputDelimited_17") == null) {

					java.io.Writer outtFileOutputDelimited_17 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_17");
					if (outtFileOutputDelimited_17 != null) {
						outtFileOutputDelimited_17.flush();
						outtFileOutputDelimited_17.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_17")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_17"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_17")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row30 finally ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				/**
				 * [tAdvancedHash_row30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_IngestaoVendas = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String NameStyle;

		public String getNameStyle() {
			return this.NameStyle;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String SalesPerson;

		public String getSalesPerson() {
			return this.SalesPerson;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String PasswordHash;

		public String getPasswordHash() {
			return this.PasswordHash;
		}

		public String PasswordSalt;

		public String getPasswordSalt() {
			return this.PasswordSalt;
		}

		public Object rowguid;

		public Object getRowguid() {
			return this.rowguid;
		}

		public java.util.Date ModifiedDate;

		public java.util.Date getModifiedDate() {
			return this.ModifiedDate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.CustomerID = this.CustomerID;
			other.NameStyle = this.NameStyle;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.Suffix = this.Suffix;
			other.CompanyName = this.CompanyName;
			other.SalesPerson = this.SalesPerson;
			other.EmailAddress = this.EmailAddress;
			other.Phone = this.Phone;
			other.PasswordHash = this.PasswordHash;
			other.PasswordSalt = this.PasswordSalt;
			other.rowguid = this.rowguid;
			other.ModifiedDate = this.ModifiedDate;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_IngestaoVendas) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NameStyle = readString(dis, ois);

				this.Title = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.MiddleName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Suffix = readString(dis, ois);

				this.CompanyName = readString(dis, ois);

				this.SalesPerson = readString(dis, ois);

				this.EmailAddress = readString(dis, ois);

				this.Phone = readString(dis, ois);

				this.PasswordHash = readString(dis, ois);

				this.PasswordSalt = readString(dis, ois);

				this.rowguid = (Object) ois.readObject();

				this.ModifiedDate = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NameStyle, dos, oos);

				writeString(this.Title, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeString(this.MiddleName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Suffix, dos, oos);

				writeString(this.CompanyName, dos, oos);

				writeString(this.SalesPerson, dos, oos);

				writeString(this.EmailAddress, dos, oos);

				writeString(this.Phone, dos, oos);

				writeString(this.PasswordHash, dos, oos);

				writeString(this.PasswordSalt, dos, oos);

				oos.writeObject(this.rowguid);

				writeDate(this.ModifiedDate, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",NameStyle=" + NameStyle);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",Suffix=" + Suffix);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",SalesPerson=" + SalesPerson);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",Phone=" + Phone);
			sb.append(",PasswordHash=" + PasswordHash);
			sb.append(",PasswordSalt=" + PasswordSalt);
			sb.append(",rowguid=" + String.valueOf(rowguid));
			sb.append(",ModifiedDate=" + String.valueOf(ModifiedDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tFileInputDelimited_5 - inputs:(after_tFileInputDelimited_3)
				// outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28)
				// outputs:()
				// linked node: tMap_5 - inputs:(row27,row26,row28) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct>getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "D:/Projetos/12ABDGrupo2DataOPS/DL/raw/RelatorioIngCustomer"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"D:/Projetos/12ABDGrupo2DataOPS/DL/raw/RelatorioIngCustomer"
										+ TalendDate.getDate("YYYY-MM-DD") + ".csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row28 = null;

						row28 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row28 = new row28Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_5 = 0;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									row28.CustomerID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CustomerID", "row28", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								rowstate_tFileInputDelimited_5.setException(new RuntimeException(
										"Value is empty for column : 'CustomerID' in 'row28' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row28.NameStyle = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							row28.Title = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							row28.FirstName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							row28.MiddleName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 5;

							row28.LastName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 6;

							row28.Suffix = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 7;

							row28.CompanyName = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 8;

							row28.SalesPerson = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 9;

							row28.EmailAddress = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 10;

							row28.Phone = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 11;

							row28.PasswordHash = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 12;

							row28.PasswordSalt = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 13;

							row28.rowguid = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 14;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									row28.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ModifiedDate", "row28", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								row28.ModifiedDate = null;

							}

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row28 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "row28"
						if (row28 != null) {

							/**
							 * [tAdvancedHash_row28 main ] start
							 */

							currentComponent = "tAdvancedHash_row28";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row28");
							}

							row28Struct row28_HashRow = new row28Struct();

							row28_HashRow.CustomerID = row28.CustomerID;

							row28_HashRow.NameStyle = row28.NameStyle;

							row28_HashRow.Title = row28.Title;

							row28_HashRow.FirstName = row28.FirstName;

							row28_HashRow.MiddleName = row28.MiddleName;

							row28_HashRow.LastName = row28.LastName;

							row28_HashRow.Suffix = row28.Suffix;

							row28_HashRow.CompanyName = row28.CompanyName;

							row28_HashRow.SalesPerson = row28.SalesPerson;

							row28_HashRow.EmailAddress = row28.EmailAddress;

							row28_HashRow.Phone = row28.Phone;

							row28_HashRow.PasswordHash = row28.PasswordHash;

							row28_HashRow.PasswordSalt = row28.PasswordSalt;

							row28_HashRow.rowguid = row28.rowguid;

							row28_HashRow.ModifiedDate = row28.ModifiedDate;

							tHash_Lookup_row28.put(row28_HashRow);

							tos_count_tAdvancedHash_row28++;

							/**
							 * [tAdvancedHash_row28 main ] stop
							 */

							/**
							 * [tAdvancedHash_row28 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row28";

							/**
							 * [tAdvancedHash_row28 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row28 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row28";

							/**
							 * [tAdvancedHash_row28 process_data_end ] stop
							 */

						} // End of branch "row28"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("D:/Projetos/12ABDGrupo2DataOPS/DL/raw/RelatorioIngCustomer"
							+ TalendDate.getDate("YYYY-MM-DD") + ".csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row28 finally ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				/**
				 * [tAdvancedHash_row28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IngestaoVendas IngestaoVendasClass = new IngestaoVendas();

		int exitCode = IngestaoVendasClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = IngestaoVendas.class.getClassLoader()
					.getResourceAsStream("local_project/ingestaovendas_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = IngestaoVendas.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_3) {
			globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

			e_tDBInput_3.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_5) {
			globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

			e_tDBInput_5.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_7) {
			globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

			e_tDBInput_7.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : IngestaoVendas");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 884375 characters generated by Talend Open Studio for Data Integration on the
 * July 17, 2021 3:02:29 PM BRT
 ************************************************************************************************/